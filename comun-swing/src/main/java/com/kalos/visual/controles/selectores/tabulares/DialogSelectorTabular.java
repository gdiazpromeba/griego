// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package com.kalos.visual.controles.selectores.tabulares;import java.awt.Dimension;import java.util.ArrayList;import javax.swing.JTable;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import javax.swing.table.DefaultTableColumnModel;import javax.swing.table.TableColumn;import com.kalos.bibliotecadatos.FuenteDatosCacheable;import com.kalos.operaciones.OpBeans;import com.kalos.recursos.Recursos;import com.kalos.visual.controles.selectores.DialogSelectorBeans;import com.kalos.visual.modelos.PagingModel;import com.kalos.visual.renderers.FRGenericos;import org.apache.log4j.Logger;public abstract class DialogSelectorTabular extends DialogSelectorBeans {    public DialogSelectorTabular(String campos[], int dimensiones[], String renderers[], String encabezados[]) {	tabla = new JTable();	logger = Logger.getLogger(getClass().getName());	this.campos = campos;	this.dimensiones = dimensiones;	this.renderers = renderers;	this.encabezados = encabezados;	preparaColumnas();	setDefaultCloseOperation(1);	centerPanel.setPreferredSize(new Dimension(1200, 200));	tabla.getSelectionModel().addListSelectionListener(new ListSelectionListener() {	    public void valueChanged(ListSelectionEvent listselectionevent) {		if (!listselectionevent.getValueIsAdjusting())		    H();	    }	});    }    protected void H() {	int i = tabla.getSelectedRow();	if (i == -1) {	    return;	} else {	    Object obj = pagingModel.getFila(i);	    ArrayList arraylist = new ArrayList();	    arraylist.add(obj);	    listaSeleccionable.setLista(arraylist);	    listaSeleccionable.setPK(OpBeans.getId(obj));	    return;	}    }    protected void preparaColumnas() {	tabla.setAutoCreateColumnsFromModel(false);	tabla.setColumnModel(new DefaultTableColumnModel());	for (int i = 0; i < encabezados.length; i++) {	    javax.swing.table.TableCellRenderer tablecellrenderer = FRGenericos.obtieneRendererColumna(renderers[i]);	    TableColumn tablecolumn = new TableColumn(i, dimensiones[i], tablecellrenderer, null);	    tablecolumn.setHeaderValue(Recursos.getCadena(encabezados[i]));	    tabla.addColumn(tablecolumn);	}    }    protected void tablemodelATabla() {	tabla.setModel(pagingModel);	centerPanel.removeAll();	centerPanel.add(PagingModel.createPagingScrollPaneForTable(tabla));	centerPanel.repaint();	centerPanel.revalidate();    }    public abstract void mensajeVacio();    protected void A(JTable jtable) {	if (jtable.getRowCount() > 0)	    jtable.setRowSelectionInterval(0, 0);    }    protected JTable tabla;    protected String campos[];    protected int dimensiones[];    protected String renderers[];    protected String encabezados[];    protected PagingModel pagingModel;    protected FuenteDatosCacheable fuente;    Logger logger;}