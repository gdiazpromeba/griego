package com.kalos.visual.renderers;import java.awt.Color;import java.awt.Component;import java.util.List;import javax.swing.DefaultComboBoxModel;import javax.swing.JComboBox;import javax.swing.JLabel;import javax.swing.JTable;import javax.swing.JTree;import javax.swing.UIManager;import javax.swing.table.DefaultTableCellRenderer;import javax.swing.table.TableCellRenderer;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeCellRenderer;import javax.swing.tree.TreeCellRenderer;import com.kalos.beans.TipoJerarquico;import com.kalos.operaciones.OpPalabras;import com.kalos.recursos.CadenasEnum;import com.kalos.recursos.Configuracion;import com.kalos.recursos.Recursos;@SuppressWarnings("serial")public class FRGenericos {    JLabel J = new JLabel();    public static String ENUMERACION = "ENUMERACION";    public static String NUMERO_ENTERO = "NUMERO_ENTERO";    public static String ENTERO_NULABLE = "ENTERO_NULABLE";    public static String TEXTO_GRIEGO = "TEXTO_GRIEGO";    public static String STRING_NUMERICA = "STRING_NUMERICA";    public static String TEXTO_LATINO = "TEXTO_LATINO";    public static String BOOLEAN_SINO = "BOOLEAN_SINO";    public static String TIPO = "TIPO";    public static String DECLINACION = "DECLINACION";    public static String PREPOSIOCIONES = "PREPOSIOCIONES";    public static String NODO = "NODO";    public static TableCellRenderer obtieneRendererColumna(String paramString) {	if (paramString.equals("NUMERO_ENTERO")) {	    return new trNUMERO_ENTERO();	}	if (paramString.equals("ENTERO_NULABLE")) {	    return new trENTERO_NULABLE();	}	if (paramString.equals("STRING_NUMERICA")) {	    return new trSTRING_NUMERICA();	}	if (paramString.equals("TEXTO_GRIEGO")) {	    return new trTEXTO_GRIEGO();	}	if (paramString.equals("TEXTO_GRIEGO_SIN_MAKRONES")) {	    return new trTEXTO_GRIEGO_SIN_MAKRONES();	}	if (paramString.equals("TEXTO_LATINO")) {	    return new trTEXTO_LATINO();	}	if (paramString.equals("BOOLEAN_SINO")) {	    return new trBOOLEAN_SINO();	}	if (paramString.equals("TIPO")) {	    return new trTIPO();	}	if (paramString.equals("CONTA_VERVERBO")) {	    return new trCONTA_VERVERBO();	}	if (paramString.equals("VERBO_FACIL")) {	    return new trVERBO_FACIL();	}	if (paramString.equals("DECLINACION")) {	    return new trDECLINACION();	}	if (paramString.equals("PREPOSICIONES")) {	    return new trPREPOSICIONES();	}	if (paramString.equals("COMPLETO_A_BETA")) {	    return new _A();	}	if (paramString.equals("ENUMERACION")) {	    return new trENUMERACION();	}	throw new RuntimeException("el tipo de renderer pedido no existe " + paramString);    }    public static TreeCellRenderer obtieneRendererNodo() {	return new trNODO();    }    private static class trNODO extends DefaultTreeCellRenderer {	public Component getTreeCellRendererComponent(JTree paramJTree, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, boolean paramBoolean3, int paramInt, boolean paramBoolean4) {	    trNODO local_L = this;	    local_L.setBackground(paramBoolean1 ? Color.white : Color.cyan);	    DefaultMutableTreeNode localDefaultMutableTreeNode = (DefaultMutableTreeNode) paramObject;	    TipoJerarquico locale = (TipoJerarquico) localDefaultMutableTreeNode.getUserObject();	    local_L.setText(Recursos.getCadena(locale.getDesClave()));	    setBackgroundNonSelectionColor(UIManager.getColor("Tree.textBackground"));	    if (paramBoolean1) {		setForeground(Color.red);	    } else {		setForeground(Color.black);	    }	    if (paramBoolean3) {		setIcon(getLeafIcon());	    } else if (!paramBoolean2) {		setIcon(getClosedIcon());	    } else {		setIcon(getOpenIcon());	    }	    return local_L;	}    }    private static class trPREPOSICIONES extends JComboBox implements TableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    setFont(Configuracion.getFont());	    List<String> localList = (List<String>) paramObject;	    DefaultComboBoxModel<String> localDefaultComboBoxModel = (DefaultComboBoxModel) getModel();	    localDefaultComboBoxModel.removeAllElements();	    for (int i = 0; i < localList.size(); i++) {		String str = (String) localList.get(i);		localDefaultComboBoxModel.addElement(OpPalabras.strCompletoAUnicode(str));	    }	    return this;	}	public void validate() {	}	public void revalidate() {	}	protected void firePropertyChange(String paramString, Object paramObject1, Object paramObject2) {	}	public void firePropertyChange(String paramString, boolean paramBoolean1, boolean paramBoolean2) {	}    }    private static class trDECLINACION extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    trDECLINACION local_G = this;	    local_G.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable.getBackground());	    int i = Integer.parseInt((String) paramObject);	    switch (i) {	    case 1:		local_G.setText("1ra");		break;	    case 2:		local_G.setText("2da");		break;	    case 3:		local_G.setText("3ra");	    }	    return local_G;	}    }    private static class trVERBO_FACIL extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    trVERBO_FACIL local_H = this;	    local_H.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable.getBackground());	    String str = (String) paramObject;	    local_H.setText(str);	    return local_H;	}    }    private static class trTIPO extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    trTIPO local_D = this;	    local_D.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable.getBackground());	    Integer localInteger = (Integer) paramObject;	    local_D.setText(Integer.toString(localInteger.intValue()));	    return local_D;	}    }    private static class trCONTA_VERVERBO extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    trCONTA_VERVERBO local_I = this;	    local_I.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable.getBackground());	    Integer localInteger = (Integer) paramObject;	    local_I.setText(Integer.toString(localInteger.intValue()));	    return local_I;	}    }        private static class trBOOLEAN_SINO extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    trBOOLEAN_SINO local_C = this;	    local_C.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable.getBackground());	    Boolean localBoolean = (Boolean) paramObject;	    if (localBoolean.booleanValue() == true) {		local_C.setText(Recursos.getCadena("si"));	    } else {		local_C.setText(Recursos.getCadena("no"));	    }	    return local_C;	}    }    private static class trTEXTO_LATINO extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    trTEXTO_LATINO local_E = this;	    local_E.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable.getBackground());	    if (paramObject == null) {		local_E.setText("");	    } else if ((paramObject instanceof String)) {		String str = (String) paramObject;		local_E.setText(str);	    } else {		throw new RuntimeException("el valor " + paramObject + " para la columna " + paramInt2			+ " no es una String sino " + paramObject.getClass().getName());	    }	    return local_E;	}    }    private static class trENUMERACION extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    trENUMERACION local_F = this;	    local_F.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable.getBackground());	    if (paramObject == null) {		local_F.setText(Recursos.getCadena("nulo"));	    } else {		String str = CadenasEnum.getCadena((Enum) paramObject);		local_F.setText(str);	    }	    local_F.setHorizontalAlignment(2);	    return local_F;	}    }    public static class _A extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    _A local_A = this;	    local_A.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable.getBackground());	    local_A.setFont(Configuracion.getFont());	    String str = (String) paramObject;	    str = OpPalabras.strCompletoABeta(str);	    local_A.setText(str);	    return local_A;	}    }    public static class trTEXTO_GRIEGO_SIN_MAKRONES extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    try {		trTEXTO_GRIEGO_SIN_MAKRONES local_K = this;		local_K.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable			.getBackground());		local_K.setFont(Configuracion.getFont());		String localObject = (String) paramObject;		local_K.setText(OpPalabras.strCompletoAUnicodeSinMakrones((String) localObject));		return local_K;	    } catch (ClassCastException localClassCastException) {		Object localObject = new StringBuffer("problema en FRGenericos.trTEXTO_GRIEGO_SIN_MAKRONES ");		((StringBuffer) localObject).append(" al tratar de representar la columna número " + paramInt2 + "\n");		((StringBuffer) localObject).append(" se esperaba una columna de texto pero obtuve " + paramObject			+ " en su lugar \n");		throw new RuntimeException(((StringBuffer) localObject).toString());	    }	}    }    public static class trTEXTO_GRIEGO extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    try {		trTEXTO_GRIEGO local_M = this;		local_M.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable			.getBackground());		local_M.setFont(Configuracion.getFont());		String localObject = (String) paramObject;		local_M.setText(OpPalabras.strCompletoAUnicode((String) localObject));		return local_M;	    } catch (ClassCastException localClassCastException) {		Object localObject = new StringBuffer("problema en FRGenericos.trTEXTO_GRIEGO ");		((StringBuffer) localObject).append(" al tratar de representar la columna número " + paramInt2 + "\n");		((StringBuffer) localObject).append(" se esperaba una columna de texto pero obtuve " + paramObject			+ " en su lugar \n");		throw new RuntimeException(((StringBuffer) localObject).toString());	    }	}    }    private static class trENTERO_NULABLE extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    trENTERO_NULABLE local_J = this;	    local_J.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable.getBackground());	    Integer localInteger = (Integer) paramObject;	    if (localInteger == null) {		local_J.setText(Recursos.getCadena("nulo"));	    } else {		local_J.setText(Integer.toString(localInteger.intValue()));		local_J.setHorizontalAlignment(4);	    }	    return local_J;	}    }    private static class trSTRING_NUMERICA extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    trSTRING_NUMERICA local_O = this;	    try {		local_O.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable			.getBackground());		String str = (String) paramObject;		local_O.setHorizontalAlignment(4);		local_O.setText(str);	    } catch (Exception localException) {		System.out.println("el valor es " + paramObject);		localException.printStackTrace();	    }	    return local_O;	}    }    private static class trNUMERO_ENTERO extends DefaultTableCellRenderer {	public Component getTableCellRendererComponent(JTable paramJTable, Object paramObject, boolean paramBoolean1,		boolean paramBoolean2, int paramInt1, int paramInt2) {	    trNUMERO_ENTERO local_N = this;	    local_N.setBackground(paramBoolean1 ? paramJTable.getSelectionBackground() : paramJTable.getBackground());	    Integer localInteger = (Integer) paramObject;	    local_N.setText(Integer.toString(localInteger.intValue()));	    local_N.setHorizontalAlignment(4);	    return local_N;	}    }}