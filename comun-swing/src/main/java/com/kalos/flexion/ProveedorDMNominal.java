package com.kalos.flexion;import java.util.EnumMap;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Map;import java.util.Set;import javax.swing.table.DefaultTableModel;import com.kalos.beans.VerboBean;import com.kalos.datos.gerentes.GerenteVerbos;import com.kalos.enumeraciones.Aspecto;import com.kalos.enumeraciones.Caso;import com.kalos.enumeraciones.FuerteDebil;import com.kalos.enumeraciones.Genero;import com.kalos.enumeraciones.GradoComparacion;import com.kalos.enumeraciones.Numero;import com.kalos.enumeraciones.Particularidad;import com.kalos.enumeraciones.Voz;import com.kalos.flexion.declinacion.Declina;import com.kalos.flexion.declinacion.DeclinaAdjetivos;import com.kalos.flexion.declinacion.OcAdjetivo;import com.kalos.flexion.declinacion.OcNominal;import com.kalos.flexion.declinacion.OcParticipio;import com.kalos.flexion.declinacion.Participios;import com.kalos.recursos.CadenasEnum;public class ProveedorDMNominal {    private Participios participios;    private GerenteVerbos gerenteVerbos;    private Declina declina;    private DeclinaAdjetivos declinaAdjetivos;    private UtilidadesTM utilidadesTM;    DefaultTableModel A(Particularidad paramX, OcNominal paramD, boolean paramBoolean) {        DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTIC", "SUBINDICE", "CASO",                "NUMERO", "FORMA" }, 0);        Numero localn1 = Numero.Dual;        if (paramBoolean) {            localn1 = Numero.Plural;        }        for (int i = 1; i <= Numero.getInt(localn1); i++) {            Numero localn2 = Numero.getEnum(i);            for (int j = 1; j <= 5; j++) {                Caso locala = Caso.getEnum(j);                List<String> localList = paramD.getFormas(locala, localn2);                if (localList != null) {                    int k = 0;                    ListIterator<String> localListIterator = localList.listIterator();                    while (localListIterator.hasNext()) {                        String str = (String) localListIterator.next();                        int m = k;                        this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel, new Object[] { paramX, Integer.valueOf(m),                                locala, localn2,                                new ClaveFlexion("", str, null, null, null, null, null, paramX, m, null, localn2, locala, null) });                        k++;                    }                }            }        }        return localDefaultTableModel;    }    DefaultTableModel tmSustantivosPorNumero(String paramString, boolean paramBoolean) {        Numero localn1 = Numero.Dual;        if (paramBoolean) {            localn1 = Numero.Plural;        }        EnumMap<Particularidad, OcNominal> localEnumMap = this.declina.declina(paramString);        DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTIC", "SUBINDICE", "CASO",                "NUMERO", "FORMA" }, 0);        Set<Particularidad> localSet = localEnumMap.keySet();        Iterator<Particularidad> localIterator = localSet.iterator();        while (localIterator.hasNext()) {            Particularidad localX = localIterator.next();            OcNominal localD = (OcNominal) localEnumMap.get(localX);            for (int i = 1; i <= Numero.getInt(localn1); i++) {                Numero localn2 = Numero.getEnum(i);                for (int j = 1; j <= 5; j++) {                    Caso locala = Caso.getEnum(j);                    List<String> localList = localD.getFormas(locala, localn2);                    if (localList != null) {                        int k = 0;                        ListIterator<String> localListIterator = localList.listIterator();                        while (localListIterator.hasNext()) {                            String str = (String) localListIterator.next();                            int m = k;                            this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel, new Object[] {                                    localX,                                    Integer.valueOf(m),                                    locala,                                    localn2,                                    new ClaveFlexion(paramString, str, null, null, null, null, null, localX, m, null, localn2,                                            locala, null) });                            k++;                        }                    }                }            }        }        return localDefaultTableModel;    }    DefaultTableModel tmAdjetivosPorNumero(String paramString, boolean sinDual) {        Numero localn1 = Numero.Dual;        if (sinDual) {            localn1 = Numero.Plural;        }        EnumMap<Particularidad, OcAdjetivo> localEnumMap = this.declinaAdjetivos.declina(paramString);        DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTIC", "SUBINDICE", "GRADO",                "GENERO", "CASO", "NUMERO", "FORMA" }, 0);        Set<Particularidad> localSet = localEnumMap.keySet();        Iterator<Particularidad> localIterator = localSet.iterator();        while (localIterator.hasNext()) {            Particularidad localX = localIterator.next();            OcAdjetivo localB = localEnumMap.get(localX);            for (GradoComparacion locali : GradoComparacion.values()) {                for (int k = 1; k <= Numero.getInt(localn1); k++) {                    Numero localn2 = Numero.getEnum(k);                    for (Caso locala : Caso.values()) {                        for (Genero localA : Genero.values()) {                            List<String> localList = localB.getForm(locali, localA, locala, localn2);                            if (localList != null) {                                int i3 = 0;                                ListIterator<String> localListIterator = localList.listIterator();                                while (localListIterator.hasNext()) {                                    String str = (String) localListIterator.next();                                    int i4 = i3;                                    this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel,                                            new Object[] {                                                    localX,                                                    Integer.valueOf(i4),                                                    locali,                                                    localA,                                                    locala,                                                    localn2,                                                    new ClaveFlexion(paramString, str, null, null, null, null, null, localX, i4,                                                            localA, localn2, locala, locali) });                                    i3++;                                }                            }                        }                    }                }            }        }        return localDefaultTableModel;    }    DefaultTableModel tmParticipiosCompacto(String verboId) {        DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTIC", "ASPECTO", "FUERTE",                "VOZ", "GENERO", "SUBPART", "CASO", "FORMA", "TIPO" }, 0);        Map<Particularidad, OcParticipio> localMap = this.participios.flexiona(verboId);        Iterator<Particularidad> localIterator = localMap.keySet().iterator();        while (localIterator.hasNext()) {            Particularidad partic = localIterator.next();            OcParticipio ocPart = localMap.get(partic);            for (Voz voz : Voz.values()) {                for (Aspecto aspecto : Aspecto.values()) {                    for (FuerteDebil fuerte : FuerteDebil.values()) {                        for (Genero genero : Genero.getMFN()) {                            int cantFormasNominativo = ocPart.cantidadDeFormas(voz, aspecto, fuerte, genero, Caso.Nominativo, Numero.Singular);                            int cantFormasGenitivo = ocPart.cantidadDeFormas(voz, aspecto, fuerte, genero, Caso.Genitivo, Numero.Singular);                            int maxFormas = Math.max(cantFormasNominativo, cantFormasGenitivo);                            for (int i = 0; i < maxFormas; i++) {                                String formaNominativo = ocPart.getFormaIndividual(voz, aspecto, fuerte, genero, Caso.Nominativo, Numero.Singular, i);                                String formaGenitivo = ocPart.getFormaIndividual(voz, aspecto, fuerte, genero, Caso.Genitivo, Numero.Singular, i);                                Integer tipoSustantivo = ocPart.getTipoSustantivo(voz, aspecto, fuerte, genero, Numero.Singular, i);                                this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel, new Object[] {                                        partic,                                        aspecto,                                        fuerte,                                        voz,                                        genero,                                        i,                                        Caso.Nominativo,                                        new ClaveFlexion(verboId, formaNominativo, voz, null, aspecto, fuerte, null, partic, i,                                                genero, Numero.Singular, Caso.Nominativo, null), tipoSustantivo });                                this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel, new Object[] {                                        partic,                                        aspecto,                                        fuerte,                                        voz,                                        genero,                                        i,                                        Caso.Genitivo,                                        new ClaveFlexion(verboId, formaGenitivo, voz, null, aspecto, fuerte, null, partic, i,                                                genero, Numero.Singular, Caso.Genitivo, null), tipoSustantivo });                            }                        }                    }                }            }        }        return localDefaultTableModel;    }    DefaultTableModel tmParticipioCompletoVozPrimero(String paramString, boolean conVocativo, boolean sinDual) {        DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTIC", "ASPECTO", "FUERTE",                "VOZ", "GENERO", "NUMERO", "CASO", "SUBPART", "FORMA" }, 0);        Map<Particularidad, OcParticipio> localMap = this.participios.flexiona(paramString);        Numero ultimoNumero = Numero.Dual;        if (sinDual) {            ultimoNumero = Numero.Plural;        }        Iterator<Particularidad> localIterator = localMap.keySet().iterator();        while (localIterator.hasNext()) {            Particularidad partic = localIterator.next();            OcParticipio ocParticipio = localMap.get(partic);            for (Voz voz : Voz.values()) {                for (Aspecto aspecto : Aspecto.values()) {                    for (FuerteDebil fuerte : FuerteDebil.values()) {                        for (Genero genero : Genero.getMFN()) {                            for (int i = 1; i <= Numero.getInt(ultimoNumero); i++) {                                Numero numero = Numero.getEnum(i);                                for (Caso caso : Caso.values()) {                                    if (caso!= Caso.Vocativo || (caso== Caso.Vocativo && conVocativo)) {                                        int cantFormas = ocParticipio.cantidadDeFormas(voz, aspecto, fuerte, genero, caso, numero);                                        for (int e = 0; e < cantFormas; e++) {                                            String forma = ocParticipio.getFormaIndividual(voz, aspecto, fuerte, genero, caso, numero, e);                                            this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel,                                                    new Object[] {                                                            partic,                                                            aspecto,                                                            fuerte,                                                            voz,                                                            genero,                                                            numero,                                                            caso,                                                            Integer.valueOf(e),                                                            new ClaveFlexion(paramString, forma, voz, null, aspecto, fuerte, null,                                                                    partic, e, genero, numero, caso, null) });                                        }                                    }                                }                            }                        }                    }                }            }        }        return localDefaultTableModel;    }//    DefaultTableModel getModeloParticipiosBasico(String verboId) {//        VerboBean verboBean = this.gerenteVerbos.seleccionaUno(verboId);//        int i;//        if (verboBean.isDibujado()) {//            i = -1;//        } else {//            i = verboBean.getTipoVerbo();//        }//        DefaultTableModel localDefaultTableModel = getModeloParticipiosBasico(verboId,  i, false);//        return localDefaultTableModel;//    }    DefaultTableModel A(OcNominal paramD) {        DefaultTableModel tm = new DefaultTableModel(new String[] { "CASO", "SINGULAR", "PLURAL", "DUAL" }, 0);        for (int i = 1; i <= 5; i++) {            Caso locala = Caso.getEnum(i);            int j = paramD.cantidadDeFormasDelCaso(locala);            for (int k = 0; k < j; k++) {                tm.addRow(new Object[] { CadenasEnum.getCadena(locala),                        paramD.getFormaIndividual(locala, Numero.Singular, k), paramD.getFormaIndividual(locala, Numero.Plural, k),                        paramD.getFormaIndividual(locala, Numero.Dual, k) });            }        }        return tm;    }    DefaultTableModel A(Map<Particularidad, OcAdjetivo> paramMap) {        DefaultTableModel tm = new DefaultTableModel(new String[] { "PARTICULARIDAD",                "GRADO_COMPARACION", "SUBINDICE", "NUMERO", "CASO", "GENERO", "FORMA" }, 0);        Set<Particularidad> localSet1 = paramMap.keySet();        Iterator<Particularidad> localIterator1 = localSet1.iterator();        while (localIterator1.hasNext()) {            Particularidad localX = localIterator1.next();            OcAdjetivo localB = paramMap.get(localX);            Set<GradoComparacion> localSet2 = localB.getGrados();            Iterator<GradoComparacion> localIterator2 = localSet2.iterator();            while (localIterator2.hasNext()) {                GradoComparacion locali = localIterator2.next();                Set<Genero> localSet3 = localB.getGeneros(locali);                Iterator<Genero> localIterator3 = localSet3.iterator();                while (localIterator3.hasNext()) {                    Genero localA = localIterator3.next();                    OcNominal localD = localB.getOcurrenciaNominal(locali, localA);                    for (int i = 1; i <= 3; i++) {                        Numero localn = Numero.getEnum(i);                        for (int j = 1; j <= 5; j++) {                            Caso locala = Caso.getEnum(j);                            int k = localD.cantidadDeFormas(locala, localn);                            for (int m = 0; m < k; m++) {                                tm.addRow(new Object[] { localX, locali, Integer.valueOf(m),                                        localn, locala, localA, localD.getFormaIndividual(locala, localn, m) });                            }                        }                    }                }            }        }        return tm;    }    public Participios getParticipios() {        return this.participios;    }    public void setParticipios(Participios paramI) {        this.participios = paramI;    }    public GerenteVerbos getGerenteVerbos() {        return this.gerenteVerbos;    }    public void setGerenteVerbos(GerenteVerbos paramP) {        this.gerenteVerbos = paramP;    }    public Declina getDeclina() {        return this.declina;    }    public void setDeclina(Declina paramE) {        this.declina = paramE;    }    public void setUtilidadesTM(UtilidadesTM paramC) {        this.utilidadesTM = paramC;    }    public void setDeclinaAdjetivos(DeclinaAdjetivos paramA) {        this.declinaAdjetivos = paramA;    }}