// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package com.kalos.flexion;import javax.swing.table.DefaultTableModel;import com.kalos.enumeraciones.Caso;import com.kalos.enumeraciones.Genero;import com.kalos.enumeraciones.Modo;import com.kalos.enumeraciones.Numero;import com.kalos.enumeraciones.Reportes;import com.kalos.enumeraciones.TipoPalabra;import com.kalos.enumeraciones.Voz;import com.kalos.recursos.Recursos;import org.apache.log4j.Logger;// Referenced classes of package kalos.H://            M, L, C, H, //            I, E, Dpublic class CreadorTableModelsBasicos {    public CreadorTableModelsBasicos() {        logger = Logger.getLogger(getClass().getName());    }    public DefaultTableModel getTMReporte(String s, Reportes m) {        switch (m) {            case VERBOS_POR_MODO:                return getVerbosCompleto(s, false);            case VERBOS_POR_MODO_SIN_DUAL:                return getVerbosCompleto(s, true);            case VERBOS_POR_VOZ:                return getVerbosCompletoVozPrimero(s, false);            case VERBOS_POR_VOZ_SIN_DUAL:                return getVerbosCompletoVozPrimero(s, true);            case VERBOS_POR_MODO_ABREVIADO:                return getVerbosCompacto(s);            case PARTICIPIOS_POR_NUMERO:                return getParticipiosCompleto(s, false);            case PARTICIPIOS_POR_VOZ:                return getParticipiosCompletoVozPrimero(s, false, false);            case PARTICIPIOS_POR_NUMERO_SIN_DUAL:                return getParticipiosCompletoSinDuales(s, false);            case PARTICIPIOS_POR_VOZ_SIN_DUAL:                return getParticipiosCompletoVozPrimero(s, false, true);            case PARTICIPIOS_POR_NUMERO_SIN_VOCATIVO:                return getParticipiosCompleto(s, true);            case PARTICIPIOS_POR_VOZ_SIN_VOCATIVO:                return getParticipiosCompletoVozPrimero(s, true, false);            case PARTICIPIOS_POR_CASO_ABREVIADO:                return getParticipiosCompacto(s);            case PARTICIPIOS_POR_VOZ_ABREVIADO:                return getParticipiosCompactoVozPrimero(s);            case INFINITIVOS_POR_VOZ:                return getInfinitivos(s);            case SUSTANTIVOS_POR_NUMERO_SIN_DUAL:                return getSustantivosPorNumero(s, true);            case SUSTANTIVOS_POR_NUMERO:                return getSustantivosPorNumero(s, false);            case ARTICULOS_POR_GENERO:                return getParticulasPorTipo(TipoPalabra.Articulo);            case PRONOMBRES_PERSONALES_POR_CASO_SIN_DUAL:                return getPronombresPersonalesPorCaso(true);            case PRONOMBRES_RELATIVOS_POR_GENERO_1:                return getPronombresRelativos("2213895001115bd9d355912800022138");            case PRONOMBRES_RELATIVOS_POR_GENERO_2:                return getPronombresRelativos("b695e4e1115bd9dcf76128000b695e4e");            case PRONOMBRES_RELATIVOS_POR_GENERO_3:                return getPronombresRelativos("5b62bf91111a838b550d1280005b62bf");            case PRONOMBRES_INTERROGATIVOS_POR_GENERO:                return getPronombresInterrogativos("154a3f921115ece6a2ac128000154a3f");            case PRONOMBRES_REFLEXIVOS_POR_GENERO:                return getPronombresReflexivos("256406591115d5461a4a128000256406");            case PRONOMBRES_PERSONALES_POR_CASO:                return getPronombresPersonalesPorCaso(false);            case CONJUNCIONES_POR_TIPO:                return getConjuncionesPorTipo();            case CONJUNCIONES_ALFABETICO:                return getConjuncionesAlfabeticamente();            case PREPOSICIONES_ALFABETICO:                return getPreposicionesAlfabeticamente();            case PREPOSICIONES_POR_CASO:                return getPreposicionesPorCaso();            case INTERJECCIONES_ALFABETICO:                return getInterjeccionesAlfabeticamente();            case PRONOMBRES_INDEFINIDOS_POR_GENERO:                return getPronombresRelativos("32ad7868111a781de0a112800032ad78");            default:                throw new RuntimeException(                        "tipo de tableModel desconocido requerido en CreadorTableModelsGrilla.getTMReporte: " + m);        }    }    public DefaultTableModel getParticulasPorTipo(TipoPalabra l1) {        DefaultTableModel defaulttablemodel = E.getTMModeloParticulas(l1);        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "GENERO",                "SUBINDICE" }, new boolean[] { true, true, true, true, true });        utilidadesTM.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },                new String[] { "PARTICULARIDAD", "CASO", "SUBINDICE" }, "GENERO", new Object[] { Genero.Masculino,                        Genero.Femenino, Genero.Neutro }, "FORMA", new String[] { "MASCULINO", "FEMENINO", "NEUTRO" });        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },                new boolean[] { true, true, true, true });        utilidadesTM.borraColumna(defaulttablemodel, "SUBINDICE");        return defaulttablemodel;    }    public DefaultTableModel getPronombresPersonalesPorCaso(boolean flag) {        DefaultTableModel defaulttablemodel = E.getTMPronombresPersonales(flag);        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "CASO", "SUBINDICE" },                new boolean[] { true, true, true, true });        utilidadesTM.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "SUBINDICE" }, new String[] {                "PARTICULARIDAD", "PERSONA", "SUBINDICE" }, "CASO", new Object[] { Caso.Nominativo, Caso.Acusativo,                Caso.Genitivo, Caso.Dativo }, "FORMA", new String[] { "NOMINATIVO", "ACUSATIVO", "GENITIVO", "DATIVO" });        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "SUBINDICE" },                new boolean[] { true, true, true });        utilidadesTM.borraColumna(defaulttablemodel, "SUBINDICE");        return defaulttablemodel;    }    public DefaultTableModel getPronombresRelativos(String s) {        DefaultTableModel defaulttablemodel = E.getTMPronombresRelativos(s);        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "GENERO",                "SUBINDICE" }, new boolean[] { true, true, true, true, true });        utilidadesTM.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },                new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" }, "GENERO", new Object[] {                        Genero.Masculino, Genero.Femenino, Genero.Neutro }, "FORMA", new String[] { "MASCULINO",                        "FEMENINO", "NEUTRO" });        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },                new boolean[] { true, true, true, true });        utilidadesTM.borraColumna(defaulttablemodel, "SUBINDICE");        return defaulttablemodel;    }    public DefaultTableModel getPronombresIndefinidos(String s) {        DefaultTableModel defaulttablemodel = E.getTMPronombresRelativos(s);        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "GENERO",                "SUBINDICE" }, new boolean[] { true, true, true, true, true });        utilidadesTM.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },                new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" }, "GENERO", new Object[] {                        Genero.MasculinoOFemenino, Genero.Neutro }, "FORMA", new String[] { "MASC_FEM", "NEUTRO" });        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },                new boolean[] { true, true, true, true });        utilidadesTM.borraColumna(defaulttablemodel, "SUBINDICE");        return defaulttablemodel;    }    public DefaultTableModel getPronombresInterrogativos(String s) {        DefaultTableModel defaulttablemodel = E.getTMPronombresInterrogativos(s);        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "GENERO",                "SUBINDICE" }, new boolean[] { true, true, true, true, true });        utilidadesTM.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },                new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" }, "GENERO", new Object[] {                        Genero.MasculinoOFemenino, Genero.Neutro }, "FORMA", new String[] { "MASC_FEM", "NEUTRO" });        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },                new boolean[] { true, true, true, true });        utilidadesTM.borraColumna(defaulttablemodel, "SUBINDICE");        return defaulttablemodel;    }    public DefaultTableModel getPronombresReflexivos(String s) {        DefaultTableModel defaulttablemodel = E.getTMPronombresReflexivos(s);        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "CASO", "GENERO",                "SUBINDICE" }, new boolean[] { true, true, true, true, true });        utilidadesTM.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "CASO", "SUBINDICE" },                new String[] { "PARTICULARIDAD", "PERSONA", "CASO", "SUBINDICE" }, "GENERO", new Object[] {                        Genero.Masculino, Genero.Femenino, Genero.Neutro }, "FORMA", new String[] { "MASCULINO",                        "FEMENINO", "NEUTRO" });        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "CASO", "SUBINDICE" },                new boolean[] { true, true, true, true });        utilidadesTM.borraColumna(defaulttablemodel, "SUBINDICE");        return defaulttablemodel;    }    public DefaultTableModel getConjuncionesPorTipo() {        DefaultTableModel defaulttablemodel = D.getTMModeloConjunciones();        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "TIPO", "SUBTIPO", "CODIGO", "FORMA",                "SIGNIFICADO" }, new boolean[] { true, true, true, true, true, true });        utilidadesTM.borraColumna(defaulttablemodel, "CODIGO");        return defaulttablemodel;    }    public DefaultTableModel getConjuncionesAlfabeticamente() {        DefaultTableModel defaulttablemodel = D.getTMModeloConjunciones();        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "CODIGO" }, new boolean[] { true });        utilidadesTM.borraColumna(defaulttablemodel, "CODIGO");        return defaulttablemodel;    }    public DefaultTableModel getPreposicionesAlfabeticamente() {        DefaultTableModel defaulttablemodel = A.getTMModeloPreposiciones();        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "ORDEN" }, new boolean[] { true });        utilidadesTM.borraColumna(defaulttablemodel, "ORDEN");        return defaulttablemodel;    }    public DefaultTableModel getPreposicionesPorCaso() {        DefaultTableModel defaulttablemodel = A.getTMModeloPreposiciones();        utilidadesTM.ordenaSegunColumnas(defaulttablemodel, new String[] { "CASOS", "ORDEN" }, new boolean[] { true, true });        utilidadesTM.borraColumna(defaulttablemodel, "ORDEN");        return defaulttablemodel;    }    public DefaultTableModel getInterjeccionesAlfabeticamente() {        DefaultTableModel defaulttablemodel = F.getTMModeloInterjecciones();        return defaulttablemodel;    }    public DefaultTableModel getVerbosCompleto(String s, boolean sinDual) {        DefaultTableModel tm = provDMVerbal.modeloVerbosPorModos(s, sinDual);        if (tm.getRowCount() == 0) {            return null;        } else {            //            utilidadesTM.horizontaliza(tm,            //                    new String[] { "PARTIC", "VOZ", "TIEMPO", "FUERTE", "PERSONA", "SUBPART" }, new String[] {            //                            "PARTIC", "VOZ", "TIEMPO", "FUERTE", "PERSONA", "SUBPART" }, "MODO", new Object[] {            //                            Modo.Indicativo, Modo.Subjuntivo, Modo.Optativo, Modo.Imperativo }, "FORMA", new String[] {            //                            "INDICATIVO", "SUBJUNTIVO", "OPTATIVO", "IMPERATIVO" });            utilidadesTM.borraColumna(tm, "ORDEN_PARTIC");            utilidadesTM.borraColumna(tm, "SUBPART");            utilidadesTM.fusionaTiempos(tm);            return tm;        }    }    public DefaultTableModel getVerbosCompletoVozPrimero(String verboId, boolean sinDual) {        DefaultTableModel tm = provDMVerbal.modeloVerbosBasico(verboId, sinDual);        if (tm.getRowCount() == 0) {            return null;        } else {            utilidadesTM.horizontaliza(tm, new String[] { "PARTIC", "MODO", "TIEMPO", "FUERTE", "PERSONA",                    "SUBPART" }, new String[] { "PARTIC", "MODO", "TIEMPO", "FUERTE", "PERSONA", "SUBPART" }, "VOZ",                    new Object[] { Voz.Activa, Voz.Media, Voz.Pasiva }, "FORMA", new String[] { "ACTIVA", "MEDIA",                            "PASIVA" });            utilidadesTM.fusionaTiempos(tm);            utilidadesTM.borraColumna(tm, "ORDEN_PARTIC");            utilidadesTM.borraColumna(tm, "SUBPART");            return tm;        }    }    public DefaultTableModel getInfinitivos(String paramString) {        DefaultTableModel tm = this.provDMVerbal.tmInfinitivos(paramString);        if (tm.getRowCount() == 0) {            return null;        }        this.utilidadesTM.horizontaliza(tm, new String[] { "PARTIC", "SUBPART", "ASPECTO", "FUERTE" },                new String[] { "PARTIC", "ASPECTO", "FUERTE", "SUBPART" }, "VOZ", new Object[] { Voz.Activa, Voz.Media,                        Voz.Pasiva }, "FORMA", new String[] { "ACTIVA", "MEDIA", "PASIVA" });        String[] titulos = Recursos.getArray(new String[] { "futuro", "confectivo", "perfectivo" });        String[] titulosSegundos = Recursos.getArray(new String[] { "futuro", "confectivo", "perfectivo" });        for (int i = 0; i < titulosSegundos.length; i++) {            titulosSegundos[i] = (titulosSegundos[i] + " II");        }        this.utilidadesTM.fusionaColumnas(tm, 2, 3, titulos,                new Object[] { Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1) }, titulosSegundos);        this.utilidadesTM.borraColumna(tm, "FUERTE");        return tm;    }    public DefaultTableModel getSustantivosPorNumero(String sustantivoId, boolean conDual) {        DefaultTableModel tm = proveedorDMNominal.tmSustantivosPorNumero(sustantivoId, !conDual);        if (tm.getRowCount() == 0)            return null;        String arrEncabezados[];        Numero arrNumeros[];        if (conDual) {            arrEncabezados = (new String[] { "SINGULAR", "PLURAL", "DUAL" });            arrNumeros = (new Numero[] { Numero.Singular, Numero.Plural, Numero.Dual });        } else {            arrEncabezados = (new String[] { "SINGULAR", "PLURAL" });            arrNumeros = (new Numero[] { Numero.Singular, Numero.Plural });        }        utilidadesTM.horizontaliza(tm, new String[] { "PARTIC", "CASO", "SUBINDICE" }, new String[] { "PARTIC", "CASO", "SUBINDICE" }, "NUMERO", arrNumeros, "FORMA", arrEncabezados);        utilidadesTM.borraColumna(tm, "SUBINDICE");        return tm;    }    public DefaultTableModel getAdjetivosPorGenero(String adjetivoId) {        DefaultTableModel defaulttablemodel = proveedorDMNominal.tmAdjetivosPorNumero(adjetivoId, false);        if (defaulttablemodel.getRowCount() == 0) {            return null;        } else {            utilidadesTM.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "GRADO", "NUMERO", "CASO", "SUBINDICE" },                    new String[] { "PARTIC", "GRADO", "NUMERO", "CASO", "SUBINDICE" }, "GENERO", new Object[] {                            Genero.MasculinoOFemenino, Genero.Masculino, Genero.Femenino, Genero.Neutro }, "FORMA",                    new String[] { "MASC_FEM", "MASCULINO", "FEMENINO", "NEUTRO" });            utilidadesTM.borraColumna(defaulttablemodel, "SUBINDICE");            utilidadesTM.borraColumnaNula(defaulttablemodel, "MASC_FEM");            utilidadesTM.borraColumnaNula(defaulttablemodel, "MASCULINO");            utilidadesTM.borraColumnaNula(defaulttablemodel, "FEMENINO");            return defaulttablemodel;        }    }    public DefaultTableModel getAdjetivosPorNumero(String adjetivoId, boolean conDual) {        DefaultTableModel defaulttablemodel = proveedorDMNominal.tmAdjetivosPorNumero(adjetivoId, !conDual);        if (defaulttablemodel.getRowCount() == 0)            return null;        String as[];        Numero an[];        if (conDual) {            as = (new String[] { "SINGULAR", "PLURAL", "DUAL" });            an = (new Numero[] { Numero.Singular, Numero.Plural, Numero.Dual });        } else {            as = (new String[] { "SINGULAR", "PLURAL" });            an = (new Numero[] { Numero.Singular, Numero.Plural });        }        utilidadesTM.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "GRADO", "GENERO", "CASO", "SUBINDICE" },                new String[] { "PARTIC", "GRADO", "GENERO", "CASO", "SUBINDICE" }, "NUMERO", an, "FORMA", as);        utilidadesTM.borraColumna(defaulttablemodel, "SUBINDICE");        return defaulttablemodel;    }    public DefaultTableModel getVerbosCompacto(String s) {        DefaultTableModel tm = provDMVerbal.modeloVerbosPorModosCompacto(s);        if (tm.getRowCount() == 0) {            return null;        } else {            utilidadesTM.horizontaliza(tm, new String[] { "PARTIC", "SUBPART", "TIEMPO", "FUERTE", "PERSONA" },                    new String[] { "PARTIC", "TIEMPO", "FUERTE", "PERSONA", "SUBPART" }, "VOZ", new Object[] {                            Voz.Activa, Voz.Media, Voz.Pasiva }, "FORMA", new String[] { "ACTIVA", "MEDIA", "PASIVA" });            utilidadesTM.borraColumna(tm, "ORDEN_PARTIC");            utilidadesTM.borraColumna(tm, "SUBPART");            utilidadesTM.borraColumna(tm, "PERSONA");            utilidadesTM.borraColumna(tm, "MODO");            utilidadesTM.fusionaTiempos(tm);            return tm;        }    }    public DefaultTableModel getParticipiosCompacto(String verboId) {        DefaultTableModel tm = proveedorDMNominal.tmParticipiosCompacto(verboId);        if (tm.getRowCount() == 0) {            return null;        } else {            utilidadesTM.horizontaliza(tm, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO",                    "SUBPART", "TIPO" }, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO", "SUBPART", "TIPO" }, "CASO",                    new Enum[] { Caso.Nominativo, Caso.Genitivo }, "FORMA", new String[] { "NOMINATIVO", "GENITIVO" });            utilidadesTM.fusionaAspectos(tm);            utilidadesTM.borraColumna(tm, "SUBPART");            utilidadesTM.borraColumna(tm, "TIPO");            return tm;        }    }    public DefaultTableModel getParticipiosCompactoVozPrimero(String verboId) {        DefaultTableModel tm = proveedorDMNominal.tmParticipiosCompacto(verboId);        if (tm.getRowCount() == 0) {            return null;        } else {            utilidadesTM.ordenaSegunColumnas(tm, new String[] { "PARTIC", "ASPECTO", "FUERTE", "CASO", "GENERO",                    "SUBPART" }, new boolean[] { true, true, true, true, true, true });            utilidadesTM.borraColumna(tm, "TIPO");            utilidadesTM.horizontaliza(tm, new String[] { "PARTIC", "ASPECTO", "FUERTE", "CASO", "GENERO",                    "SUBPART" }, new String[] { "PARTIC", "ASPECTO", "FUERTE", "CASO", "GENERO", "SUBPART" }, "VOZ",                    new Voz[] { Voz.Activa, Voz.Media, Voz.Pasiva }, "FORMA", new String[] { "ACTIVA", "MEDIA", "PASIVA" });            utilidadesTM.fusionaAspectos(tm);            utilidadesTM.borraColumna(tm, "SUBPART");            return tm;        }    }    public DefaultTableModel getParticipiosCompleto(String verboId, boolean conVocativo) {        DefaultTableModel tm = proveedorDMNominal.tmParticipioCompletoVozPrimero(verboId, conVocativo, false);        if (tm.getRowCount() == 0)            return null;        utilidadesTM.horizontaliza(tm, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO", "CASO",                "SUBPART" }, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO", "CASO", "SUBPART" },                "NUMERO", new Object[] { Numero.Singular, Numero.Plural, Numero.Dual }, "FORMA", new String[] {                        "SINGULAR", "PLURAL", "DUAL" });        utilidadesTM.borraColumna(tm, "SUBPART");        utilidadesTM.fusionaAspectos(tm);        if (conVocativo)            utilidadesTM.cambiaValorColumna(tm, "CASO", Recursos.getCadena("nominativo"), Recursos.getCadena("nom_voc"));        return tm;    }    public DefaultTableModel getParticipiosCompletoSinDuales(String verboId, boolean conVocativo) {        DefaultTableModel tm = proveedorDMNominal.tmParticipioCompletoVozPrimero(verboId, conVocativo, true);        if (tm.getRowCount() == 0)            return null;        utilidadesTM.horizontaliza(tm, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO", "CASO",                "SUBPART" }, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO", "CASO", "SUBPART" },                "NUMERO", new Object[] { Numero.Singular, Numero.Plural }, "FORMA",                new String[] { "SINGULAR", "PLURAL" });        utilidadesTM.fusionaAspectos(tm);        utilidadesTM.borraColumna(tm, "SUBPART");        if (conVocativo)            utilidadesTM.cambiaValorColumna(tm, "CASO", Recursos.getCadena("nominativo"), Recursos.getCadena("nom_voc"));        return tm;    }    public DefaultTableModel getParticipiosCompletoVozPrimero(String verboId, boolean conVocativo, boolean sinDual) {        DefaultTableModel tm = proveedorDMNominal.tmParticipioCompletoVozPrimero(verboId, conVocativo, sinDual);        if (tm.getRowCount() == 0)            return null;        utilidadesTM.horizontaliza(tm, new String[] { "PARTIC", "ASPECTO", "FUERTE", "NUMERO", "GENERO", "CASO", "SUBPART" },                 new String[] { "PARTIC", "ASPECTO", "FUERTE", "NUMERO", "GENERO", "CASO", "SUBPART" },                "VOZ", new Object[] { Voz.Activa, Voz.Media, Voz.Pasiva }, "FORMA", new String[] { "ACTIVA", "MEDIA", "PASIVA" });        utilidadesTM.borraColumna(tm, "SUBPART");        utilidadesTM.fusionaAspectos(tm);        if (conVocativo)            utilidadesTM.cambiaValorColumna(tm, "CASO", Recursos.getCadena("nominativo"), Recursos.getCadena("nom_voc"));        return tm;    }    public void setProveedorDMNominal(ProveedorDMNominal m) {        proveedorDMNominal = m;    }    public ProveedorDMVerbal getProveedorDMVerbal() {        return provDMVerbal;    }    public void setProveedorDMVerbal(ProveedorDMVerbal d) {        provDMVerbal = d;    }    public void setUtilidadesTM(UtilidadesTM c) {        utilidadesTM = c;    }    public void setProveedorDMParticulas(ProveedorDMParticulas l1) {        E = l1;    }    public void setProveedorDMConjunciones(ProveedorDMConjunciones h) {        D = h;    }    public void setProveedorDMPreposiciones(ProveedorDMPreposiciones i) {        A = i;    }    public void setProveedorDMInterjecciones(ProveedorDMInterjecciones e) {        F = e;    }    Logger logger;    private UtilidadesTM utilidadesTM;    private ProveedorDMNominal proveedorDMNominal;    private ProveedorDMParticulas E;    private ProveedorDMVerbal provDMVerbal;    private ProveedorDMConjunciones D;    private ProveedorDMPreposiciones A;    private ProveedorDMInterjecciones F;}