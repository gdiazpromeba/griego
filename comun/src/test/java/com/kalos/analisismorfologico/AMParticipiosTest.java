package com.kalos.analisismorfologico;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import org.springframework.context.ApplicationContext;import com.kalos.analisismorfologico.negocio.AMNominal;import com.kalos.analisismorfologico.negocio.AMParticipios;import com.kalos.analisismorfologico.negocio.AMUtil;import com.kalos.analisismorfologico.negocio.AMVerbal;import com.kalos.analisismorfologico.negocio.ExtractorPrefijos;import com.kalos.beans.ResultadoUniversal;import com.kalos.beans.TestParticipiosBean;import com.kalos.datos.gerentes.GerenteTestParticipios;import com.kalos.datos.gerentes.GerenteVerbalizadorParticipios;import com.kalos.datos.gerentes.GerenteVerbos;import com.kalos.datos.gerentes.GerenteVerbosCompuestos;import com.kalos.enumeraciones.Aspecto;import com.kalos.enumeraciones.Caso;import com.kalos.enumeraciones.Genero;import com.kalos.enumeraciones.Numero;import com.kalos.enumeraciones.Voz;import com.kalos.flexion.declinacion.Participios;import com.kalos.operaciones.AACacheable;import com.kalos.operaciones.OpBeans;import com.kalos.operaciones.OpPalabras;public class AMParticipiosTest extends BaseAMTest {    private AMParticipios amParticipios;    private GerenteTestParticipios e;    private static long f = 0L;    public void testTabla() {        try {            List<TestParticipiosBean> localList = this.e.seleccionaTodos();            String str = "";            AACacheable localB = null;            Iterator<TestParticipiosBean> localIterator = localList.iterator();            while (localIterator.hasNext()) {                TestParticipiosBean locala = localIterator.next();                if (!str.equals(locala.getIdVerbo())) {                    localB = new AACacheable();                }                boolean bool = testGenerico(locala.getFormaDeclinada(),                        locala.getIdVerbo(), locala.getVoz(),                        locala.getAspecto(), locala.getNumero(),                        locala.getGenero(), locala.getCaso(), localB);                if (!bool) {                    System.out.println("fall√≥ para la forma "                            + locala.getFormaDeclinada());                }                assertTrue(bool);            }        } catch (Exception localException) {            localException.printStackTrace();        }    }    public boolean testGenerico(String paramString1, String paramString2, Voz voz, Aspecto aspecto, Numero numero, Genero genero, Caso caso, AACacheable paramB) {        System.out.print("analizando ... " + paramString1);        String[] arrayOfString = { OpPalabras.strBetaACompleto(paramString1) };        Set<ResultadoUniversal> localHashSet = new HashSet<ResultadoUniversal>();        long l = this.amParticipios.buscaCanonica(arrayOfString, localHashSet,                paramB, false, false);        f += l;        System.out.println("  tardanza=" + l + " tiempo acumulado=" + f);        boolean bool = false;        StringBuffer sb = new StringBuffer();        sb.append("Los acidentes propuestos por la tabla de test son: \n");        sb.append("  idVerbo=" + paramString2);        sb.append("  voz=" + (voz!=null?voz.name():null) );        sb.append("  aspecto=" + (aspecto!=null?aspecto.name():null));        sb.append("  genero=" + (genero!=null?genero.name():null));        sb.append("  numero=" + (numero!=null?numero.name():null));        sb.append("  caso=" + (caso!=null?caso.name():null));        sb.append("\n y no coinciden con ninguno de los siguientes registros encontrados en AM: \n");        Iterator<ResultadoUniversal> localIterator = localHashSet.iterator();        while (localIterator.hasNext()) {            ResultadoUniversal reu = localIterator.next();            try {                if ((reu.getId().equals(paramString2))                        && (reu.getVoz().equals(voz))                        && (reu.getAspecto().equals(aspecto))                        && (genero.equals(reu.getGenero()))                        && (reu.getNumero().equals(numero))                        && (reu.getCaso().equals(caso))) {                    bool = true;                    break;                }                sb.append(OpBeans.debugBean(reu, new String[] { "formaAccidentada", "formaCanonica" }) + "\n");            } catch (Exception localException) {                localException.printStackTrace();                bool = false;                break;            }        }        if (!bool) {            System.out.println(sb.toString());        }        return bool;    }    protected void setUp() throws Exception {        ApplicationContext localApplicationContext = creaContexto();        this.amParticipios = (AMParticipios) localApplicationContext.getBean("amParticipios");//        this.amParticipios.setParticipios((Participios) localApplicationContext.getBean("participios"));//        this.amParticipios.setAmUtil((AMUtil) localApplicationContext.getBean("amUtil"));//        this.amParticipios.setAmNominal((AMNominal) localApplicationContext.getBean("amNominal"));//        this.amParticipios.setAmVerbal((AMVerbal) localApplicationContext.getBean("amVerbal"));//        this.amParticipios.setExtractorPrefijos((ExtractorPrefijos) localApplicationContext.getBean("extractorPrefijos"));//        this.amParticipios.setGerenteVerbos((GerenteVerbos) localApplicationContext.getBean("gerenteVerbos"));//        this.amParticipios.setGerenteVerbosCompuestos((GerenteVerbosCompuestos) localApplicationContext.getBean("gerenteVerbosCompuestos"));//        this.amParticipios.setGerenteVerbalizadorParticipios((GerenteVerbalizadorParticipios) localApplicationContext.getBean("gerenteVerbalizadorParticipios"));        this.e = ((GerenteTestParticipios) localApplicationContext.getBean("gerenteTestParticipios"));    }}