package com.kalos.analisismorfologico;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import org.springframework.context.ApplicationContext;import com.kalos.beans.CubosTipoPartBean;import com.kalos.beans.SustantivoBean;import com.kalos.datos.adaptadores.AdaptadorGerenteSustantivos;import com.kalos.datos.gerentes.GerenteCubosTipoPart;import com.kalos.datos.gerentes.GerenteSustantivos;import com.kalos.enumeraciones.Beta;import com.kalos.flexion.declinacion.Declina;import com.kalos.operaciones.OpBeans;import com.kalos.operaciones.OpPalabras;public class TiposSustantivoTest extends BaseAMTest {    private Declina declina;    private GerenteSustantivos gerenteSustantivos;    private GerenteCubosTipoPart gerenteCubosTipoPart;    public void testTipos() {        try {            AdaptadorGerenteSustantivos localP = new AdaptadorGerenteSustantivos(this.gerenteSustantivos);            for (int i = 0; i < Beta.arrBeta.length; i++) {                String str1 = new String(new char[] { Beta.arrBeta[i] });                if (str1.equals("K")) {                    List<String> localList = this.gerenteSustantivos.seleccionaPorLetra(str1);                    List<SustantivoBean> localArrayList = new ArrayList<SustantivoBean>(localP.getBeans(localList));                    Iterator<SustantivoBean> localIterator = localArrayList.iterator();                    while (localIterator.hasNext()) {                        SustantivoBean locali = localIterator.next();                        if ((locali.getTipoNominal() != 11) && (!locali.isDibujado())) {                            System.out.println("comprobando " + locali.getNominativo() + " - " + locali.getGenitivo()                                    + " id=" + locali.getId());                            String str2 = OpPalabras.strBetaACompleto(locali.getNominativo());                            String str3 = OpPalabras.strBetaACompleto(locali.getGenitivo());                            int j = this.declina.sugiereDeclinacion(str2, str3, locali.getGenero());                            boolean bool = j == locali.getTipoNominal();                            if (!bool) {                                System.out.println("****** tipo en BD=" + locali.getTipoNominal() + " sugerido=" + j);                            }                            assertTrue(bool);                        }                    }                }            }        } catch (Exception localException) {            localException.printStackTrace();        }    }    public void testCubosTipoPart() {        try {            List<CubosTipoPartBean> localList = this.gerenteCubosTipoPart.seleccionaTodos();            Iterator<CubosTipoPartBean> localIterator = localList.iterator();            while (localIterator.hasNext()) {                CubosTipoPartBean localg = localIterator.next();                System.out.println("comprobando " + OpBeans.debugBean(localg, new String[0]));                String str1 = OpPalabras.strBetaACompleto(localg.getNominativo());                String str2 = OpPalabras.strBetaACompleto(localg.getGenitivo());                int i = this.declina.sugiereDeclinacion(str1, str2, localg.getGenero());                boolean bool = i == localg.getTipoSustantivo();                if (!bool) {                    System.out.println("tipo en BD=" + localg.getTipoSustantivo() + " sugerido=" + i);                }                assertTrue(bool);            }        } catch (Exception localException) {            localException.printStackTrace();        }    }    protected void setUp() throws Exception {        ApplicationContext localApplicationContext = creaContexto();        this.declina = ((Declina) localApplicationContext.getBean("declina"));        this.gerenteSustantivos = ((GerenteSustantivos) localApplicationContext.getBean("gerenteSustantivos"));        this.gerenteCubosTipoPart = ((GerenteCubosTipoPart) localApplicationContext.getBean("gerenteCubosTipoPart"));    }}