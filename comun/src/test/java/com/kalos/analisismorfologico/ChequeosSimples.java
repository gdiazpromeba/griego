package com.kalos.analisismorfologico;import java.util.Iterator;import java.util.Set;import org.junit.Ignore;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import com.kalos.analisismorfologico.negocio.AMAdjetivos;import com.kalos.analisismorfologico.negocio.AMInfinitivos;import com.kalos.analisismorfologico.negocio.AMParticipios;import com.kalos.analisismorfologico.negocio.AMParticulas;import com.kalos.analisismorfologico.negocio.AMSustantivos;import com.kalos.analisismorfologico.negocio.AMUtil;import com.kalos.analisismorfologico.negocio.AMVerbos;import com.kalos.beans.ResultadoUniversal;import com.kalos.beans.SustantivoBean;import com.kalos.comun.config.AnalisisMorfologicoConfig;import com.kalos.comun.config.DaosTestConfig;import com.kalos.comun.config.ServicesTestConfig;import com.kalos.datos.gerentes.GerenteSustantivos;import com.kalos.enumeraciones.CompLetras;import com.kalos.flexion.declinacion.Declina;import com.kalos.operaciones.AACacheable;import com.kalos.operaciones.OpPalabras;@Ignorepublic class ChequeosSimples implements CompLetras {    public static void testAMVerbos() {        try {            //String[] arrayOfString = { OpPalabras.strBetaACompleto("A)POBA/LLW") };            String[] arrayOfString = { OpPalabras.strBetaACompleto("KEKOMI/KATE") };                        ApplicationContext localApplicationContext = creaContexto();            AMVerbos localI = (AMVerbos) localApplicationContext.getBean("amVerbos");            AMUtil<?> localC = (AMUtil<?>) localApplicationContext.getBean("amUtil");            AACacheable localB = new AACacheable();            Set<ResultadoUniversal> localHashSet = localI.buscaCanonica(arrayOfString, localB, true, true);            System.out.println("********* resultado ****************");            Iterator<ResultadoUniversal> localIterator = localHashSet.iterator();            while (localIterator.hasNext()) {                ResultadoUniversal localj = localIterator.next();                System.out.println("resultado id=" + localj.getId() + " compuesto=" + localj.getIdCompuesto());                System.out.println(localC.accidentesHablados(localj));            }        } catch (Exception localException) {            localException.printStackTrace();        }    }    public static void testAMInfinitivos() {        try {            //	    String[] arrayOfString = { OpPalabras.strBetaACompleto("BALEI/N") };            //	    String[] arrayOfString = { OpPalabras.strBetaACompleto("A)GAGEI=N") };            String[] arrayOfString = { OpPalabras.strBetaACompleto("POIEI=SQAI") };                        ApplicationContext localApplicationContext = creaContexto();            AMInfinitivos localJ = (AMInfinitivos) localApplicationContext.getBean("amInfinitivos");            AMUtil<?> localC = (AMUtil<?>) localApplicationContext.getBean("amUtil");            AACacheable localB = new AACacheable();            Set<ResultadoUniversal> resultados = localJ.buscaCanonica(arrayOfString, localB, false, true);            System.out.println("********* resultado ****************");            localC.debugBeans(resultados, new String[] { "formaAccidentada" });        } catch (Exception localException) {            localException.printStackTrace();        }    }    public static void testTipoSustantivoIndividual() {        ApplicationContext localApplicationContext = creaContexto();        Declina localE = (Declina) localApplicationContext.getBean("declina");        GerenteSustantivos localj = (GerenteSustantivos) localApplicationContext.getBean("gerenteSustantivos");        String str1 = "-10ae9356:10a61e88d52:-7fff-10ae";        SustantivoBean locali = localj.seleccionaUno(str1);        System.out.println("comprobando " + locali.getNominativo() + " - " + locali.getGenitivo() + " id="                + locali.getId());        String str2 = OpPalabras.strBetaACompleto(locali.getNominativo());        String str3 = OpPalabras.strBetaACompleto(locali.getGenitivo());        int i = localE.sugiereDeclinacion(str2, str3, locali.getGenero());        int j = i == locali.getTipoNominal() ? 1 : 0;        if (j == 0) {            System.out.println("tipo en BD=" + locali.getTipoNominal() + " sugerido=" + i);        }    }    public static void testAMSustantivos() {        try {            //String[] arrayOfString = { OpPalabras.strBetaACompleto("*GABBAQA=") };            String[] arrayOfString = { OpPalabras.strBetaACompleto("SU_KH=N") };                        ApplicationContext localApplicationContext = creaContexto();            AMSustantivos<?> localF = (AMSustantivos<?>) localApplicationContext.getBean("amSustantivos");            localF.setApplicationContext(localApplicationContext);            AMUtil<?> amUtil = (AMUtil<?>) localApplicationContext.getBean("amUtil");            AACacheable localB = new AACacheable();            Set<ResultadoUniversal> localHashSet = localF.buscaCanonica(arrayOfString, localB, false, true);            System.out.println("********* resultado ****************");            amUtil.debugBeans(localHashSet, new String[0]);        } catch (Exception localException) {            localException.printStackTrace();        }    }    public static void testAMParticipios() {        try {            //String[] arrayOfString = { OpPalabras.strBetaACompleto("E)SFRA_GISME/NOU") };            String[] arrayOfString = { OpPalabras.strBetaACompleto("KAQH/MENOJ") };                         ApplicationContext localApplicationContext = creaContexto();            AMParticipios localD = (AMParticipios) localApplicationContext.getBean("amParticipios");//            localD.setParticipios((Participios) localApplicationContext.getBean("participios"));//            localD.setAmUtil((AMUtil) localApplicationContext.getBean("amUtil"));//            localD.setAmNominal((AMNominal) localApplicationContext.getBean("amNominal"));//            localD.setAmVerbal((AMVerbal) localApplicationContext.getBean("amVerbal"));//            localD.setExtractorPrefijos((ExtractorPrefijos) localApplicationContext.getBean("extractorPrefijos"));//            localD.setGerenteVerbos((GerenteVerbos) localApplicationContext.getBean("gerenteVerbos"));//            localD.setGerenteVerbosCompuestos((GerenteVerbosCompuestos) localApplicationContext//                    .getBean("gerenteVerbosCompuestos"));//            localD.setGerenteVerbalizadorParticipios((GerenteVerbalizadorParticipios) localApplicationContext//                    .getBean("gerenteVerbalizadorParticipios"));            AMUtil<?> amUtil = (AMUtil<?>) localApplicationContext.getBean("amUtil");            AACacheable localB = new AACacheable();            Set<ResultadoUniversal> resultados =localD.buscaCanonica(arrayOfString,  localB, false, true);            System.out.println("********* resultado ****************");            amUtil.debugBeans(resultados, new String[] { "formaCanonica" });        } catch (Exception localException) {            localException.printStackTrace();        }    }    public static void testAMAdjetivos() {        try {            //String[] arrayOfString = { OpPalabras.strBetaACompleto("DWDEKA/FU_LON") };            //String[] arrayOfString = { OpPalabras.strBetaACompleto("A)XI/AI_J") };            String[] arrayOfString = { OpPalabras.strBetaACompleto("A)XI/A_") };                       ApplicationContext localApplicationContext = creaContexto();            AMAdjetivos localL = (AMAdjetivos) localApplicationContext.getBean("amAdjetivos");            localL.setApplicationContext(localApplicationContext);            AMUtil<?> localC = (AMUtil<?>) localApplicationContext.getBean("amUtil");            AACacheable localB = new AACacheable();            Set<ResultadoUniversal> resultados = localL.buscaCanonica(arrayOfString,  localB, true, true);            System.out.println("********* resultado ****************");            localC.debugBeans(resultados, new String[] { "formaAccidentada" });        } catch (Exception localException) {            localException.printStackTrace();        }    }        public static void testAMParticulas() {        try {            //String[] arrayOfString = { OpPalabras.strBetaACompleto("DWDEKA/FU_LON") };            //String[] arrayOfString = { OpPalabras.strBetaACompleto("A)XI/AI_J") };            String[] arrayOfString = { OpPalabras.strBetaACompleto("H(/N") };                         ApplicationContext localApplicationContext = creaContexto();            AMParticulas localL = (AMParticulas) localApplicationContext.getBean("amParticulas");            localL.setApplicationContext(localApplicationContext);            AMUtil<?> localC = (AMUtil<?>) localApplicationContext.getBean("amUtil");            AACacheable localB = new AACacheable();            Set<ResultadoUniversal> resultados = localL.buscaCanonica(arrayOfString, localB, true, true);            System.out.println("********* resultado ****************");            localC.debugBeans(resultados, new String[] { "formaAccidentada" });        } catch (Exception localException) {            localException.printStackTrace();        }    }       public static ApplicationContext creaContexto() {    	AnnotationConfigApplicationContext contexto = new AnnotationConfigApplicationContext();    	contexto.register(AnalisisMorfologicoConfig.class, DaosTestConfig.class, ServicesTestConfig.class);    	contexto.refresh();    	return contexto;    	    }    public static void main(String[] paramArrayOfString) {        //Recursos.cambiaLocale("es");        testAMVerbos();    }}