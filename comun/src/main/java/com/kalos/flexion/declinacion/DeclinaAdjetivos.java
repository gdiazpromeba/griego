package com.kalos.flexion.declinacion;import java.util.ArrayList;import java.util.EnumMap;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import com.kalos.beans.AdjetivoBean;import com.kalos.beans.IrrAdjetivoEntero;import com.kalos.beans.IrrAdjetivoIndividual;import com.kalos.beans.TipoSustantivo;import com.kalos.datos.adaptadores.AdaptadorGerenteIrrAdjetivosEnteros;import com.kalos.datos.adaptadores.AdaptadorGerenteIrrAdjetivosIndividuales;import com.kalos.datos.gerentes.GerenteAdjetivos;import com.kalos.datos.gerentes.GerenteIrrAdjetivosEnteros;import com.kalos.datos.gerentes.GerenteIrrAdjetivosIndividuales;import com.kalos.datos.gerentes.GerenteTiposAdjetivo;import com.kalos.datos.gerentes.GerenteTiposSustantivo;import com.kalos.enumeraciones.Acento;import com.kalos.enumeraciones.Caso;import com.kalos.enumeraciones.Genero;import com.kalos.enumeraciones.GradoComparacion;import com.kalos.enumeraciones.Numero;import com.kalos.enumeraciones.Particularidad;import com.kalos.fonts.CaracterGriego;import com.kalos.fonts.CaracterGriegoFactory;import com.kalos.operaciones.AACacheable;import com.kalos.operaciones.AnalisisAcento;import com.kalos.operaciones.OpBeans;import com.kalos.operaciones.OpPalabras;public class DeclinaAdjetivos {    private GerenteTiposAdjetivo gerenteTiposAdjetivo;    private GerenteTiposSustantivo gerenteTiposSustantivo;    private GerenteAdjetivos gerenteAdjetivos;    private GerenteIrrAdjetivosEnteros gerenteIrrAdjetivosEnteros;    private GerenteIrrAdjetivosIndividuales gerenteIrrAdjetivosIndividuales;    private Declina declina;    private Map<Integer, String> mapaTiposId;    public void setGerenteTiposAdjetivo(GerenteTiposAdjetivo paramDA) {	this.gerenteTiposAdjetivo = paramDA;	this.mapaTiposId = this.gerenteTiposAdjetivo.getMapaTiposID();    }    public String sugiereGenitivo(Map<Genero, String> formas, Genero genero, int paramInt) {	if (paramInt == 12) {	    return formas.get(genero);	}	if ((!genero.equals(Genero.Femenino)) && ((paramInt == 2) || (paramInt == 3))) {	    StringBuffer localObject = new StringBuffer();	    ((StringBuffer) localObject).append("Los adjetivos de tipo 2 o 3 no femeninos son de 3ra declinaci√≥n.\n");	    ((StringBuffer) localObject).append("Para ellos no se puede sugerir genitivo.\n");	    ((StringBuffer) localObject).append("El genitivo debe ser ingresado a mano en la entrada de diccionario.");	    throw new RuntimeException(((StringBuffer) localObject).toString());	}	String forma = formas.get(genero);	String str1 = OpPalabras.desacentuar((String) forma);	AnalisisAcento analAc = AnalisisAcento.getAnalisisAcento((String) forma);	String str2;	String str3;	String str4;	if ((genero == Genero.Masculino) || (genero == Genero.MasculinoOFemenino)) {	    if (forma.endsWith(OpPalabras.strBetaACompleto("OJ"))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = OpPalabras.comeFinal(str2, 2);		str4 = str3.concat(OpPalabras.strBetaACompleto("OU"));		str4 = OpPalabras.acentoNaturalOIgual((String) forma, str4);		return str4;	    }	    if (forma.endsWith(OpPalabras.strBetaACompleto("O/J"))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = OpPalabras.comeFinal(str2, 2);		str4 = str3.concat(OpPalabras.strBetaACompleto("OU="));		return str4;	    }	    if (forma.endsWith(OpPalabras.strBetaACompleto("WJ")) && (paramInt == 15)) {		str2 = OpPalabras.comeFinal((String) forma, 1);		return str2;	    }	    if (forma.endsWith(OpPalabras.strBetaACompleto("OU=J"))) {		str2 = OpPalabras.comeFinal((String) forma, 3);		str3 = str2.concat(OpPalabras.strBetaACompleto("OU="));		return str3;	    }	    if (forma.endsWith(OpPalabras.strBetaACompleto("OUJ"))) {		str2 = OpPalabras.comeFinal((String) forma, 1);		return str2;	    }	    if (forma.endsWith(OpPalabras.strBetaACompleto("EIJ"))) {		str2 = OpPalabras.comeFinal((String) forma, 3);		str3 = str2.concat(OpPalabras.strBetaACompleto("ENTOJ"));		return str3;	    }	    if ((str1.endsWith(OpPalabras.strBetaACompleto("HJ"))) && (paramInt == 2)) {		str2 = OpPalabras.comeFinal((String) forma, 2);		str3 = str2.concat(OpPalabras.strBetaACompleto("OUJ"));		str3 = OpPalabras.acentoNaturalOIgual((String) forma, str3);		return str3;	    }	    if ((((String) forma).endsWith(OpPalabras.strBetaACompleto("U/J"))) && (paramInt == 3)) {		str2 = OpPalabras.comeFinal((String) forma, 2);		str3 = str2.concat(OpPalabras.strBetaACompleto("E/OJ"));		return str3;	    }	    if (((String) forma).endsWith(OpPalabras.strBetaACompleto("UJ"))) {		str2 = OpPalabras.comeFinal((String) forma, 2);		str3 = str2.concat(OpPalabras.strBetaACompleto("EOJ"));		str3 = OpPalabras.desacentuar(str3);		str3 = OpPalabras.acentua(str3, analAc.sugeridos.silaba);		return str3;	    }	    if (((String) forma).endsWith(OpPalabras.strBetaACompleto("IJ"))) {		str2 = OpPalabras.comeFinal((String) forma, 2);		str3 = str2.concat(OpPalabras.strBetaACompleto("IDOJ"));		str3 = OpPalabras.desacentuar(str3);		str3 = OpPalabras.acentua(str3, analAc.sugeridos.silaba);		return str3;	    }	} else if (genero == Genero.Femenino) {	    if (((String) forma).endsWith(OpPalabras.strBetaACompleto("OUSA"))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = OpPalabras.comeFinal(str2, 4);		str4 = str3.concat(OpPalabras.strBetaACompleto("OU/SA_J"));		return str4;	    }	    if (((String) forma).endsWith(OpPalabras.strBetaACompleto("ESSA"))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = OpPalabras.comeFinal(str2, 4);		str4 = str3.concat(OpPalabras.strBetaACompleto("ESSHJ"));		str4 = OpPalabras.acentua(str4);		return str4;	    }	    if (((String) forma).endsWith(OpPalabras.strBetaACompleto("EI=A"))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = OpPalabras.comeFinal(str2, 2);		str4 = str3.concat(OpPalabras.strBetaACompleto("I/A_J"));		str4 = OpPalabras.acentua(str4);		return str4;	    }	    if ((((String) forma).endsWith(OpPalabras.strBetaACompleto("A")))		    || (((String) forma).endsWith(OpPalabras.strBetaACompleto("A_")))		    || (((String) forma).endsWith(OpPalabras.strBetaACompleto("H")))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = str2;		str4 = str3.concat(OpPalabras.strBetaACompleto("J"));		str4 = OpPalabras.acentua(str4, analAc.sugeridos.silabaB1);		return str4;	    }	    if (((String) forma).endsWith(OpPalabras.strBetaACompleto("A/"))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = OpPalabras.comeFinal(str2, 1);		str4 = str3.concat(OpPalabras.strBetaACompleto("A=J"));		return str4;	    }	    if (((String) forma).endsWith(OpPalabras.strBetaACompleto("A_/"))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = OpPalabras.comeFinal(str2, 1);		str4 = str3.concat(OpPalabras.strBetaACompleto("A=J"));		return str4;	    }	    if (((String) forma).endsWith(OpPalabras.strBetaACompleto("H/"))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = OpPalabras.comeFinal(str2, 1);		str4 = str3.concat(OpPalabras.strBetaACompleto("H=J"));		return str4;	    }	    if (((String) forma).endsWith(OpPalabras.strBetaACompleto("H="))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = OpPalabras.comeFinal(str2, 1);		str4 = str3.concat(OpPalabras.strBetaACompleto("H=J"));		return str4;	    }	    if ((((String) forma).endsWith(OpPalabras.strBetaACompleto("EA=")))		    || (((String) forma).endsWith(OpPalabras.strBetaACompleto("IA=")))		    || (((String) forma).endsWith(OpPalabras.strBetaACompleto("RA=")))) {		str2 = OpPalabras.desacentuar((String) forma);		str3 = OpPalabras.comeFinal(str2, 1);		str4 = str3.concat(OpPalabras.strBetaACompleto("A=J"));		return str4;	    }	} else if (genero == Genero.Neutro) {	    str2 = formas.get(Genero.Masculino);	    str3 = formas.get(Genero.MasculinoOFemenino);	    str4 = str3 != null ? str3 : str2;	    String str5;	    String str6;	    String str7;	    if ((str4.endsWith(OpPalabras.strBetaACompleto("OJ")))		    || (str4.endsWith(OpPalabras.strBetaACompleto("O/J")))) {		if (((String) forma).endsWith(OpPalabras.strBetaACompleto("ON"))) {		    str5 = OpPalabras.desacentuar((String) forma);		    str6 = OpPalabras.comeFinal(str5, 2);		    str7 = str6.concat(OpPalabras.strBetaACompleto("OU"));		    str7 = OpPalabras.acentoNaturalOIgual(str4, str7);		    return str7;		}		if (((String) forma).endsWith(OpPalabras.strBetaACompleto("O/N"))) {		    str5 = OpPalabras.desacentuar((String) forma);		    str6 = OpPalabras.comeFinal(str5, 2);		    str7 = str6.concat(OpPalabras.strBetaACompleto("OU="));		    return str7;		}		if ((((String) forma).endsWith(OpPalabras.strBetaACompleto("O")))			|| (((String) forma).endsWith(OpPalabras.strBetaACompleto("O/")))) {		    str5 = OpPalabras.desacentuar((String) forma);		    str6 = OpPalabras.comeFinal(str5, 1);		    str7 = str6.concat(OpPalabras.strBetaACompleto("OU"));		    str7 = OpPalabras.acentua(str7, analAc.sugeridos.silabaB1);		    return str7;		}	    } else {		if ((((String) forma).endsWith(OpPalabras.strBetaACompleto("WN"))) && (paramInt == 15)) {		    str5 = OpPalabras.comeFinal((String) forma, 1);		    return str5;		}		if (forma.endsWith(OpPalabras.strBetaACompleto("OU=N"))) {		    str5 = OpPalabras.desacentuar((String) forma);		    str6 = OpPalabras.comeFinal(str5, 3);		    str7 = str6.concat(OpPalabras.strBetaACompleto("OU="));		    return str7;		}		if (forma.endsWith(OpPalabras.strBetaACompleto("OUN"))) {		    str5 = OpPalabras.comeFinal((String) forma, 1);		    return str5;		}		if ((((String) forma).endsWith(OpPalabras.strBetaACompleto("EN")))			&& (str4.endsWith(OpPalabras.strBetaACompleto("EIJ")))) {		    str5 = OpPalabras.comeFinal((String) forma, 2);		    str6 = str5.concat(OpPalabras.strBetaACompleto("ENTOJ"));		    return str6;		}		if ((str1.endsWith(OpPalabras.strBetaACompleto("EJ"))) && (paramInt == 2)) {		    str5 = OpPalabras.comeFinal((String) forma, 2);		    str6 = str5.concat(OpPalabras.strBetaACompleto("OUJ"));		    str6 = OpPalabras.acentoNaturalOIgual((String) forma, str6);		    return str6;		}		if ((((String) forma).endsWith(OpPalabras.strBetaACompleto("U/")))			&& (str4.endsWith(OpPalabras.strBetaACompleto("U/J")))) {		    str5 = OpPalabras.comeFinal((String) forma, 2);		    str6 = str5.concat(OpPalabras.strBetaACompleto("E/OJ"));		    return str6;		}		if ((((String) forma).endsWith(OpPalabras.strBetaACompleto("U")))			&& (str4.endsWith(OpPalabras.strBetaACompleto("UJ")))) {		    str5 = OpPalabras.comeFinal((String) forma, 2);		    str6 = str5.concat(OpPalabras.strBetaACompleto("EOJ"));		    str6 = OpPalabras.desacentuar(str6);		    str6 = OpPalabras.acentua(str6, analAc.sugeridos.silaba);		    return str6;		}		if (((String) forma).endsWith(OpPalabras.strBetaACompleto("I"))) {		    str5 = OpPalabras.comeFinal((String) forma, 1);		    str6 = str5.concat(OpPalabras.strBetaACompleto("IDOJ"));		    str6 = OpPalabras.desacentuar(str6);		    str6 = OpPalabras.acentua(str6, analAc.sugeridos.silaba);		    return str6;		}	    }	}	throw new RuntimeException("no pude reconstruir el genitivo de la siguiente palabra: "		+ OpPalabras.strCompletoABeta((String) forma) + ", genero " + genero);    }    private void A(IrrAdjetivoEntero paramv, Map<Particularidad, OcAdjetivo> paramMap) {	OcNominal localD1 = A(paramv.getGrado(), paramMap, paramv.getParticularidad(), paramv.getGenero());	String nom = OpPalabras.strBetaACompleto(paramv.getNominativo());	String gen = OpPalabras.strBetaACompleto(paramv.getGenitivo());	TipoSustantivo localo = this.gerenteTiposSustantivo.seleccionIndividual(paramv.getTipoSustantivoId());	OcNominal ocNominal = this.declina.declinaRegular(nom, gen, paramv.getTipoSustantivo(), localo.isPluralizado(),		paramv.isSoloSingular());	for (Numero localn : Numero.values()) {	    for (Caso locala : Caso.values()) {		int n = ocNominal.cantidadDeFormas(locala, localn);		for (int i1 = 0; i1 < n; i1++) {		    localD1.setFormaIndividual(locala, localn, ocNominal.getFormaIndividual(locala, localn, i1), i1);		}	    }	}    }    private void A(IrrAdjetivoIndividual paramV, Map<Particularidad, OcAdjetivo> paramMap) {	OcNominal localD = A(paramV.getGrado(), paramMap, paramV.getParticularidad(), paramV.getGenero());	String str = OpPalabras.strBetaACompleto(paramV.getForma());	localD.setFormaIndividual(paramV.getCaso(), paramV.getNumero(), str, paramV.getSubindice());    }    private OcNominal A(GradoComparacion parami, Map<Particularidad, OcAdjetivo> paramMap, Particularidad partic,	    Genero paramA) {	OcAdjetivo ocAdj = paramMap.get(partic);	if (ocAdj == null) {	    ocAdj = new OcAdjetivo();	    paramMap.put(partic, ocAdj);	}	OcNominal localD = ocAdj.getOcurrenciaNominal(parami, paramA);	if (localD == null) {	    localD = new OcNominal();	    ocAdj.setOcurrenciaNominal(parami, paramA, localD);	}	return localD;    }    public EnumMap<Particularidad, OcAdjetivo> declina(String paramString) {	AdjetivoBean adjBean = this.gerenteAdjetivos.seleccionaUno(paramString);	List<String> localList1 = this.gerenteIrrAdjetivosEnteros.seleccionaPorAdjetivo(paramString);	List<String> localList2 = this.gerenteIrrAdjetivosIndividuales.seleccionaPorAdjetivo(paramString);	AdaptadorGerenteIrrAdjetivosEnteros adGerIrrAdjEnteros = new AdaptadorGerenteIrrAdjetivosEnteros(		gerenteIrrAdjetivosEnteros);	AdaptadorGerenteIrrAdjetivosIndividuales adGerIrrAdIndiv = new AdaptadorGerenteIrrAdjetivosIndividuales(		this.gerenteIrrAdjetivosIndividuales);	List<IrrAdjetivoEntero> irrsEnteras = new ArrayList<IrrAdjetivoEntero>(adGerIrrAdjEnteros.getBeans(localList1));	List<IrrAdjetivoIndividual> irrsIndividuales = new ArrayList<IrrAdjetivoIndividual>(		adGerIrrAdIndiv.getBeans(localList2));	int tipoAdj = adjBean.getTipoAdjetivo();	EnumMap<Particularidad, OcAdjetivo> mapOcAdjs;	if ((tipoAdj != 11) && (tipoAdj != 4)) {		adjBean.setMasculino(OpPalabras.strBetaACompleto(adjBean.getMasculino()));		adjBean.setFemenino(OpPalabras.strBetaACompleto(adjBean.getFemenino()));		adjBean.setMascFem(OpPalabras.strBetaACompleto(adjBean.getMascFem()));		adjBean.setNeutro(OpPalabras.strBetaACompleto(adjBean.getNeutro()));		adjBean.setGenitivo(OpPalabras.strBetaACompleto(adjBean.getGenitivo()));	    mapOcAdjs = declinaRegular(adjBean);	} else {	    mapOcAdjs = new EnumMap<Particularidad, OcAdjetivo>(Particularidad.class);	}	Iterator<IrrAdjetivoEntero> localIterator = irrsEnteras.iterator();	while (localIterator.hasNext()) {	    IrrAdjetivoEntero localObject = localIterator.next();	    A(localObject, mapOcAdjs);	}	Iterator<IrrAdjetivoIndividual> localIterator2 = irrsIndividuales.iterator();	while (localIterator2.hasNext()) {	    IrrAdjetivoIndividual localObject = localIterator2.next();	    A(localObject, mapOcAdjs);	}	return mapOcAdjs;    }    public String sugiereGenitivo(AdjetivoBean paramF) {	Map<Genero, String> localHashMap = new HashMap<Genero, String>();	Genero localA = null;	if (paramF.getMascFem() != null) {	    localHashMap.put(Genero.MasculinoOFemenino, OpPalabras.strBetaACompleto(paramF.getMascFem()));	    localA = Genero.MasculinoOFemenino;	}	if (paramF.getMasculino() != null) {	    localHashMap.put(Genero.Masculino, OpPalabras.strBetaACompleto(paramF.getMasculino()));	    localA = Genero.Masculino;	}	if (paramF.getFemenino() != null) {	    localHashMap.put(Genero.Femenino, OpPalabras.strBetaACompleto(paramF.getFemenino()));	    localA = Genero.Femenino;	}	if (paramF.getNeutro() != null) {	    localHashMap.put(Genero.Neutro, OpPalabras.strBetaACompleto(paramF.getNeutro()));	}	String str = sugiereGenitivo(localHashMap, localA, paramF.getTipoAdjetivo());	return str;    }    public String aChar32(int paramInt) {	return (String) this.mapaTiposId.get(Integer.valueOf(paramInt));    }    public int aInt(String paramString) {	Iterator<Entry<Integer, String>> localIterator = this.mapaTiposId.entrySet().iterator();	while (localIterator.hasNext()) {	    Map.Entry<Integer,String> localEntry = localIterator.next();	    String str = localEntry.getValue();	    if (str.equals(paramString)) {		return ((Integer) localEntry.getKey()).intValue();	    }	}	throw new RuntimeException("id de tipo de adjetivo inv√°lido");    }    public String sugiereTipoAdjetivoId(String paramString1, String paramString2, String paramString3,	    String paramString4) {	int i = sugiereTipoAdjetivoEntero(paramString1, paramString2, paramString3, paramString4);	return aChar32(i);    }    public int sugiereTipoAdjetivoEntero(String paramString1, String paramString2, String paramString3,	    String paramString4) {	String str1 = null;	String str2 = null;	String str3 = null;	String str4 = null;	String str5 = null;	String str6 = null;	String str7 = null;	String str8 = null;	if (paramString1 != null) {	    str1 = OpPalabras.strCompletoABeta(paramString1);	    str2 = OpPalabras.strCompletoABeta(OpPalabras.desacentuar(OpPalabras.desespirituar(paramString1)));	    str3 = OpPalabras.strCompletoABeta(OpPalabras.neutraliza(paramString1));	}	if (paramString2 != null) {	    str4 = OpPalabras.strCompletoABeta(paramString2);	    str5 = OpPalabras.strCompletoABeta(OpPalabras.neutraliza(paramString2));	}	if (paramString3 != null) {	    str6 = OpPalabras.strCompletoABeta(paramString3);	    str7 = OpPalabras.strCompletoABeta(OpPalabras.neutraliza(paramString3));	}	if (paramString4 != null) {	    str8 = OpPalabras.strCompletoABeta(OpPalabras.neutraliza(paramString4));	}	if ((str3 != null) && (str5 != null) && (str7 != null)) {	    if ((paramString1.equals(paramString2)) && (paramString2.equals(paramString3))) {		return 12;	    }	    if ((str3.endsWith("OJ")) && ((str5.endsWith("A")) || (str5.endsWith("H")))		    && ((str7.endsWith("ON")) || (str7.endsWith("O")))) {		return 8;	    }	    if (((str3.endsWith("UJ")) && (str5.endsWith("EIA")) && (str7.endsWith("U")))		    || ((str2.endsWith("A_J")) && (str5.endsWith("AINA")) && (str7.endsWith("AN")))		    || ((str3.endsWith("HN")) && (str5.endsWith("EINA")) && (str7.endsWith("EN")))		    || ((str3.endsWith("EIJ")) && (str5.endsWith("SA")) && (str7.endsWith("EN")))		    || ((str3.endsWith("WN")) && (str5.endsWith("OUSA")) && (str7.endsWith("ON")))		    || ((str2.endsWith("A_J")) && (str5.endsWith("SA")) && (str7.endsWith("EN")))) {		return 3;	    }	    if (((str1.endsWith("OU=J")) && (str4.endsWith("H=")) && (str6.endsWith("OU=N")))		    || ((str1.endsWith("OU=J")) && (str4.endsWith("A=")) && (str6.endsWith("OU=N")))) {		return 10;	    }	    return 11;	}	if ((str8 != null) && (str7 != null)) {	    if ((str8.endsWith("OJ")) && (str7.endsWith("ON"))) {		return 7;	    }	    if ((str8.endsWith("OUJ")) && (str6.endsWith("OUN"))) {		return 9;	    }	    if ((str8.endsWith("WJ")) && (str6.endsWith("WN"))) {		return 15;	    }	    if (((str8.endsWith("HJ")) && (str7.endsWith("EJ"))) || ((str8.endsWith("PIJ")) && (str7.endsWith("PI")))		    || ((str8.endsWith("PIJ")) && (str7.endsWith("PI")))		    || ((str8.endsWith("RIJ")) && (str7.endsWith("RI")))		    || ((str8.endsWith("WR")) && (str7.endsWith("OR")))		    || ((str8.endsWith("HN")) && (str7.endsWith("EN")))		    || ((str8.endsWith("WN")) && (str7.endsWith("ON")))		    || ((str8.endsWith("UJ")) && (str7.endsWith("U")))) {		return 2;	    }	    throw new ProblemaSugiriendoTipoAdjetivo("El adjetivo es de dos terminaciones pero no es voc√°lico, conson√°ntico ni √°tico", paramString1,		    paramString2, paramString3);	}	return 4;    }    public String sugiereNeutro(String paramString) {	String str1 = OpPalabras.neutralizaBeta(paramString);	String str2 = OpPalabras.strBetaACompleto(paramString);	StringBuffer localStringBuffer = new StringBuffer(paramString);	if ((str1.endsWith("OJ")) || (str1.endsWith("OUJ"))) {	    localStringBuffer.setCharAt(localStringBuffer.length() - 1, 'N');	    return localStringBuffer.toString();	}	if (paramString.endsWith("HJ")) {	    localStringBuffer.setCharAt(localStringBuffer.length() - 2, 'E');	    return localStringBuffer.toString();	}	if (paramString.endsWith("H/J")) {	    localStringBuffer.delete(localStringBuffer.length() - 3, localStringBuffer.length());	    localStringBuffer.append("E/J");	    return localStringBuffer.toString();	}	if ((paramString.endsWith("WN")) || (paramString.endsWith("WJ"))) {	    localStringBuffer.delete(localStringBuffer.length() - 2, localStringBuffer.length());	    localStringBuffer.append("ON");	    String str3 = OpPalabras.strBetaACompleto(localStringBuffer.toString());	    String str4 = OpPalabras.acentuarHastaMismaPosicion(str2, str3);	    return OpPalabras.strCompletoABeta(str4);	}	return "";    }    public String sugiereFemenino(String paramString) {	String str = OpPalabras.neutralizaBeta(paramString);	AnalisisAcento analAc = AnalisisAcento.getAnalisisAcento(OpPalabras.strBetaACompleto(paramString));	StringBuffer localStringBuffer = new StringBuffer(OpPalabras.desacentuar(OpPalabras		.strBetaACompleto(paramString)));	if (str.endsWith("OJ")) {	    localStringBuffer.delete(localStringBuffer.length() - 2, localStringBuffer.length());	    char i = localStringBuffer.charAt(localStringBuffer.length() - 1);	    CaracterGriego localObject = CaracterGriegoFactory.produceCaracterGriego(i);	    i = localObject.getLetraBase();	    if ((i == 961) || (i == 9145) || (i == 949)) {		localStringBuffer.append(OpPalabras.strBetaACompleto("A_"));	    } else {		localStringBuffer.append(OpPalabras.strBetaACompleto("H"));	    }	}	int j = analAc.sugeridos.silaba;	if (j < -2) {	    j = -2;	}	Object localObject = OpPalabras.acentua(localStringBuffer.toString(), j, Acento.Agudo);	return OpPalabras.strCompletoABeta((String) localObject);    }    private void A(OcAdjetivo ocAdj, Genero paramA1, Caso parama1, Numero paramn1, GradoComparacion grado,	    Genero paramA2, Caso parama2, Numero paramn2, AACacheable paramB1) {	int i = ocAdj.cantidadDeFormas(grado, paramA2, parama2, paramn2);	for (int j = 0; j < i; j++) {	    String str1 = ocAdj.getFormaSubindiceOPrimera(grado, paramA1, parama1, paramn1, j);	    String str2 = ocAdj.getFormaIndividual(grado, paramA2, parama2, paramn2, j);	    str2 = OpPalabras.desacentuar(str2);	    paramB1.getAnalisisAcento(str1);	    str2 = OpPalabras.acentuarMismaPosicion(paramB1, str1, str2);	    ocAdj.setFormaIndividual(grado, paramA2, parama2, paramn2, str2, j);	}    }    private void A(GradoComparacion grado, OcAdjetivo paramB) {	AACacheable localB = new AACacheable();	A(paramB, Genero.Masculino, Caso.Nominativo, Numero.Singular, grado, Genero.Femenino, Caso.Nominativo, Numero.Plural, localB);	A(paramB, Genero.Masculino, Caso.Nominativo, Numero.Singular, grado, Genero.Femenino, Caso.Genitivo, Numero.Plural, localB);    }    public EnumMap<Particularidad, OcAdjetivo> declinaRegular(AdjetivoBean paramF) {	OcAdjetivo ocAdj = new OcAdjetivo();	int tipoAdjetivo = paramF.getTipoAdjetivo();	if ((tipoAdjetivo == 3) || (tipoAdjetivo == 8) || (tipoAdjetivo == 10)) {	    Map<Genero, String> localObject = new HashMap<Genero, String>();	    localObject.put(Genero.Masculino, paramF.getMasculino());	    localObject.put(Genero.Femenino, paramF.getFemenino());	    localObject.put(Genero.Neutro, paramF.getNeutro());	    pueblaOcIndividual(ocAdj, localObject, paramF.getGenitivo(), Genero.Masculino, paramF.getGrado(),		    tipoAdjetivo);	    pueblaOcIndividual(ocAdj, localObject, paramF.getGenitivo(), Genero.Femenino, paramF.getGrado(),		    tipoAdjetivo);	    pueblaOcIndividual(ocAdj, localObject, paramF.getGenitivo(), Genero.Neutro, paramF.getGrado(),		    tipoAdjetivo);	    if (tipoAdjetivo == 8) {		A(paramF.getGrado(), ocAdj);	    }	} else if ((tipoAdjetivo == 15) || (tipoAdjetivo == 2) || (tipoAdjetivo == 7) || (tipoAdjetivo == 9)) {	    Map<Genero, String> mapFormas = new HashMap<Genero, String>();	    mapFormas.put(Genero.MasculinoOFemenino, paramF.getMascFem());	    mapFormas.put(Genero.Neutro, paramF.getNeutro());	    pueblaOcIndividual(ocAdj, mapFormas, paramF.getGenitivo(), Genero.MasculinoOFemenino, paramF.getGrado(),		    tipoAdjetivo);	    pueblaOcIndividual(ocAdj, mapFormas, paramF.getGenitivo(), Genero.Neutro, paramF.getGrado(), tipoAdjetivo);	} else if (tipoAdjetivo == 12) {	    Map<Genero, String> localObject = new HashMap<Genero, String>();	    String str = paramF.getMasculino();	    localObject.put(Genero.Masculino, str);	    localObject.put(Genero.Femenino, str);	    localObject.put(Genero.Neutro, str);	    pueblaOcIndividual(ocAdj, localObject, str, Genero.Masculino, paramF.getGrado(), tipoAdjetivo);	    pueblaOcIndividual(ocAdj, localObject, str, Genero.Femenino, paramF.getGrado(), tipoAdjetivo);	    pueblaOcIndividual(ocAdj, localObject, str, Genero.Neutro, paramF.getGrado(), tipoAdjetivo);	} else if (tipoAdjetivo == 4) {	    Map<Genero, String> localObject = new HashMap<Genero, String>();	    if (paramF.getMasculino() != null) {		localObject.put(Genero.Masculino, paramF.getMasculino());		pueblaOcIndividual(ocAdj, localObject, paramF.getGenitivo(), Genero.Masculino,			paramF.getGrado(), tipoAdjetivo);	    }	    if (paramF.getFemenino() != null) {		localObject.put(Genero.Femenino, paramF.getFemenino());		pueblaOcIndividual(ocAdj, localObject, paramF.getGenitivo(), Genero.Femenino, paramF.getGrado(),			tipoAdjetivo);	    }	    if (paramF.getNeutro() != null) {		localObject.put(Genero.Neutro, paramF.getNeutro());		pueblaOcIndividual(ocAdj, localObject, paramF.getGenitivo(), Genero.Neutro, paramF.getGrado(),			tipoAdjetivo);	    }	    if (paramF.getMascFem() != null) {		localObject.put(Genero.MasculinoOFemenino, paramF.getMascFem());		pueblaOcIndividual(ocAdj, localObject, paramF.getGenitivo(), Genero.MasculinoOFemenino,			paramF.getGrado(), tipoAdjetivo);	    }	} else {	    throw new RuntimeException("el tipo de adjetivo " + tipoAdjetivo + " a√∫n no est√° contmeplado");	}	EnumMap<Particularidad, OcAdjetivo> localObject = new EnumMap<Particularidad, OcAdjetivo>(Particularidad.class);	localObject.put(paramF.getParticularidad(), ocAdj);	return localObject;    }    private void pueblaOcIndividual(OcAdjetivo ocAdjetivo, Map<Genero, String> mapFormas, String paramString,	    Genero genero, GradoComparacion parami, int paramInt) {	String str1 = mapFormas.get(genero);	String str2 = paramString;	if ((paramString == null) || (genero.equals(Genero.Femenino))) {	    str2 = sugiereGenitivo(mapFormas, genero, paramInt);	}	if ((str1 != null) && (str2 != null)) {	    int i = this.declina.sugiereDeclinacion(str1, str2, genero);	    OcNominal ocNom = this.declina.declinaRegular(str1, str2, i, false, false);	    ocAdjetivo.setOcurrenciaNominal(parami, genero, ocNom);	}    }    public Declina getDeclina() {	return this.declina;    }    public void setDeclina(Declina paramE) {	this.declina = paramE;    }    public void setGerenteAdjetivos(GerenteAdjetivos paramf) {	this.gerenteAdjetivos = paramf;    }    public void setGerenteIrrAdjetivosEnteros(GerenteIrrAdjetivosEnteros paramk) {	this.gerenteIrrAdjetivosEnteros = paramk;    }    public void setGerenteIrrAdjetivosIndividuales(GerenteIrrAdjetivosIndividuales paramr) {	this.gerenteIrrAdjetivosIndividuales = paramr;    }    public void setGerenteTiposSustantivo(GerenteTiposSustantivo paramh) {	this.gerenteTiposSustantivo = paramh;    }}