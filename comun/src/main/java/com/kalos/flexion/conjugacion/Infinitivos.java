package com.kalos.flexion.conjugacion;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import com.kalos.beans.IrrInfinitivoBean;import com.kalos.beans.IrrVerbo;import com.kalos.beans.IrrVerboIndividual;import com.kalos.beans.VerboBean;import com.kalos.beans.VerboSimpleCompuesto;import com.kalos.datos.gerentes.GerenteIrrInfinitivos;import com.kalos.datos.gerentes.GerenteIrrVerbos;import com.kalos.datos.gerentes.GerentePreposicionesEnVerbos;import com.kalos.datos.gerentes.GerenteVerbos;import com.kalos.datos.gerentes.GerenteVerbosCompuestos;import com.kalos.enumeraciones.Acento;import com.kalos.enumeraciones.Aspecto;import com.kalos.enumeraciones.CompLetras;import com.kalos.enumeraciones.Contraccion;import com.kalos.enumeraciones.FuerteDebil;import com.kalos.enumeraciones.Particularidad;import com.kalos.enumeraciones.Propagacion;import com.kalos.enumeraciones.Tiempo;import com.kalos.enumeraciones.TiempoOAspecto;import com.kalos.enumeraciones.TipoVerbo;import com.kalos.enumeraciones.Voz;import com.kalos.enumeraciones.utils.TransformadorTiempoAspecto;import com.kalos.flexion.Preposiciones;import com.kalos.flexion.conjugacion.negocio.Desinencia;import com.kalos.flexion.conjugacion.negocio.ManejaDesinenciasInfinitivo;import com.kalos.flexion.conjugacion.negocio.OcurrenciaInfinitivo;import com.kalos.flexion.utils.UtilListas;import com.kalos.operaciones.OpPalabras;import com.kalos.operaciones.TiposVerbo;import org.apache.log4j.Logger;// Referenced classes of package kalos.H.B://            Apublic class Infinitivos implements CompLetras, TipoVerbo {    private static class Comedor {	static String temaComido;	static String desinenciaComida;	static void come(boolean flag, String s, String s1) {	    temaComido = s;	    desinenciaComida = s1;	    if (flag) {		char c1 = s.charAt(s.length() - 1);		char c2 = s1.charAt(0);		if (c1 == '\u03C3') {		    if (c2 == '\u03C3') {			desinenciaComida = s1.substring(1);		    }		} else if (c1 == '\u03BC' && c2 != '\u03BC') {		    temaComido = s.substring(0, s.length() - 1);		}	    }	}	private Comedor() {	}    }    private Verbos verbos;    private GerenteVerbos gerenteVerbos;    private GerenteIrrVerbos gerenteIrrVerbos;    private GerenteIrrInfinitivos gerenteIrrInfinitivos;    private ManejaDesinenciasInfinitivo manejaDesinenciasInfinitivo;    private GerenteVerbosCompuestos gerenteVerbosCompuestos;    private GerentePreposicionesEnVerbos gerentePreposicionesEnVerbos;    private Preposiciones preposiciones;    Logger logger=Logger.getLogger(getClass().getName());    private void A(OcurrenciaInfinitivo a, VerboBean verboBean, List<String> list) {	StringBuffer stringbuffer = new StringBuffer(OpPalabras.strBetaACompleto(verboBean.getVerbo()));	OpPalabras.desacentuar(stringbuffer);	StringBuffer stringbuffer1 = new StringBuffer();	Voz z;	if (TiposVerbo.esDeponente(verboBean.getTipoVerbo())) {	    z = Voz.Media;	} else {	    z = Voz.Activa;	}	stringbuffer1.append(stringbuffer);	verbos.extraeTemaDadaCanonica(stringbuffer1, verboBean.getTipoVerbo(), Aspecto.Infectivo);	OpPalabras.desacentuar(stringbuffer1);	switch (verboBean.getTipoVerbo()) {	case 21: // '\025'	case 24: // '\030'	case 25: // '\031'	case 26: // '\032'	case 51: // '3'	case 52: // '4'	case 53: // '5'	case 54: // '6'	case 55: // '7'	case 56: // '8'	case 57: // '9'	case 58: // ':'	case 59: // ';'	case 60: // '<'	case 61: // '='	case 62: // '>'	case 63: // '?'	case 64: // '@'	case 65: // 'A'	case 66: // 'temaComido'	case 67: // 'C'	case 68: // 'D'	case 79: // 'O'	case 80: // 'P'	case 91: // '['	case 92: // '\\'	case 93: // ']'	case 94: // '^'	    A(a, Aspecto.Infectivo, stringbuffer1.toString(), 1, Voz.Activa , Voz.Media, z == Voz.Media, Contraccion.sumaAcentuada, list);	    break;	case 45: // '-'	case 46: // '.'	case 47: // '/'	case 48: // '0'	case 49: // '1'	case 50: // '2'	    A(a, Aspecto.Infectivo, stringbuffer1.toString(), 4, Voz.Activa, Voz.Media, z == Voz.Media, Contraccion.vocalica, list);	    break;	}    }    private void conjugaFuturo(OcurrenciaInfinitivo a, VerboBean verbo, List<String> list) {	StringBuffer stringbuffer = new StringBuffer(OpPalabras.strBetaACompleto(verbo.getVerbo()));	OpPalabras.desacentuar(stringbuffer);	StringBuffer stringbuffer1 = new StringBuffer();	Voz z;	if (TiposVerbo.esDeponente(verbo.getTipoVerbo())) {	    z = Voz.Media;	} else {	    z = Voz.Activa;	}	stringbuffer1.append(stringbuffer);	verbos.extraeTemaDadaCanonica(stringbuffer1, verbo.getTipoVerbo(), Aspecto.Futuro);	boolean flag = z == Voz.Media;	OpPalabras.desacentuar(stringbuffer1);	String s = stringbuffer1.toString();	switch (verbo.getTipoVerbo()) {	case 22: // '\026'	case 23: // '\027'	case 27: // '\033'	case 28: // '\034'	case 29: // '\035'	case 30: // '\036'	case 31: // '\037'	case 32: // ' '	case 33: // '!'	case 34: // '"'	case 35: // '#'	case 36: // '$'	case 37: // '%'	case 38: // '&'	case 39: // '\''	case 40: // '('	case 41: // ')'	case 42: // '*'	case 43: // '+'	case 44: // ','	case 69: // 'E'	case 70: // 'F'	case 71: // 'G'	case 72: // 'H'	case 75: // 'K'	case 76: // 'L'	case 77: // 'M'	case 78: // 'N'	case 81: // 'Q'	case 82: // 'R'	case 83: // 'S'	case 84: // 'T'	case 85: // 'U'	case 86: // 'V'	case 88: // 'X'	case 89: // 'Y'	case 90: // 'Z'	default:	    break;	case 73: // 'I'	case 74: // 'J'	case 87: // 'W'	    return;	case 45: // '-'	case 46: // '.'	case 47: // '/'	case 48: // '0'	case 49: // '1'	case 50: // '2'	    Contraccion c1 = Contraccion.sumaAcentuada;	    A(a, Aspecto.Futuro, stringbuffer1.toString(), 1, Voz.Activa, Voz.Pasiva, z == Voz.Media, c1, list);	    break;	case 21: // '\025'	case 24: // '\030'	case 25: // '\031'	case 26: // '\032'	    OpPalabras.alargaUltimaVocal(stringbuffer1);	    s = OpPalabras.acortaUltimaVocal(s);	    Contraccion c2 = Contraccion.sumaAcentuada;	    A(a, Aspecto.Futuro, stringbuffer1.toString(), s, 1, Voz.Activa, Voz.Pasiva, flag, c2, list);	    break;	case 51: // '3'	case 52: // '4'	case 53: // '5'	case 54: // '6'	case 55: // '7'	case 56: // '8'	case 57: // '9'	case 58: // ':'	case 59: // ';'	case 60: // '<'	case 61: // '='	case 62: // '>'	case 63: // '?'	case 64: // '@'	case 65: // 'A'	case 66: // 'temaComido'	case 67: // 'C'	case 68: // 'D'	case 79: // 'O'	case 80: // 'P'	case 91: // '['	case 92: // '\\'	case 93: // ']'	case 94: // '^'	    Contraccion c3 = Contraccion.consonantica;	    if (stringbuffer1.charAt(stringbuffer1.length() - 1) == '\u03B6') {		stringbuffer1.setCharAt(stringbuffer1.length() - 1, '\u03B4');	    }	    if (OpPalabras.right(stringbuffer1.toString(), 2) == "\u03C0\u03C4") {		stringbuffer1.deleteCharAt(stringbuffer1.length() - 1);	    }	    A(a, Aspecto.Futuro, stringbuffer1.toString(), 1, Voz.Activa, Voz.Pasiva, flag, c3, list);	    break;	}    }    private void conjugaConfectivo(OcurrenciaInfinitivo ocInf, VerboBean verboBean, List<String> list) {	StringBuffer stringbuffer = new StringBuffer(OpPalabras.strBetaACompleto(verboBean.getVerbo()));	OpPalabras.desacentuar(stringbuffer);	StringBuffer stringbuffer1 = new StringBuffer();	Voz z;	if (TiposVerbo.esDeponente(verboBean.getTipoVerbo())) {	    z = Voz.Media;	} else {	    z = Voz.Activa;	}	stringbuffer1.append(stringbuffer);	verbos.extraeTemaDadaCanonica(stringbuffer1, verboBean.getTipoVerbo(), Aspecto.Confectivo);	switch (verboBean.getTipoVerbo()) {	case 22: // '\026'	case 23: // '\027'	case 27: // '\033'	case 28: // '\034'	case 29: // '\035'	case 30: // '\036'	case 31: // '\037'	case 32: // ' '	case 33: // '!'	case 34: // '"'	case 35: // '#'	case 36: // '$'	case 37: // '%'	case 38: // '&'	case 39: // '\''	case 40: // '('	case 41: // ')'	case 42: // '*'	case 43: // '+'	case 44: // ','	case 69: // 'E'	case 70: // 'F'	case 71: // 'G'	case 72: // 'H'	case 73: // 'I'	case 74: // 'J'	case 75: // 'K'	case 76: // 'L'	case 77: // 'M'	case 78: // 'N'	case 81: // 'Q'	case 82: // 'R'	case 83: // 'S'	case 84: // 'T'	case 85: // 'U'	case 86: // 'V'	case 87: // 'W'	case 88: // 'X'	case 89: // 'Y'	case 90: // 'Z'	default:	    break;	case 21: // '\025'	case 24: // '\030'	case 25: // '\031'	case 26: // '\032'	    OpPalabras.alargaUltimaVocal(stringbuffer1);	    stringbuffer1 = new StringBuffer(OpPalabras.desacentuar(stringbuffer1.toString()));	    String s = OpPalabras.acortaUltimaVocal(stringbuffer1.toString());	    A(ocInf, Aspecto.Confectivo, stringbuffer1.toString(), s, 1, Voz.Activa, Voz.Pasiva, z == Voz.Media, Contraccion.sumaAcentuada, list);	    break;	case 45: // '-'	case 46: // '.'	case 47: // '/'	case 48: // '0'	case 49: // '1'	case 50: // '2'	    A(ocInf, Aspecto.Confectivo, stringbuffer1.toString(), 1, Voz.Activa, Voz.Pasiva, z == Voz.Media, Contraccion.sumaAcentuada, list);	    break;	case 51: // '3'	case 52: // '4'	case 53: // '5'	case 54: // '6'	case 55: // '7'	case 56: // '8'	case 57: // '9'	case 58: // ':'	case 59: // ';'	case 60: // '<'	case 61: // '='	case 62: // '>'	case 63: // '?'	case 64: // '@'	case 65: // 'A'	case 66: // 'temaComido'	case 67: // 'C'	case 68: // 'D'	case 79: // 'O'	case 80: // 'P'	case 91: // '['	case 92: // '\\'	case 93: // ']'	case 94: // '^'	    if (stringbuffer1.charAt(stringbuffer1.length() - 1) == '\u03B6') {		stringbuffer1.setCharAt(stringbuffer1.length() - 1, '\u03B4');	    }	    if (OpPalabras.right(stringbuffer1.toString(), 2) == "\u03C0\u03C4") {		stringbuffer1 = new StringBuffer(OpPalabras.left(stringbuffer1.toString(), stringbuffer1.length() - 1));	    }	    A(ocInf, Aspecto.Confectivo, stringbuffer1.toString(), 1, Voz.Activa, Voz.Pasiva, z == Voz.Media, Contraccion.consonantica, list);	    break;	}    }    private void conjugaPerfectivo(OcurrenciaInfinitivo a, VerboBean h1, List<String> list) {	StringBuffer stringbuffer = new StringBuffer(OpPalabras.strBetaACompleto(h1.getVerbo()));	OpPalabras.desacentuar(stringbuffer);	StringBuffer stringbuffer4 = new StringBuffer();	Voz z;	if (TiposVerbo.esDeponente(h1.getTipoVerbo())) {	    z = Voz.Media;	} else {	    z = Voz.Activa;	}	stringbuffer4.append(stringbuffer);	verbos.extraeTemaDadaCanonica(stringbuffer4, h1.getTipoVerbo(), Aspecto.Perfectivo);	boolean flag = z == Voz.Media;	switch (h1.getTipoVerbo()) {	case 22: // '\026'	case 23: // '\027'	case 27: // '\033'	case 28: // '\034'	case 29: // '\035'	case 30: // '\036'	case 31: // '\037'	case 32: // ' '	case 33: // '!'	case 34: // '"'	case 35: // '#'	case 36: // '$'	case 37: // '%'	case 38: // '&'	case 39: // '\''	case 40: // '('	case 41: // ')'	case 42: // '*'	case 43: // '+'	case 44: // ','	case 69: // 'E'	case 70: // 'F'	case 71: // 'G'	case 72: // 'H'	case 73: // 'I'	case 74: // 'J'	case 75: // 'K'	case 76: // 'L'	case 77: // 'M'	case 78: // 'N'	case 81: // 'Q'	case 82: // 'R'	case 83: // 'S'	case 84: // 'T'	case 85: // 'U'	case 86: // 'V'	case 87: // 'W'	case 88: // 'X'	case 89: // 'Y'	case 90: // 'Z'	default:	    break;	case 21: // '\025'	case 24: // '\030'	case 25: // '\031'	case 26: // '\032'	    OpPalabras.alargaUltimaVocal(stringbuffer4);	    StringBuffer stringbuffer1 = new StringBuffer(OpPalabras.reduplica(stringbuffer4.toString()));	    stringbuffer1 = new StringBuffer(OpPalabras.acortaUltimaVocal(stringbuffer1.toString()));	    A(a, Aspecto.Perfectivo, stringbuffer1.toString(), 1, Voz.Activa, Voz.Media, flag, Contraccion.sumaAcentuada, list);	    break;	case 45: // '-'	case 46: // '.'	case 47: // '/'	case 48: // '0'	case 49: // '1'	case 50: // '2'	    StringBuffer stringbuffer2 = new StringBuffer(OpPalabras.reduplica(stringbuffer4.toString()));	    A(a, Aspecto.Perfectivo, stringbuffer2.toString(), 1, Voz.Activa, Voz.Media, flag, Contraccion.sumaAcentuada, list);	    break;	case 51: // '3'	case 52: // '4'	case 53: // '5'	case 54: // '6'	case 55: // '7'	case 56: // '8'	case 57: // '9'	case 58: // ':'	case 59: // ';'	case 60: // '<'	case 61: // '='	case 62: // '>'	case 63: // '?'	case 64: // '@'	case 65: // 'A'	case 66: // 'temaComido'	case 67: // 'C'	case 68: // 'D'	case 79: // 'O'	case 80: // 'P'	case 91: // '['	case 92: // '\\'	case 93: // ']'	case 94: // '^'	    if (stringbuffer4.charAt(stringbuffer4.length() - 1) == '\u03B6') {		stringbuffer4.setCharAt(stringbuffer4.length() - 1, '\u03B4');	    }	    if (OpPalabras.right(stringbuffer4.toString(), 2) == "\u03C0\u03C4") {		stringbuffer4.deleteCharAt(stringbuffer4.length() - 1);	    }	    if ((OpPalabras.right(stringbuffer4.toString(), 2) == "\u03C3\u03C3")		    | (OpPalabras.right(stringbuffer4.toString(), 2) == "\u03C4\u03C4")) {		stringbuffer4.delete(stringbuffer4.length() - 2, stringbuffer4.length());		stringbuffer4.append('\u03B3');	    }	    StringBuffer stringbuffer3 = new StringBuffer(OpPalabras.reduplica(stringbuffer4.toString()));	    A(a, Aspecto.Perfectivo, stringbuffer3.toString(), 1, Voz.Activa, Voz.Media, flag, Contraccion.consonantica, list);	    break;	}    }    private void pueblaAspecto(Aspecto aspecto, OcurrenciaInfinitivo a, List<IrrVerbo> irrsVerbo, List<IrrInfinitivoBean> irrsInfinitivo, List<String> preps) {	Iterator<IrrVerbo> iterator = irrsVerbo.iterator();	do {	    if (!iterator.hasNext()) {		break;	    }	    IrrVerbo irrVerbo =  iterator.next();	    String s1 = OpPalabras.strBetaACompleto(irrVerbo.getTema());	    if (irrVerbo.isReduplicacion()) {		s1 = OpPalabras.reduplica(s1);	    }	    boolean esPerfecto = irrVerbo.getTiempo() == Tiempo.Perfecto;	    boolean esActivaOMedia = (irrVerbo.getVoz() == Voz.Activa) & (irrVerbo.getVozJuego() == Voz.Media);	    boolean propagaAVoz = irrVerbo.getPropagacion().equals(Propagacion.haciaModoYVoz) || irrVerbo.getPropagacion().equals(Propagacion.haciaLaVoz);	    puebla(a, s1, irrVerbo.getVoz(), ((TiempoOAspecto) (aspecto)), irrVerbo.getFuerte(), irrVerbo.getContraccion(), irrVerbo.getJuego(), irrVerbo.getVozJuego(),		    ((TiempoOAspecto) (irrVerbo.getTiempoJuego())), esPerfecto, preps, irrVerbo.getSubPart());	    if (propagaAVoz && !esActivaOMedia && irrVerbo.getVoz().equals(Voz.Activa)) {		puebla(a, s1, Voz.Media, ((TiempoOAspecto) (aspecto)), irrVerbo.getFuerte(), irrVerbo.getContraccion(), irrVerbo.getJuego(), Voz.Media,			((TiempoOAspecto) (irrVerbo.getTiempoJuego())), esPerfecto, preps, irrVerbo.getSubPart());	    }	} while (true);	pueblaIrrs(a, irrsInfinitivo, aspecto, preps);    }    public void conjugaPorDefecto(OcurrenciaInfinitivo a, VerboBean verboBean, List<String> preps) {	A(a, verboBean, preps);	conjugaFuturo(a, verboBean, preps);	conjugaConfectivo(a, verboBean, preps);	conjugaPerfectivo(a, verboBean, preps);    }    private void pueblaIrrs(OcurrenciaInfinitivo ocInf, List<IrrInfinitivoBean> list, Aspecto aspecto, List<String> preps) {			for (Iterator<IrrInfinitivoBean> iterator = list.iterator(); iterator.hasNext();){	    IrrInfinitivoBean irrInfinitivo = iterator.next();	    String formaCompleta = OpPalabras.strBetaACompleto(irrInfinitivo.getForma());	    ocInf.agregaFormaIndividual(irrInfinitivo.getVoz(), aspecto, irrInfinitivo.getFuerte(), formaCompleta, irrInfinitivo.getSupPart());	    formaCompleta = preposiciones.une(formaCompleta, preps, false);	}    }    private void A(OcurrenciaInfinitivo a, Aspecto k1, String s, int i, Voz z, Voz z1, boolean flag, Contraccion c1, List<String> preps) {	A(a, k1, s, s, i, FuerteDebil.Debil, z, z1, flag, c1, null, false, preps);    }    private void A(OcurrenciaInfinitivo a, Aspecto k1, String s, String s1, int i, Voz z, Voz z1, boolean flag, Contraccion c1, List<String> preps) {	A(a, k1, s, s1, i, FuerteDebil.Debil, z, z1, flag, c1, (Aspecto) null, false, preps);    }    private void A(OcurrenciaInfinitivo ocInfinitivo, Aspecto k1, String s, String s1, int i, FuerteDebil p, Voz z, Voz z1, boolean flag, Contraccion c1, Aspecto k2, boolean flag1,	    List<String> preps) {	for (int l = Voz.getInt(z); l <= Voz.getInt(z1); l++) {	    Voz z2 = Voz.getEnum(l);	    if (flag && z2.equals(Voz.Media)) {		continue;	    }	    Voz z3;	    if (flag && z2.equals(Voz.Activa)) {		z3 = Voz.Media;	    } else {		z3 = z2;	    }	    if (k2 == null) {		k2 = k1;	    }	    String s2 = null;	    if (z2 == Voz.Pasiva) {		s2 = s1;	    } else {		s2 = s;	    }	    puebla(ocInfinitivo, s2, z2, ((TiempoOAspecto) (k1)), p, c1, i, z3, ((TiempoOAspecto) (k2)), flag1, preps, 0);	}    }    private void puebla(OcurrenciaInfinitivo ocInf, String forma, Voz voz, TiempoOAspecto u, FuerteDebil p, Contraccion c1, int i, Voz jvoz, TiempoOAspecto toa, boolean flag, List<String> preps, int l) {	Aspecto aspecto = TransformadorTiempoAspecto.comoAspecto(toa);	Desinencia desinencias[] = manejaDesinenciasInfinitivo.getDesinencias(i, jvoz, aspecto, p);	if (desinencias == null) {	    return;	}	for (int indice = 0; indice < desinencias.length; indice++) {	    String des = desinencias[indice].cadena;	    Infinitivos.Comedor.come(flag, forma, des);	    forma = Infinitivos.Comedor.temaComido;	    des =  Infinitivos.Comedor.desinenciaComida;	    int posicion = desinencias[indice].getPosicion();	    Acento e = desinencias[indice].getTipoAcento();	    if (des.equals("&")) {		ocInf.agregaFormaIndividual(voz, aspecto, p, preposiciones.une(forma, preps, true), l);	    } else {		String s2 = OpPalabras.contraeGenerica(forma, des, c1, posicion, e);		boolean flag1 = posicion == 0 && c1 != Contraccion.vocalica;		s2 = preposiciones.une(s2, preps, flag1);		ocInf.agregaFormaIndividual(voz, aspecto, p, s2, l);	    }	}    }    public void conjuga(OcurrenciaInfinitivo a, VerboBean verboBean, Particularidad partic) {	VerboBean h2 = verboBean;	List<String> preps = null;	if (verboBean.isCompuesto()) {	    VerboSimpleCompuesto h3 = gerenteVerbosCompuestos.seleccionaPorVerboCompuesto(verboBean.getId());	    h2 = gerenteVerbos.seleccionaIndividualSinSignificado(h3.getIdVerboSimple());	    if (verboBean.isCompuesto()) {		preps = gerentePreposicionesEnVerbos.seleccionaPorVerbo(verboBean.getId());		for (int i = 0; i < preps.size(); i++) {		    preps.set(i, OpPalabras.strBetaACompleto((String) preps.get(i)));		}	    }	}	if (!h2.isDibujado() && partic.equals(h2.getParticularidad())) {	    conjugaPorDefecto(a, h2, preps);	}	A(a, h2, partic, preps);	if (verboBean.isCompuesto()) {	    A(a, verboBean, partic, null);	}    }    private void A(OcurrenciaInfinitivo a, VerboBean verboBean, Particularidad partic, List<String> preps) {	List<IrrVerbo> irrsVerbo = gerenteIrrVerbos.seleccionaPorVerboParticParaInfinitivos(verboBean.getId(), partic);	List<IrrInfinitivoBean> irrsInfinitivo = gerenteIrrInfinitivos.seleccionaPorVerbopartic(verboBean.getId(), partic);	List<IrrVerbo> irrsVerboInfectivo = new ArrayList<IrrVerbo>();	List<IrrVerbo> irrsVerboFuturo = new ArrayList<IrrVerbo>();	List<IrrVerbo> irrsVerboConfectivo = new ArrayList<IrrVerbo>();	List<IrrVerbo> irrsVerboPerfectivo = new ArrayList<IrrVerbo>();	List<IrrInfinitivoBean> irrsInfinitivoInfectivo = new ArrayList<IrrInfinitivoBean>();	List<IrrInfinitivoBean> irrsInfinitivoFuturo = new ArrayList<IrrInfinitivoBean>();	List<IrrInfinitivoBean> irrsInfinitivoConfectivo = new ArrayList<IrrInfinitivoBean>();	List<IrrInfinitivoBean> irrsInfinitivoPerfectivo = new ArrayList<IrrInfinitivoBean>();	distribuyeIrregularidades(irrsVerbo, irrsInfinitivo, irrsVerboInfectivo, irrsVerboFuturo, irrsVerboConfectivo, irrsVerboPerfectivo, irrsInfinitivoInfectivo, irrsInfinitivoFuturo, irrsInfinitivoConfectivo, irrsInfinitivoPerfectivo);	//	puebla( irrsVerbo,  irrsInfinitivo, irrsVerboInfectivo, irrsVerboFuturo, irrsVerboConfectivo, irrsVerboPerfectivo, irrsInfinitivoInfectivo, //		irrsInfinitivoFuturo, irrsInfinitivoConfectivo, irrsInfinitivoPerfectivo);	pueblaAspecto(Aspecto.Infectivo, a, irrsVerboInfectivo, irrsInfinitivoInfectivo, preps);	pueblaAspecto(Aspecto.Futuro, a,  irrsVerboFuturo, irrsInfinitivoFuturo, preps);	pueblaAspecto(Aspecto.Confectivo, a, irrsVerboConfectivo, irrsInfinitivoConfectivo, preps);	pueblaAspecto(Aspecto.Perfectivo, a, irrsVerboPerfectivo, irrsInfinitivoPerfectivo, preps);    }//    @SuppressWarnings("unchecked")//    private void puebla(List<IrrVerbo> list, List<IrrInfinitivoBean> list1, List<IrrVerbo> irrsVerboPresente, List<IrrVerbo> irrsVerboFuturo, //	    List<IrrVerbo> irrsVerboAoristo, List<IrrVerbo> irrsVerboPerfecto, //	    List<IrrInfinitivoBean> irrInfinitivoInfectivo, List<IrrInfinitivoBean> irrInfinitivoFuturo,//	    List<IrrInfinitivoBean> irrInfinitivoConfectivo, List<IrrInfinitivoBean> irrInfinitivoPerfectivo) {//	UtilListas.distribuye(list, "tiempo", new Tiempo[] { Tiempo.Presente, Tiempo.Futuro, Tiempo.Aoristo, Tiempo.Perfecto },//		new List[] { irrsVerboPresente, irrsVerboFuturo, irrsVerboAoristo, irrsVerboPerfecto });//	UtilListas.distribuye(list1, "aspecto", new Aspecto[] { Aspecto.Infectivo, Aspecto.Futuro, Aspecto.Confectivo, Aspecto.Perfectivo }, //		new List[] { irrInfinitivoInfectivo, irrInfinitivoFuturo, irrInfinitivoConfectivo, irrInfinitivoPerfectivo });//    }        public void distribuyeIrregularidades(List<IrrVerbo> irrsVerbo, List<IrrInfinitivoBean> irrsInfinitivo,            List<IrrVerbo> irrsVerboInfectivo, List<IrrVerbo> irrsVerboFuturo, List<IrrVerbo> irrsVerboConfectivo, List<IrrVerbo> irrsVerboPerfectivo,            List<IrrInfinitivoBean> irrsInfinitivoInfectivo, List<IrrInfinitivoBean> irrsInfinitivoFuturo,            List<IrrInfinitivoBean> irrsInfinitivoConfectivo, List<IrrInfinitivoBean> irrsInfinitivoPerfectivo) {        for (IrrVerbo irrVerbo : irrsVerbo) {            switch (irrVerbo.getTiempo()) {                case Presente:                case Imperfecto:                    irrsVerboInfectivo.add(irrVerbo);                    break;                case Futuro:                    irrsVerboFuturo.add(irrVerbo);                    break;                case Aoristo:                    irrsVerboConfectivo.add(irrVerbo);                    break;                case Perfecto:                case Pluscuamperfecto:                    irrsVerboPerfectivo.add(irrVerbo);                    break;            }        }        for (IrrInfinitivoBean irrInfinitivo : irrsInfinitivo) {            switch (irrInfinitivo.getAspecto()) {                case Infectivo:                    irrsInfinitivoInfectivo.add(irrInfinitivo);                    break;                case Futuro:                    irrsInfinitivoFuturo.add(irrInfinitivo);                    break;                case Confectivo:                    irrsInfinitivoConfectivo.add(irrInfinitivo);                    break;                case Perfectivo:                    irrsInfinitivoPerfectivo.add(irrInfinitivo);                    break;            }        }    }                   public Verbos getVerbos() {	return verbos;    }    public void setVerbos(Verbos a) {	verbos = a;    }    public GerenteIrrVerbos getGerenteIrrVerbos() {	return gerenteIrrVerbos;    }    public void setGerenteIrrVerbos(GerenteIrrVerbos y1) {	gerenteIrrVerbos = y1;    }    public GerenteIrrInfinitivos getGerenteIrrInfinitivos() {	return gerenteIrrInfinitivos;    }    public void setGerenteIrrInfinitivos(GerenteIrrInfinitivos aa) {	gerenteIrrInfinitivos = aa;    }    public GerenteVerbos getGerenteVerbos() {	return gerenteVerbos;    }    public void setGerenteVerbos(GerenteVerbos p) {	gerenteVerbos = p;    }    public void setManejaDesinenciasInfinitivo(ManejaDesinenciasInfinitivo e) {	manejaDesinenciasInfinitivo = e;    }    public void setGerentePreposicionesEnVerbos(GerentePreposicionesEnVerbos fa) {	gerentePreposicionesEnVerbos = fa;    }    public void setGerenteVerbosCompuestos(GerenteVerbosCompuestos u) {	gerenteVerbosCompuestos = u;    }    public void setPreposiciones(Preposiciones b) {	preposiciones = b;    }}