package com.kalos.flexion;import java.util.EnumMap;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Map;import java.util.Set;import javax.swing.table.DefaultTableModel;import com.kalos.beans.VerboBean;import com.kalos.datos.gerentes.GerenteVerbos;import com.kalos.enumeraciones.Aspecto;import com.kalos.enumeraciones.Caso;import com.kalos.enumeraciones.FuerteDebil;import com.kalos.enumeraciones.Genero;import com.kalos.enumeraciones.GradoComparacion;import com.kalos.enumeraciones.Numero;import com.kalos.enumeraciones.Particularidad;import com.kalos.enumeraciones.Voz;import com.kalos.flexion.declinacion.Declina;import com.kalos.flexion.declinacion.DeclinaAdjetivos;import com.kalos.flexion.declinacion.OcAdjetivo;import com.kalos.flexion.declinacion.OcNominal;import com.kalos.flexion.declinacion.OcParticipio;import com.kalos.flexion.declinacion.Participios;import com.kalos.recursos.CadenasEnum;public class ProveedorDMNominal {    private Participios participios;    private GerenteVerbos gerenteVerbos;    private Declina declina;    private DeclinaAdjetivos declinaAdjetivos;    private UtilidadesTM utilidadesTM;    DefaultTableModel A(Particularidad paramX, OcNominal paramD, boolean paramBoolean) {	DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTIC", "SUBINDICE", "CASO",		"NUMERO", "FORMA" }, 0);	Numero localn1 = Numero.Dual;	if (paramBoolean) {	    localn1 = Numero.Plural;	}	for (int i = 1; i <= Numero.getInt(localn1); i++) {	    Numero localn2 = Numero.getEnum(i);	    for (int j = 1; j <= 5; j++) {		Caso locala = Caso.getEnum(j);		List<String> localList = paramD.getFormas(locala, localn2);		if (localList != null) {		    int k = 0;		    ListIterator<String> localListIterator = localList.listIterator();		    while (localListIterator.hasNext()) {			String str = (String) localListIterator.next();			int m = k;			this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel, new Object[] { paramX, Integer.valueOf(m),				locala, localn2,				new ClaveFlexion("", str, null, null, null, null, null, paramX, m, null, localn2, locala, null) });			k++;		    }		}	    }	}	return localDefaultTableModel;    }    DefaultTableModel A(String paramString, boolean paramBoolean) {	Numero localn1 = Numero.Dual;	if (paramBoolean) {	    localn1 = Numero.Plural;	}	EnumMap<Particularidad, OcNominal> localEnumMap = this.declina.declina(paramString);	DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTIC", "SUBINDICE", "CASO",		"NUMERO", "FORMA" }, 0);	Set<Particularidad> localSet = localEnumMap.keySet();	Iterator<Particularidad> localIterator = localSet.iterator();	while (localIterator.hasNext()) {	    Particularidad localX = localIterator.next();	    OcNominal localD = (OcNominal) localEnumMap.get(localX);	    for (int i = 1; i <= Numero.getInt(localn1); i++) {		Numero localn2 = Numero.getEnum(i);		for (int j = 1; j <= 5; j++) {		    Caso locala = Caso.getEnum(j);		    List<String> localList = localD.getFormas(locala, localn2);		    if (localList != null) {			int k = 0;			ListIterator<String> localListIterator = localList.listIterator();			while (localListIterator.hasNext()) {			    String str = (String) localListIterator.next();			    int m = k;			    this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel, new Object[] {				    localX,				    Integer.valueOf(m),				    locala,				    localn2,				    new ClaveFlexion(paramString, str, null, null, null, null, null, localX, m, null, localn2,					    locala, null) });			    k++;			}		    }		}	    }	}	return localDefaultTableModel;    }    DefaultTableModel B(String paramString, boolean paramBoolean) {	Numero localn1 = Numero.Dual;	if (paramBoolean) {	    localn1 = Numero.Plural;	}	EnumMap<Particularidad, OcAdjetivo> localEnumMap = this.declinaAdjetivos.declina(paramString);	DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTIC", "SUBINDICE", "GRADO",		"GENERO", "CASO", "NUMERO", "FORMA" }, 0);	Set<Particularidad> localSet = localEnumMap.keySet();	Iterator<Particularidad> localIterator = localSet.iterator();	while (localIterator.hasNext()) {	    Particularidad localX = localIterator.next();	    OcAdjetivo localB = localEnumMap.get(localX);	    for (GradoComparacion locali : GradoComparacion.values()) {		for (int k = 1; k <= Numero.getInt(localn1); k++) {		    Numero localn2 = Numero.getEnum(k);		    for (Caso locala : Caso.values()) {			for (Genero localA : Genero.values()) {			    List<String> localList = localB.getForm(locali, localA, locala, localn2);			    if (localList != null) {				int i3 = 0;				ListIterator<String> localListIterator = localList.listIterator();				while (localListIterator.hasNext()) {				    String str = (String) localListIterator.next();				    int i4 = i3;				    this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel,					    new Object[] {						    localX,						    Integer.valueOf(i4),						    locali,						    localA,						    locala,						    localn2,						    new ClaveFlexion(paramString, str, null, null, null, null, null, localX, i4,							    localA, localn2, locala, locali) });				    i3++;				}			    }			}		    }		}	    }	}	return localDefaultTableModel;    }    DefaultTableModel A(String paramString1, String paramString2, int paramInt, boolean paramBoolean) {	DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTIC", "ASPECTO", "FUERTE",		"VOZ", "GENERO", "SUBPART", "CASO", "FORMA", "TIPO" }, 0);	Map<Particularidad, OcParticipio> localMap = this.participios.flexiona(paramString1);	Iterator<Particularidad> localIterator = localMap.keySet().iterator();	while (localIterator.hasNext()) {	    Particularidad localX = localIterator.next();	    OcParticipio localF = localMap.get(localX);	    for (Voz localZ : Voz.values()) {		for (Aspecto localk : Aspecto.values()) {		    for (FuerteDebil localP : FuerteDebil.values()) {			for (Genero localA : Genero.getMFN()) {			    int i4 = localF.cantidadDeFormas(localZ, localk, localP, localA, Caso.Nominativo, Numero.Singular);			    int i5 = localF.cantidadDeFormas(localZ, localk, localP, localA, Caso.Genitivo, Numero.Singular);			    int i6 = Math.max(i4, i5);			    for (int i7 = 0; i7 < i6; i7++) {				String str1 = localF.getFormaIndividual(localZ, localk, localP, localA, Caso.Nominativo, Numero.Singular, i7);				String str2 = localF.getFormaIndividual(localZ, localk, localP, localA, Caso.Genitivo, Numero.Singular, i7);				Integer localInteger = localF					.getTipoSustantivo(localZ, localk, localP, localA, Numero.Singular, i7);				this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel, new Object[] {					localX,					localk,					localP,					localZ,					localA,					Integer.valueOf(i7),					Caso.Nominativo,					new ClaveFlexion(paramString1, str1, localZ, null, localk, localP, null, localX, i7,						localA, Numero.Singular, Caso.Nominativo, null), localInteger });				this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel, new Object[] {					localX,					localk,					localP,					localZ,					localA,					Integer.valueOf(i7),					Numero.Dual,					new ClaveFlexion(paramString1, str2, localZ, null, localk, localP, null, localX, i7,						localA, Numero.Singular, Caso.Genitivo, null), localInteger });			    }			}		    }		}	    }	}	return localDefaultTableModel;    }    DefaultTableModel A(String paramString, boolean paramBoolean1, boolean paramBoolean2) {	DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTIC", "ASPECTO", "FUERTE",		"VOZ", "GENERO", "NUMERO", "CASO", "SUBPART", "FORMA" }, 0);	Map<Particularidad, OcParticipio> localMap = this.participios.flexiona(paramString);	Numero localn1 = Numero.Dual;	if (paramBoolean2) {	    localn1 = Numero.Plural;	}	Iterator<Particularidad> localIterator = localMap.keySet().iterator();	while (localIterator.hasNext()) {	    Particularidad localX =  localIterator.next();	    OcParticipio localF = localMap.get(localX);	    for (Voz localZ : Voz.values()) {		for (Aspecto localk : Aspecto.values()) {		    for (FuerteDebil localP : FuerteDebil.values()) {			for (Genero localA : Genero.getMFN()) {			    for (int i4 = 1; i4 <= Numero.getInt(localn1); i4++) {				Numero localn2 = Numero.getEnum(i4);				for (Caso locala : Caso.values()) {				    if ((!paramBoolean1) || (!locala.equals(Genero.Masculino))) {					int i7 = localF.cantidadDeFormas(localZ, localk, localP, localA, locala,						localn2);					for (int i8 = 0; i8 < i7; i8++) {					    String str = localF.getFormaIndividual(localZ, localk, localP, localA,						    locala, localn2, i8);					    this.utilidadesTM.agregaFilaComoAray(localDefaultTableModel,						    new Object[] {							    localX,							    localk,							    localP,							    localZ,							    localA,							    localn2,							    locala,							    Integer.valueOf(i8),							    new ClaveFlexion(paramString, str, localZ, null, localk, localP, null,								    localX, i8, localA, localn2, locala, null) });					}				    }				}			    }			}		    }		}	    }	}	return localDefaultTableModel;    }    DefaultTableModel A(String paramString) {	VerboBean localh = this.gerenteVerbos.seleccionaUno(paramString);	int i;	if (localh.isDibujado()) {	    i = -1;	} else {	    i = localh.getTipoVerbo();	}	DefaultTableModel localDefaultTableModel = A(paramString, localh.getVerbo(), i, false);	return localDefaultTableModel;    }    DefaultTableModel B(String paramString) {	VerboBean localh = this.gerenteVerbos.seleccionaUno(paramString);	int i;	if (localh.isDibujado()) {	    i = -1;	} else {	    i = localh.getTipoVerbo();	}	DefaultTableModel localDefaultTableModel = A(paramString, localh.getVerbo(), i, false);	return localDefaultTableModel;    }    DefaultTableModel A(OcNominal paramD) {	DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "CASO", "SINGULAR", "PLURAL",		"DUAL" }, 0);	for (int i = 1; i <= 5; i++) {	    Caso locala = Caso.getEnum(i);	    int j = paramD.cantidadDeFormasDelCaso(locala);	    for (int k = 0; k < j; k++) {		localDefaultTableModel.addRow(new Object[] { CadenasEnum.getCadena(locala),			paramD.getFormaIndividual(locala, Numero.Singular , k), paramD.getFormaIndividual(locala, Numero.Plural, k),			paramD.getFormaIndividual(locala, Numero.Dual, k) });	    }	}	return localDefaultTableModel;    }    DefaultTableModel A(Map<Particularidad, OcAdjetivo> paramMap) {	DefaultTableModel localDefaultTableModel = new DefaultTableModel(new String[] { "PARTICULARIDAD",		"GRADO_COMPARACION", "SUBINDICE", "NUMERO", "CASO", "GENERO", "FORMA" }, 0);	Set<Particularidad> localSet1 = paramMap.keySet();	Iterator<Particularidad> localIterator1 = localSet1.iterator();	while (localIterator1.hasNext()) {	    Particularidad localX = localIterator1.next();	    OcAdjetivo localB = paramMap.get(localX);	    Set<GradoComparacion> localSet2 = localB.getGrados();	    Iterator<GradoComparacion> localIterator2 = localSet2.iterator();	    while (localIterator2.hasNext()) {		GradoComparacion locali = localIterator2.next();		Set<Genero> localSet3 = localB.getGeneros(locali);		Iterator<Genero> localIterator3 = localSet3.iterator();		while (localIterator3.hasNext()) {		    Genero localA = localIterator3.next();		    OcNominal localD = localB.getOcurrenciaNominal(locali, localA);		    for (int i = 1; i <= 3; i++) {			Numero localn = Numero.getEnum(i);			for (int j = 1; j <= 5; j++) {			    Caso locala = Caso.getEnum(j);			    int k = localD.cantidadDeFormas(locala, localn);			    for (int m = 0; m < k; m++) {				localDefaultTableModel.addRow(new Object[] { localX, locali, Integer.valueOf(m),					localn, locala, localA, localD.getFormaIndividual(locala, localn, m) });			    }			}		    }		}	    }	}	return localDefaultTableModel;    }    public Participios getParticipios() {	return this.participios;    }    public void setParticipios(Participios paramI) {	this.participios = paramI;    }    public GerenteVerbos getGerenteVerbos() {	return this.gerenteVerbos;    }    public void setGerenteVerbos(GerenteVerbos paramP) {	this.gerenteVerbos = paramP;    }    public Declina getDeclina() {	return this.declina;    }    public void setDeclina(Declina paramE) {	this.declina = paramE;    }    public void setUtilidadesTM(UtilidadesTM paramC) {	this.utilidadesTM = paramC;    }    public void setDeclinaAdjetivos(DeclinaAdjetivos paramA) {	this.declinaAdjetivos = paramA;    }}