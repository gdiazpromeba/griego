// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package com.kalos.datos.dao;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Types;import java.util.List;import javax.sql.DataSource;import com.kalos.beans.AdjetivoComoNominalBean;import com.kalos.enumeraciones.Genero;import com.kalos.enumeraciones.GradoComparacion;import com.kalos.enumeraciones.Particularidad;import org.springframework.jdbc.core.SqlParameter;import org.springframework.jdbc.core.support.JdbcDaoSupport;import org.springframework.jdbc.object.MappingSqlQuery;import org.springframework.jdbc.object.SqlUpdate;// Referenced classes of package kalos.E.C://            DA@SuppressWarnings("unchecked")public class AdjetivosComoNominalesDAOImpl extends JdbcDaoSupport implements		AdjetivosComoNominalesDAO {	private class Borrado extends SqlUpdate {		public Borrado(DataSource datasource) {			super(datasource, BORRADO_SQL);			declareParameter(new SqlParameter(Types.CHAR));		}	}	class BorradoTodo extends SqlUpdate {		public BorradoTodo(DataSource datasource) {			super(datasource, BORRADO_TODO_SQL);		}	}	class Insercion extends SqlUpdate {		public Insercion(DataSource datasource) {			super(datasource, INSERCION_SQL);			declareParameter(new SqlParameter(Types.CHAR));			declareParameter(new SqlParameter(Types.CHAR));			declareParameter(new SqlParameter(Types.VARCHAR));			declareParameter(new SqlParameter(Types.VARCHAR));			declareParameter(new SqlParameter(Types.INTEGER));			declareParameter(new SqlParameter(Types.CHAR));			declareParameter(new SqlParameter(Types.INTEGER));			declareParameter(new SqlParameter(Types.CHAR));		}	}	class SeleccionPorNominativo extends SeleccionAbstracta {		public SeleccionPorNominativo(DataSource datasource) {			super(datasource, SELECCION_POR_NOMINATIVO_SQL);			declareParameter(new SqlParameter(Types.VARCHAR));			declareParameter(new SqlParameter(Types.VARCHAR));		}	}	class SeleccionPorGenitivo extends SeleccionAbstracta {		public SeleccionPorGenitivo(DataSource datasource) {			super(datasource, SELECCION_POR_GENITIVO_SQL);			declareParameter(new SqlParameter(Types.VARCHAR));			declareParameter(new SqlParameter(Types.VARCHAR));		}	}	class Seleccion extends SeleccionAbstracta {		public Seleccion(DataSource datasource, String s) {			super(datasource, s);		}	}	abstract class SeleccionAbstracta extends MappingSqlQuery {		protected Object mapRow(ResultSet resultset, int j) throws SQLException {			AdjetivoComoNominalBean x1 = new AdjetivoComoNominalBean();			x1.setIdAdjetivo(resultset.getString("ADJETIVO_ID"));			x1.setNominativo(resultset.getString("NOMINATIVO"));			x1.setGenitivo(resultset.getString("GENITIVO"));			x1.setGenero(Genero.getEnum(resultset.getString("GENERO")));			x1.setTipoNominal(resultset.getInt("TIPO_NOMINAL"));			x1.setParticularidad(Particularidad.getEnum(resultset					.getString("PARTIC")));			x1.setSubindice(resultset.getInt("SUBINDICE"));			x1.setGrado(GradoComparacion.getEnum(resultset					.getString("GRADO_COMPARACION")));			return x1;		}		public SeleccionAbstracta(DataSource datasource, String sql) {			super(datasource, sql);		}	}	private void puebla() {		StringBuffer stringbuffer = new StringBuffer(200);		stringbuffer = new StringBuffer(200);		stringbuffer.append("SELECT  \n");		stringbuffer.append("  ACN.ADJETIVO_ID,   \n");		stringbuffer.append("  ACN.GENERO,   \n");		stringbuffer.append("  ACN.NOMINATIVO,   \n");		stringbuffer.append("  ACN.GENITIVO,   \n");		stringbuffer.append("  ACN.TIPO_NOMINAL,   \n");		stringbuffer.append("  ACN.PARTIC,   \n");		stringbuffer.append("  ACN.SUBINDICE,   \n");		stringbuffer.append("  ACN.GRADO_COMPARACION   \n");		stringbuffer.append("FROM  \n");		stringbuffer.append("    ADJETIVOS_COMO_NOMINALES ACN  \n");		stringbuffer.append("WHERE  \n");		stringbuffer.append("    ACN.NOMINATIVO =?   \n");		stringbuffer.append("    OR ACN.NOMINATIVO = CONCAT('*', ?)   \n");		SELECCION_POR_NOMINATIVO_SQL = stringbuffer.toString();		stringbuffer = new StringBuffer(200);		stringbuffer.append("SELECT  \n");		stringbuffer.append("  ACN.ADJETIVO_ID,   \n");		stringbuffer.append("  ACN.GENERO,   \n");		stringbuffer.append("  ACN.NOMINATIVO,   \n");		stringbuffer.append("  ACN.GENITIVO,   \n");		stringbuffer.append("  ACN.TIPO_NOMINAL,   \n");		stringbuffer.append("  ACN.PARTIC,   \n");		stringbuffer.append("  ACN.SUBINDICE,   \n");		stringbuffer.append("  ACN.GRADO_COMPARACION   \n");		stringbuffer.append("FROM  \n");		stringbuffer.append("    ADJETIVOS_COMO_NOMINALES ACN  \n");		stringbuffer.append("WHERE  \n");		stringbuffer.append("    ACN.TIPO_NOMINAL IN (?)   \n");		SELECCION_POR_TIPO_NOMINAL_SQL = stringbuffer.toString();		stringbuffer = new StringBuffer(200);		stringbuffer.append("SELECT  \n");		stringbuffer.append("  ACN.ADJETIVO_ID,   \n");		stringbuffer.append("  ACN.GENERO,   \n");		stringbuffer.append("  ACN.NOMINATIVO,   \n");		stringbuffer.append("  ACN.GENITIVO,   \n");		stringbuffer.append("  ACN.TIPO_NOMINAL,   \n");		stringbuffer.append("  ACN.PARTIC,   \n");		stringbuffer.append("  ACN.SUBINDICE,   \n");		stringbuffer.append("  ACN.GRADO_COMPARACION   \n");		stringbuffer.append("FROM  \n");		stringbuffer.append("    ADJETIVOS_COMO_NOMINALES ACN  \n");		stringbuffer.append("WHERE  \n");		stringbuffer.append("    ACN.GENITIVO =?   \n");		stringbuffer.append("    OR ACN.GENITIVO = CONCAT('*', ?)   \n");		SELECCION_POR_GENITIVO_SQL = stringbuffer.toString();		stringbuffer = new StringBuffer(200);		stringbuffer.append("INSERT INTO ADJETIVOS_COMO_NOMINALES (  \n");		stringbuffer.append("  ADJETIVO_ID,   \n");		stringbuffer.append("  GENERO,   \n");		stringbuffer.append("  NOMINATIVO,   \n");		stringbuffer.append("  GENITIVO,   \n");		stringbuffer.append("  TIPO_NOMINAL,     \n");		stringbuffer.append("  PARTIC,     \n");		stringbuffer.append("  SUBINDICE,     \n");		stringbuffer.append("  GRADO_COMPARACION   \n");		stringbuffer.append(")VALUES  \n");		stringbuffer.append(" (?,?,?,?,?,?,?,?) \n");		INSERCION_SQL = stringbuffer.toString();		stringbuffer = new StringBuffer(200);		stringbuffer.append("DELETE FROM ADJETIVOS_COMO_NOMINALES    \n");		BORRADO_TODO_SQL = stringbuffer.toString();		stringbuffer = new StringBuffer(200);		stringbuffer.append("DELETE FROM ADJETIVOS_COMO_NOMINALES    \n");		stringbuffer.append("WHERE ADJETIVO_ID=?    \n");		BORRADO_SQL = stringbuffer.toString();	}	public void setAutocommit(boolean flag) {		try {			getDataSource().getConnection().setAutoCommit(flag);		} catch (Exception exception) {			throw new RuntimeException("error poblando el valor autocommit");		}	}	public void commit() {		try {			getDataSource().getConnection().commit();		} catch (Exception exception) {			throw new RuntimeException("error ejecutando commit");		}	}	@SuppressWarnings("unchecked")	public List seleccionaPorTipos(Integer ainteger[]) {		StringBuffer stringbuffer = new StringBuffer();		Integer ainteger1[] = ainteger;		int j = ainteger1.length;		for (int k = 0; k < j; k++) {			Integer integer = ainteger1[k];			stringbuffer.append((new StringBuilder())					.append(integer.intValue()).append(",").toString());		}		if (stringbuffer.length() > 0)			stringbuffer.deleteCharAt(stringbuffer.length() - 1);		String s = SELECCION_POR_TIPO_NOMINAL_SQL.replaceFirst("\\?",				stringbuffer.toString());		Seleccion _la = new Seleccion(getDataSource(), s);		List list = _la.execute();		return list;	}	public List seleccionaPorNominativoParaAM(String s) {		List list = seleccionPorNominativo.execute(new String[] { s, s });		return list;	}	public List seleccionaPorGenitivoParaAM(String s) {		List list = seleccionPorGenitivo.execute(new String[] { s, s });		return list;	}	public void inserta(AdjetivoComoNominalBean x1) {		insercion.update(new Object[] {				x1.getIdAdjetivo(),				com.kalos.enumeraciones.Genero.getLetra(x1.getGenero()),				x1.getNominativo(),				x1.getGenitivo(),				Integer.valueOf(x1.getTipoNominal()),				com.kalos.enumeraciones.Particularidad.getString(x1						.getParticularidad()),				Integer.valueOf(x1.getSubindice()),				com.kalos.enumeraciones.GradoComparacion.getLetra(x1.getGrado()) });	}	public void borraTodo() {		borradoTodo.update();	}	public void borraAdjetivo(String s) {		borrado.update(new Object[] { s });	}	public void initDao() throws Exception {		super.initDao();		puebla();		insercion = new Insercion(getDataSource());		seleccionPorNominativo = new SeleccionPorNominativo(getDataSource());		seleccionPorGenitivo = new SeleccionPorGenitivo(getDataSource());		borrado = new Borrado(getDataSource());		borradoTodo = new BorradoTodo(getDataSource());	}	private static String SELECCION_POR_NOMINATIVO_SQL;	private static String SELECCION_POR_GENITIVO_SQL;	private static String SELECCION_POR_TIPO_NOMINAL_SQL;	private static String INSERCION_SQL;	private static String BORRADO_TODO_SQL;	private static String BORRADO_SQL;	private Insercion insercion;	private SeleccionPorNominativo seleccionPorNominativo;	private SeleccionPorGenitivo seleccionPorGenitivo;	private Borrado borrado;	private BorradoTodo borradoTodo;}