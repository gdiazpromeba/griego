// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package com.kalos.datos.dao;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import javax.sql.DataSource;import com.kalos.beans.TipoSustantivo;import com.kalos.enumeraciones.Genero;import com.kalos.enumeraciones.TipoPalabra;import org.springframework.jdbc.core.SqlParameter;import org.springframework.jdbc.core.support.JdbcDaoSupport;import org.springframework.jdbc.object.MappingSqlQuery;// Referenced classes of package kalos.E.C://            Opublic class TiposSustantivoDAOImpl extends JdbcDaoSupport implements TiposSustantivoDAO {    class SeleccionTodos extends SeleccionAbstracta {	public SeleccionTodos(DataSource datasource) {	    super(datasource, SEL_TODOS_SQL);	    //declareParameter(new SqlParameter(4));	}    }    class ObtencionPorId extends SeleccionAbstracta {	public ObtencionPorId(DataSource datasource) {	    super(datasource, OBTIENE_POR_ID_SQL);	}    }    class ObtencionPorNumero extends SeleccionAbstracta {	public ObtencionPorNumero(DataSource datasource) {	    super(datasource, OBTIENE_POR_NRO_SQL);	}    }    abstract class SeleccionAbstracta extends MappingSqlQuery {	protected Object mapRow(ResultSet resultset, int i) throws SQLException {	    TipoSustantivo o1 = new TipoSustantivo();	    o1.setId(resultset.getString("TIPO_SUSTANTIVO_ID"));	    o1.setPadreId(resultset.getString("PADRE_ID"));	    o1.setValorEntero(resultset.getInt("TIPO_SUSTANTIVO"));	    o1.setDesClave(resultset.getString("TIPO_SUST_DES_CLAVE"));	    Object obj = resultset.getObject("GENERO_SUGERIDO");	    o1.setGeneroSugerido(obj != null ? Genero.getEnum((String) obj) : null);	    o1.setPluralizado(resultset.getInt("PLURALIZADO") == 1);	    o1.setSoloSingular(resultset.getInt("SOLO_SINGULAR") == 1);	    //TODO:  el tipoPalabra es entero en la bas de datos, pero	    //acá pide una enumeración TipoPalabra. No sé bien por qué, ni para qué sirve esto//	    Integer obj1 = o1.setTipoPalabra(TipoPalabra.get resultset.getInt("TIPO_PALABRA"));//	    o1.setTipoPalabra(obj1 == null ? null : TipoPalabra.getEnum((Integer) obj1));	    return o1;	}	public SeleccionAbstracta(DataSource datasource, String s) {	    super(datasource, s);	}    }    private void puebla() {	StringBuffer stringbuffer = new StringBuffer(200);	stringbuffer.append("SELECT   \n");	stringbuffer.append("  TIS.TIPO_SUSTANTIVO_ID,   \n");	stringbuffer.append("  TIS.TIPO_SUSTANTIVO,   \n");	stringbuffer.append("  TIS.PADRE_ID,           \n");	stringbuffer.append("  TIS.GENERO_SUGERIDO,           \n");	stringbuffer.append("  TIS.PLURALIZADO,           \n");	stringbuffer.append("  TIS.SOLO_SINGULAR,           \n");	stringbuffer.append("  TIS.TIPO_PALABRA,           \n");	stringbuffer.append("  TIS.TIPO_SUST_DES_CLAVE    \n");	stringbuffer.append("FROM        \n");	stringbuffer.append("  TIPOS_SUSTANTIVO TIS       \n");	SEL_TODOS_SQL = stringbuffer.toString();	stringbuffer = new StringBuffer(200);	stringbuffer.append("SELECT   \n");	stringbuffer.append("  TIS.TIPO_SUSTANTIVO_ID,   \n");	stringbuffer.append("  TIS.TIPO_SUSTANTIVO,   \n");	stringbuffer.append("  TIS.PADRE_ID,           \n");	stringbuffer.append("  TIS.GENERO_SUGERIDO,           \n");	stringbuffer.append("  TIS.PLURALIZADO,           \n");	stringbuffer.append("  TIS.SOLO_SINGULAR,           \n");	stringbuffer.append("  TIS.TIPO_PALABRA,           \n");	stringbuffer.append("  TIS.TIPO_SUST_DES_CLAVE    \n");	stringbuffer.append("FROM        \n");	stringbuffer.append("  TIPOS_SUSTANTIVO TIS       \n");	stringbuffer.append("WHERE        \n");	stringbuffer.append("  TIS.TIPO_SUSTANTIVO_ID=?       \n");	OBTIENE_POR_ID_SQL = stringbuffer.toString();	stringbuffer = new StringBuffer(200);	stringbuffer.append("SELECT   \n");	stringbuffer.append("  TIS.TIPO_SUSTANTIVO_ID,   \n");	stringbuffer.append("  TIS.TIPO_SUSTANTIVO,   \n");	stringbuffer.append("  TIS.PADRE_ID,           \n");	stringbuffer.append("  TIS.GENERO_SUGERIDO,           \n");	stringbuffer.append("  TIS.PLURALIZADO,           \n");	stringbuffer.append("  TIS.SOLO_SINGULAR,           \n");	stringbuffer.append("  TIS.TIPO_PALABRA,           \n");	stringbuffer.append("  TIS.TIPO_SUST_DES_CLAVE    \n");	stringbuffer.append("FROM        \n");	stringbuffer.append("  TIPOS_SUSTANTIVO TIS       \n");	stringbuffer.append("WHERE        \n");	stringbuffer.append("  TIS.TIPO_SUSTANTIVO=?       \n");	OBTIENE_POR_NRO_SQL = stringbuffer.toString();    }    @SuppressWarnings("unchecked")    public List<TipoSustantivo> getTodos() {	return selTodos.execute();    }    public TipoSustantivo seleccionaIndividual(int i) {	TipoSustantivo o1 = (TipoSustantivo) obtencionPorNro.findObject(i);	return o1;    }    public TipoSustantivo seleccionaIndividual(String i) {	TipoSustantivo o1 = (TipoSustantivo) obtencionPorId.findObject(i);	return o1;    }    public void initDao() throws Exception {	super.initDao();	puebla();	selTodos = new SeleccionTodos(getDataSource());	obtencionPorId = new ObtencionPorId(getDataSource());	obtencionPorNro = new ObtencionPorNumero(getDataSource());    }    private static String SEL_TODOS_SQL;    private static String OBTIENE_POR_ID_SQL;    private static String OBTIENE_POR_NRO_SQL;    private SeleccionTodos selTodos;    private ObtencionPorId obtencionPorId;    private ObtencionPorNumero obtencionPorNro;}