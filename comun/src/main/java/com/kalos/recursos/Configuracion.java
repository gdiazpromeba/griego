// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package com.kalos.recursos;import java.awt.Font;import java.io.*;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.dom4j.*;import org.dom4j.io.*;public class Configuracion{    public static boolean isDebug(){        return debug;    }    public static int getMaximoFormasAM(){        return valorMaximoFormasAM;    }    public static String getUltimoIdioma(){        return valorUltimoIdioma;    }    public static String getIdiomaSignificados(){        return valorIdiomaSignificados;    }    public static int getTamañoDiccionario(){        return Integer.parseInt(valorFont.attributeValue("sizeDiccionario"));    }    public static int getTamañoAM(){        return Integer.parseInt(valorFont.attributeValue("sizeAM"));    }    public static int getTamañoFlexion(){        return Integer.parseInt(valorFont.attributeValue("sizeFlexion"));    }    public static void setTamañoDiccionario(int i){        valorFont.attribute("sizeDiccionario").setValue(Integer.toString(i));        reescribeIni();    }    public static void setTamañoAM(int i){        valorFont.attribute("sizeAM").setValue(Integer.toString(i));        reescribeIni();    }    public static void setTamañooFlexion(int i){        valorFont.attribute("sizeFlexion").setValue(Integer.toString(i));        reescribeIni();    }    public static void setUltimoIdioma(String s){        elemUltimoIdioma.attribute("valor").setValue(s);        valorUltimoIdioma = elemUltimoIdioma.attributeValue("valor");    }    public static void setIdiomaSignificados(String s){        elemIdiomaSignificados.attribute("valor").setValue(s);        valorIdiomaSignificados = elemIdiomaSignificados.attributeValue("valor");    }    public static void setUltimoTeclado(String s){        elemUltimoTeclado.setText(s);        ultimoTeclado = elemUltimoTeclado.getText();    }    public static String getUltimoTeclado(){        return ultimoTeclado;    }    public static void reescribeIni(){        try{            File file = new File(System.getProperty("user.home") + File.separator + "kalosini.xml");            FileOutputStream fileoutputstream = new FileOutputStream(file);            OutputFormat outputformat = OutputFormat.createPrettyPrint();            outputformat.setEncoding("UTF-8");            XMLWriter xmlwriter = new XMLWriter(fileoutputstream, outputformat);            xmlwriter.write(documento);            xmlwriter.flush();        } catch (IOException ioexception){            System.out.println("error re-writing kalosini.xml");            ioexception.printStackTrace();        }    }    public static boolean getMuestraMakrones(){        return muestraMakrones;    }    public static void setMuestraMakrones(boolean flag){        muestraMakrones = flag;        elemMuestraMakrones.setText(flag ? "true" : "false");    }    public static String getVersionNumero(){        return valorVersion;    }    public static void setVersionNumero(String s){        valorVersion = s;        elemVersion.setText(s);    }    public static String getAnclaRecursos(){        return valorClaseRecursos;    }    public static String getComandoAbre(){        return comandoAbre;    }    public static String getParmetrosAbre(){        return parametrosAbre;    }    public static String getComandoCierra(){        return comandoCierra;    }    public static String getParmetrosCierra(){        return parametrosCierra;    }    public static long getVecesVentana(){        return vecesVentana;    }    public static void aumentaVecesVentana(){        vecesVentana++;    }    public static Font getFont(){        return font;    }    public static void setFont(Font font){        Configuracion.font = font;        valorFont.attribute("name").setValue(font.getName());        valorFont.attribute("size").setValue(Integer.toString(font.getSize()));        reescribeIni();    }    public static String getNombre(){        String s = elemRegistrado.attribute("nombre").getValue();        if (StringUtils.isEmpty(s))            return null;        else            return s;    }    public static void setNombre(String s){        if (s == null)            elemRegistrado.attribute("nombre").setValue("");        else            elemRegistrado.attribute("nombre").setValue(s);        reescribeIni();    }    private static Logger logger;    private static Font font;    private static Element elemento;    private static Document documento;    private static boolean debug;    private static String valorUltimoIdioma;    private static String ultimoTeclado;    private static String valorIdiomaSignificados;    private static String valorVersion;    static Element valorFont;    static Element elemUltimoIdioma;    static Element elemUltimoTeclado;    static Element elemVersion;    static Element elemIdiomaSignificados;    private static boolean muestraMakrones;    static Element elemMuestraMakrones;    static Element elemClaseRecursos;    private static String valorClaseRecursos;    private static String comandoAbre;    private static String comandoCierra;    private static String parametrosAbre;    private static String parametrosCierra;    private static long vecesVentana = 0L;    private static Element elemRegistrado;    private static Element elemAnalisiMorfologico;    private static int valorMaximoFormasAM;    static    {        logger = Logger.getLogger(com.kalos.recursos.Configuracion.class.getName());        try{            String home = System.getProperty("user.home");            File file = new File(home + "/kalosini.xml");            if (file.exists()){                System.out.println("el archivo de inicialización existe");            }else{                System.out.println("el archivo de inicialización no existe");            }            FileInputStream fileinputstream = new FileInputStream(file);            SAXReader saxreader = new SAXReader();            documento = saxreader.read(fileinputstream);            elemento = documento.getRootElement();        } catch (Exception exception){            System.out.println("Error reading congiguration file kalos.xml");            exception.printStackTrace();            System.exit(0);        }        debug = Boolean.parseBoolean(elemento.element("debug").getText());        elemUltimoIdioma = elemento.element("ultimo_idioma");        elemIdiomaSignificados = elemento.element("idioma_significados");        elemUltimoTeclado = elemento.element("ultimo_teclado");        elemVersion = elemento.element("version");        valorUltimoIdioma = elemUltimoIdioma.attributeValue("valor");        valorIdiomaSignificados = elemIdiomaSignificados.attributeValue("valor");        ultimoTeclado = elemUltimoTeclado.getText();        valorVersion = elemVersion.getText();        valorFont = elemento.element("font");        String fontName = valorFont.attributeValue("name");        int fontSize = Integer.parseInt(valorFont.attributeValue("size"));        font = new Font(fontName, 0, fontSize);        if (!font.canDisplay('\u1F87')){            logger.warn("ninguna font hallada para el nombre=" + fontName + " tamaño " + fontSize);            font = null;        }        elemRegistrado = elemento.element("registrado");        elemAnalisiMorfologico = elemento.element("analisis-morfologico");        valorMaximoFormasAM = Integer.parseInt(elemAnalisiMorfologico.attribute("maximo-formas").getValue());    }}