package com.kalos.analisismorfologico.negocio;import java.util.ArrayList;import java.util.Arrays;import java.util.GregorianCalendar;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import com.kalos.beans.PreposicionBean;import com.kalos.beans.ResultadoUniversal;import com.kalos.datos.gerentes.GerentePreposiciones;import com.kalos.enumeraciones.TipoPalabra;import com.kalos.operaciones.AACacheable;import com.kalos.operaciones.OpPalabras;import org.apache.log4j.Logger;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;public class AMPreposiciones implements AnalizadorMorfologico, ApplicationContextAware {    private GerentePreposiciones gerentePreposiciones;    Logger logger = Logger.getLogger(getClass().getName());    private boolean Q = false;    private ApplicationContext applicationContext;    private List<String> S;    public void setApplicationContext(ApplicationContext paramApplicationContext) {	this.applicationContext = paramApplicationContext;    }    private void paso1() {	if (!this.Q) {	    this.gerentePreposiciones = (GerentePreposiciones) this.applicationContext.getBean("gerentePreposiciones");	    this.Q = true;	    this.S = new ArrayList<String>();	    List<PreposicionBean> localList = this.gerentePreposiciones.seleccionaPreposicionesNoAcentuables();	    Iterator<PreposicionBean> localIterator = localList.iterator();	    while (localIterator.hasNext()) {		PreposicionBean localC =  localIterator.next();		String str = localC.getFormaDiccionario();		str = OpPalabras.strBetaACompleto(str);		this.S.add(str);	    }	}    }    public long buscaCanonica(String[] formas, Set<ResultadoUniversal> paramHashSet, AACacheable paramB, boolean paramBoolean1,	    boolean paramBoolean2) {	paso1();	long l1 = System.currentTimeMillis();	Set<String> localHashSet = new HashSet<String>(Arrays.asList(formas));	paso2(localHashSet, paramHashSet);	long l2 = System.currentTimeMillis();	long l3 = l2 - l1;	if (paramBoolean2) {	    GregorianCalendar localGregorianCalendar = new GregorianCalendar();	    localGregorianCalendar.setTimeInMillis(l3);	    System.out.println("tard√≥ " + localGregorianCalendar.get(12) + " minutos " + localGregorianCalendar.get(13)		    + " segundos " + localGregorianCalendar.get(14) + " milisegundos");	}	return l3;    }    private void paso2(Set<String> paramSet, Set<ResultadoUniversal> paramSet1) {	List<ResultadoUniversal> res = new ArrayList<ResultadoUniversal>();	Iterator<String> localIterator1 = paramSet.iterator();	while (localIterator1.hasNext()) {	    String str1 = (String) localIterator1.next();	    String str2 = OpPalabras.strCompletoABeta(str1);	    List<PreposicionBean> localList = this.gerentePreposiciones.seleccionaPorFormaParaAM(str2);	    Iterator<PreposicionBean> localIterator2 = localList.iterator();	    while (localIterator2.hasNext()) {		PreposicionBean bean = localIterator2.next();		ResultadoUniversal localj = new ResultadoUniversal(TipoPalabra.Preposicion, bean.getId(), null, null, bean.getParticularidad(), null, str1, null, null,			null, null, null, null, null, null, null, null, null, null);		res.add(localj);	    }	}	paramSet1.addAll(res);    }    public void setGerentePreposiciones(GerentePreposiciones paramq) {	this.gerentePreposiciones = paramq;    }}