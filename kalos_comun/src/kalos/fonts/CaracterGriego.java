// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package kalos.fonts;import kalos.enumeraciones.CompLetras;// Referenced classes of package kalos.F://            Dimport kalos.enumeraciones.Espiritu;import kalos.operaciones.OpLetras;import kalos.operaciones.excepciones.ExcepcionLetra;public class CaracterGriego implements CompLetras, Comparable {	public CaracterGriego(char c) {		A4 = false;		t = false;		s = null;		C3 = null;		A2 = new Character(c);		v = B(c);		int i = TipoLetra.getTipoLetraBasico(v);		if (i == 1)			esVocal = true;		else if (i == 2) {			C5 = true;			A4 = D(c);			t = A(c);			C7 = CaracterGriego(c);		} else if (i == 3)			x = true;		if (esVocal) {			int j = TipoLetra.getTipoVocal(c);			if (j == 2)				esLarga = true;			else if (j == 1)				esCorta = true;			Espiritu o = TipoLetra.getEspiritu(c);			if (o == Espiritu.Aspero)				esAspero = true;			else if (o == Espiritu.Suave)				esSuave = true;		}		C4 = E(v);	}	public boolean esSignoEspecial() {		if (!C0) {			x = TipoLetra.getTipoLetraBasico(getCaracter()) == 3;			C0 = true;		}		return x;	}	private static char B(char c) {		if (TipoLetra.getTipoLetraBasico(c) == 3)			return c;		char c1 = OpLetras.desacentuarLetra(c);		c1 = OpLetras.desespirituarLetra(c1);		switch (c1) {		case 8115:		case 8124:		case 9137:		case 13233:		case 17329:		case 21425:			return '\u23B1';		case 917:		case 949:			return '\u03B5';		case 919:		case 951:		case 8131:		case 8140:			return '\u03B7';		case 9145:		case 9162:		case 13241:		case 13258:		case 17337:		case 21433:		case 21450:			return '\u23B9';		case 927:		case 959:			return '\u03BF';		case 937:		case 969:		case 8179:		case 8188:			return '\u03C9';		case 9157:		case 9163:		case 13253:		case 13259:		case 17349:		case 21445:		case 21451:			return '\u23C5';		case 914:		case 946:			return '\u03B2';		case 935:		case 967:			return '\u03C7';		case 916:		case 948:			return '\u03B4';		case 934:		case 966:			return '\u03C6';		case 915:		case 947:			return '\u03B3';		case 922:		case 954:			return '\u03BA';		case 923:		case 955:			return '\u03BB';		case 924:		case 956:			return '\u03BC';		case 925:		case 957:			return '\u03BD';		case 931:		case 963:			return '\u03C3';		case 962:			return '\u03C2';		case 932:		case 964:			return '\u03C4';		case 928:		case 960:			return '\u03C0';		case 920:		case 952:			return '\u03B8';		case 929:		case 961:			return '\u03C1';		case 936:		case 968:			return '\u03C8';		case 918:		case 950:			return '\u03B6';		case 926:		case 958:			return '\u03BE';		}		throw new ExcepcionLetra(c1, (new StringBuilder())				.append("error en getLetraBaseInterna, par\341metro ")				.append(c1).append(" valor hex:")				.append(Integer.toHexString(c1)).toString());	}	private boolean F() {		if (C5) {			switch (A2.charValue()) {			case 914:			case 915:			case 916:			case 918:			case 920:			case 922:			case 923:			case 924:			case 925:			case 926:			case 928:			case 929:			case 931:			case 932:			case 934:			case 935:			case 936:			case 8172:				return true;			}			return false;		}		if (esVocal) {			char c = OpLetras.desacentuarLetra(A2.charValue());			switch (c) {			case 917:			case 919:			case 927:			case 937:			case 7960:			case 7961:			case 7976:			case 7977:			case 8008:			case 8009:			case 8040:			case 8041:			case 8072:			case 8073:			case 8104:			case 8105:			case 8124:			case 8188:			case 17328:			case 17329:			case 17337:			case 17349:			case 17354:			case 17355:			case 21424:			case 21425:			case 21433:			case 21445:			case 21450:			case 21451:			case 24320:			case 24321:			case 24368:			case 24369:			case 24401:			case 24530:			case 24531:			case 24546:			case 28416:			case 28417:			case 28464:			case 28465:			case 28497:			case 28626:			case 28627:			case 28642:				return true;			}			return false;		} else {			return false;		}	}	private boolean E() {		if (C5) {			switch (A2.charValue()) {			case 183:			case 925:			case 931:			case 932:			case 946:			case 947:			case 948:			case 950:			case 952:			case 954:			case 955:			case 956:			case 958:			case 960:			case 961:			case 966:			case 967:			case 968:				return true;			}			return false;		}		if (esVocal) {			char c = OpLetras.desacentuarLetra(OpLetras.desespirituarLetra(A2					.charValue()));			switch (c) {			case 949:			case 951:			case 959:			case 969:			case 8115:			case 8131:			case 8179:			case 9137:			case 9145:			case 9157:			case 9162:			case 9163:			case 13233:			case 13241:			case 13253:			case 13258:			case 13259:				return true;			}			return false;		} else {			return false;		}	}	private char B() {		switch (A2.charValue()) {		case 9137:			return '\u33B1';		case 16129:			return '\u4F01';		case 16128:			return '\u4F00';		case 16241:			return '\u4F71';		case 16133:			return '\u4F05';		case 16132:			return '\u4F04';		case 16131:			return '\u4F03';		case 16130:			return '\u4F02';		case 17329:			return '\u53B1';		case 24321:			return '\u6F01';		case 24320:			return '\u6F00';		case 24325:			return '\u6F05';		case 24324:			return '\u6F04';		case 24323:			return '\u6F03';		case 24322:			return '\u6F02';		case 9145:			return '\u33B9';		case 16177:			return '\u4F31';		case 16176:			return '\u4F30';		case 16247:			return '\u4F77';		case 16181:			return '\u4F35';		case 16180:			return '\u4F34';		case 16179:			return '\u4F33';		case 17337:			return '\u53B9';		case 24369:			return '\u6F31';		case 24368:			return '\u6F30';		case 24439:			return '\u6F77';		case 24373:			return '\u6F35';		case 24372:			return '\u6F34';		case 24371:			return '\u6F33';		case 9157:			return '\u33C5';		case 16209:			return '\u4F51';		case 16208:			return '\u4F50';		case 16251:			return '\u4F7B';		case 16213:			return '\u4F55';		case 16212:			return '\u4F54';		case 16211:			return '\u4F53';		case 24401:			return '\u6F51';		case 17349:			return '\u53C5';		case 24443:			return '\u6F7B';		case 24405:			return '\u6F55';		}		return A2.charValue();	}	private char H() {		return OpLetras.acortaCaracter(A2.charValue());	}	private boolean G() {		switch (A2.charValue()) {		case 9136:		case 9162:		case 9163:		case 13232:		case 13258:		case 13259:		case 16338:		case 16339:		case 16354:		case 17328:		case 17354:		case 17355:		case 20434:		case 20435:		case 20450:		case 21424:		case 21450:		case 21451:		case 24530:		case 24531:		case 24546:		case 28626:		case 28627:		case 28642:			return true;		}		return false;	}	private boolean D() {		switch (A2.charValue()) {		case 992:		case 7956:		case 7957:		case 7964:		case 7965:		case 7972:		case 7973:		case 7980:		case 7981:		case 8004:		case 8005:		case 8012:		case 8013:		case 8036:		case 8037:		case 8044:		case 8045:		case 8051:		case 8053:		case 8057:		case 8061:		case 8068:		case 8069:		case 8076:		case 8077:		case 8084:		case 8085:		case 8092:		case 8093:		case 8100:		case 8101:		case 8108:		case 8109:		case 8116:		case 8132:		case 8139:		case 8180:		case 8187:		case 9136:		case 13232:		case 16132:		case 16133:		case 16180:		case 16181:		case 16212:		case 16213:		case 16241:		case 16247:		case 16251:		case 16339:		case 17328:		case 20228:		case 20229:		case 20276:		case 20277:		case 20308:		case 20309:		case 20337:		case 20343:		case 20347:		case 20435:		case 21424:		case 24324:		case 24325:		case 24372:		case 24373:		case 24405:		case 24439:		case 24443:		case 24531:		case 28420:		case 28421:		case 28468:		case 28469:		case 28501:		case 28535:		case 28539:		case 28627:		case 61457:		case 61462:		case 61467:		case 61470:			return true;		}		return false;	}	private boolean CaracterGriego() {		switch (A2.charValue()) {		case 905:		case 994:		case 7954:		case 7955:		case 7962:		case 7963:		case 7970:		case 7971:		case 7978:		case 7979:		case 8002:		case 8003:		case 8010:		case 8011:		case 8034:		case 8035:		case 8042:		case 8043:		case 8050:		case 8052:		case 8056:		case 8060:		case 8066:		case 8067:		case 8074:		case 8075:		case 8082:		case 8083:		case 8090:		case 8091:		case 8098:		case 8099:		case 8106:		case 8107:		case 8114:		case 8130:		case 8178:		case 8186:		case 16130:		case 16131:		case 16178:		case 16179:		case 16210:		case 16211:		case 16240:		case 16246:		case 16250:		case 16338:		case 16354:		case 20226:		case 20227:		case 20274:		case 20275:		case 20306:		case 20307:		case 20336:		case 20342:		case 20346:		case 20434:		case 20450:		case 24322:		case 24323:		case 24370:		case 24371:		case 24403:		case 24438:		case 24442:		case 24530:		case 24546:		case 28418:		case 28419:		case 28466:		case 28467:		case 28499:		case 28534:		case 28538:		case 28626:		case 28642:		case 61458:		case 61463:		case 61468:		case 61471:			return true;		}		return false;	}	public char getCaracter() {		return A2.charValue();	}	public boolean esLarga() {		return esLarga;	}	public boolean esCorta() {		return esCorta;	}	public boolean esSuave() {		return esSuave;	}	public boolean esAspero() {		return esAspero;	}	public boolean esVocal() {		return esVocal;	}	public boolean esConsonante() {		return C5;	}	public boolean esLiquida() {		return t;	}	public boolean esDoble() {		return C7;	}	public boolean esMuda() {		return A4;	}	public boolean tieneAcentoAgudo() {		if (!C1) {			AA = D();			y = A();			w = CaracterGriego();			C1 = true;		}		return AA;	}	public boolean tieneEspiritu() {		return esAspero() || esSuave();	}	public boolean tieneAcentoCircunflejo() {		if (!C1) {			AA = D();			y = A();			w = CaracterGriego();			C1 = true;		}		return y;	}	public boolean tieneAcentoGrave() {		if (!C1) {			AA = D();			y = A();			w = CaracterGriego();			C1 = true;		}		return w;	}	public boolean esMayuscula() {		if (!CA) {			BA = F();			if (BA) {				z = false;				C6 = true;			}			CA = true;			return BA;		} else {			return BA;		}	}	public boolean esMinuscula() {		if (!C6) {			z = E();			if (z) {				BA = false;				CA = true;			}			C6 = true;			return z;		} else {			return z;		}	}	public char getVersionCorta() {		if (s == null)			s = new Character(H());		return s.charValue();	}	public char getLetraBase() {		if (!u) {			v = B(getCaracter());			u = true;		}		return v;	}	public char getVersionLarga() {		if (C3 == null)			C3 = new Character(B());		return C3.charValue();	}	public int getOrden() {		return C4;	}	public String toString() {		return new String(new char[] { A2.charValue() });	}	public boolean tieneDieresis() {		if (!A3) {			A5 = G();			A3 = true;		}		return A5;	}	public boolean tieneSubscripta() {		switch (A2.charValue()) {		case 8064:		case 8065:		case 8066:		case 8067:		case 8068:		case 8069:		case 8070:		case 8071:		case 8073:		case 8075:		case 8077:		case 8079:		case 8080:		case 8081:		case 8082:		case 8083:		case 8084:		case 8085:		case 8086:		case 8087:		case 8089:		case 8091:		case 8093:		case 8095:		case 8096:		case 8097:		case 8098:		case 8099:		case 8100:		case 8101:		case 8102:		case 8103:		case 8105:		case 8107:		case 8109:		case 8111:		case 8114:		case 8115:		case 8116:		case 8119:		case 8124:		case 8130:		case 8131:		case 8132:		case 8135:		case 8140:		case 8178:		case 8179:		case 8180:		case 8183:		case 8188:		case 61457:		case 61458:		case 61459:		case 61462:		case 61463:		case 61464:		case 61467:		case 61468:		case 61469:			return true;		}		return false;	}	private boolean A() {		switch (A2.charValue()) {		case 7942:		case 7943:		case 7950:		case 7951:		case 7974:		case 7975:		case 7982:		case 7983:		case 7990:		case 7991:		case 7998:		case 7999:		case 8022:		case 8023:		case 8031:		case 8038:		case 8039:		case 8047:		case 8070:		case 8071:		case 8078:		case 8079:		case 8086:		case 8087:		case 8094:		case 8095:		case 8102:		case 8103:		case 8110:		case 8111:		case 8118:		case 8119:		case 8134:		case 8135:		case 8150:		case 8166:		case 8182:		case 8183:		case 57346:		case 61456:		case 61459:		case 61460:		case 61461:		case 61464:		case 61465:		case 61466:		case 61469:			return true;		}		return false;	}	public int compareTo(CaracterGriego c) {		return A2.compareTo(c.A2);	}	private static boolean D(char c) {		switch (c) {		case 946:		case 947:		case 948:		case 952:		case 954:		case 960:		case 964:		case 966:		case 967:			return true;		case 949:		case 950:		case 951:		case 953:		case 955:		case 956:		case 957:		case 958:		case 959:		case 961:		case 962:		case 963:		case 965:		default:			return false;		}	}	private static boolean A(char c) {		switch (c) {		case 955:		case 956:		case 957:		case 961:			return true;		case 958:		case 959:		case 960:		default:			return false;		}	}	private static boolean CaracterGriego(char c) {		switch (c) {		case 950:		case 958:		case 968:			return true;		}		return false;	}	private static int E(char c) {		c = B(c);		switch (c) {		case 8115:		case 9137:			return 1;		case 946:			return 2;		case 947:			return 3;		case 948:			return 4;		case 949:			return 5;		case 950:			return 6;		case 951:		case 8131:			return 7;		case 952:			return 8;		case 9145:			return 9;		case 954:			return 10;		case 955:			return 11;		case 956:			return 12;		case 957:			return 13;		case 958:			return 14;		case 959:			return 15;		case 960:			return 16;		case 961:			return 17;		case 962:		case 963:			return 18;		case 964:			return 19;		case 9157:			return 20;		case 966:			return 21;		case 967:			return 22;		case 968:			return 23;		case 969:		case 8179:			return 24;		}		return -1;	}	public int compareTo(Object obj) {		return compareTo((CaracterGriego) obj);	}	private Character A2;	private boolean esLarga;	private boolean esCorta;	private boolean esSuave;	private boolean esAspero;	private boolean esVocal;	private boolean C7;	private boolean C5;	private boolean BA;	private boolean z;	private boolean A4;	private boolean t;	private boolean x;	private boolean AA;	private boolean y;	private boolean w;	private boolean A5;	private boolean C1;	private boolean A3;	private boolean u;	private boolean CA;	private boolean C6;	private boolean C0;	private char v;	private Character s;	private Character C3;	private int C4;}