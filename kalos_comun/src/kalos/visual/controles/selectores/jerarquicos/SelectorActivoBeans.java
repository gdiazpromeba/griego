// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package kalos.visual.controles.selectores.jerarquicos;import com.jgoodies.forms.builder.PanelBuilder;import com.jgoodies.forms.layout.CellConstraints;import com.jgoodies.forms.layout.FormLayout;import java.awt.BorderLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JPanel;import javax.swing.JTextField;import javax.swing.UIManager;import kalos.A.B.B.C;import kalos.A.B.B.D;import kalos.E.E.BA;import kalos.E.E.X;import kalos.datos.gerentes.Reseleccionable;import kalos.visual.controles.FabricaControles;import org.springframework.beans.BeansException;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;public abstract class SelectorActivoBeans extends JPanel    implements ApplicationContextAware{    public SelectorActivoBeans(Reseleccionable ba, boolean flag, boolean flag1, boolean flag2, boolean flag3, String s)    {        A = new C();        E = new Boton();        F = new D();        gerenteReseleccionable = ba;        C = flag;        G = flag1;        D = flag2;        J = flag3;        H = s;        FormLayout formlayout = new FormLayout("30dlu:grow(0.9), 3dlu, pref,pref,pref ", "fill:15dlu");        textoDescripcion = new JTextField();        if(flag3)            textoDescripcion.setFont(kalos.C.A.getFont());        setLayout(new BorderLayout());        PanelBuilder panelbuilder = new PanelBuilder(formlayout);        CellConstraints cellconstraints = new CellConstraints();        if(!flag1 && !flag && !flag2)        {            panelbuilder.add(textoDescripcion, cellconstraints.xyw(1, 1, 5));        } else        {            panelbuilder.add(textoDescripcion, cellconstraints.xy(1, 1));            panelbuilder.add(A, cellconstraints.xy(3, 1));            panelbuilder.add(E, cellconstraints.xy(4, 1));            panelbuilder.add(F, cellconstraints.xy(5, 1));        }        add(panelbuilder.getPanel());        setEnabled(flag);        textoDescripcion.setEnabled(false);        textoDescripcion.setBackground(UIManager.getColor("Label.background"));        if(!flag1)            E.setVisible(false);        A.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent actionevent)            {                A.muestraDialog();            }        });        E.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent actionevent)            {                A.quitaSeleccion();            }        });    }    public Object getBeanSeleccionado()    {        return M.getSeleccionado();    }    public String getIdSeleccionado()    {        Object obj = M.getSeleccionado();        if(obj != null)            return kalos.G.A.getId(obj);        else            return null;    }    public void setEnabled(boolean flag)    {        A.setVisible(flag);        E.setVisible(flag & G);        F.setVisible(D & flag);    }    protected abstract kalos.A.B.F.A A();    public abstract void muestraDialog();    public ApplicationContext getApplicationContext()    {        return null;    }    protected void fuerzaSeleccion(String s)    {        M.setPK(s);        if(s == null)        {            textoDescripcion.setText("");            return;        }        Object obj = getBeanSeleccionado();        if(obj != null)        {            textoDescripcion.setText(B());        } else        {            if(!(gerenteReseleccionable instanceof X))            {                StringBuffer stringbuffer = new StringBuffer(" El gerente reseleccionable es nulo o no implementa Selector todos, imposible reintentar");                stringbuffer.append("Error al querer forzar la selecci\363n con la siguiente PK: \n");                stringbuffer.append(s);                throw new RuntimeException(stringbuffer.toString());            }            java.util.List list = ((X)gerenteReseleccionable).getTodos();            M = new kalos.J.C(list);            Object obj1 = getBeanSeleccionado();            if(obj1 != null)            {                textoDescripcion.setText(B());            } else            {                StringBuffer stringbuffer1 = new StringBuffer("Error al querer forzar la selecci\363n con la siguiente PK: \n");                stringbuffer1.append(s);                throw new RuntimeException(stringbuffer1.toString());            }        }    }    protected abstract String B();    public final void quitaSeleccion()    {        M = null;        textoDescripcion.setText("");    }    public JTextField getTextoDescripcion()    {        return textoDescripcion;    }    public void setApplicationContext(ApplicationContext applicationcontext)        throws BeansException    {        I = applicationcontext;    }    protected C A;    protected FabricaControles E;    public D F;    protected kalos.A.B.F.A K;    protected boolean C;    protected boolean G;    protected boolean D;    protected JTextField textoDescripcion;    protected boolean J;    protected String H;    protected kalos.J.C M;    ApplicationContext I;    Reseleccionable gerenteReseleccionable;}