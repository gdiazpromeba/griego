// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package kalos.operaciones;import kalos.enumeraciones.TipoVerbo;// Referenced classes of package kalos.G://            Ipublic class TiposVerbo implements TipoVerbo {    public static boolean esVocalicoNoContractoNormal(int i) {	switch (i) {	case 21: // '\025'	case 25: // '\031'	    return true;	}	return false;    }    public static boolean esVocalicoNoContractoDeponente(int i) {	switch (i) {	case 24: // '\030'	case 26: // '\032'	    return true;	}	return false;    }    public static boolean esVocalicoNoContracto(int i) {	switch (i) {	case 21: // '\025'	case 24: // '\030'	case 25: // '\031'	case 26: // '\032'	    return true;	case 22: // '\026'	case 23: // '\027'	default:	    return false;	}    }    public static boolean esMudoNormal(int i) {	switch (i) {	case 51: // '3'	case 53: // '5'	case 55: // '7'	case 57: // '9'	case 59: // ';'	case 61: // '='	case 63: // '?'	case 65: // 'A'	case 67: // 'C'	case 91: // '['	case 93: // ']'	case 96: // '`'	    return true;	case 52: // '4'	case 54: // '6'	case 56: // '8'	case 58: // ':'	case 60: // '<'	case 62: // '>'	case 64: // '@'	case 66: // 'temaComido'	case 68: // 'D'	case 69: // 'E'	case 70: // 'F'	case 71: // 'G'	case 72: // 'H'	case 73: // 'I'	case 74: // 'J'	case 75: // 'K'	case 76: // 'L'	case 77: // 'M'	case 78: // 'N'	case 79: // 'O'	case 80: // 'P'	case 81: // 'Q'	case 82: // 'R'	case 83: // 'S'	case 84: // 'T'	case 85: // 'U'	case 86: // 'V'	case 87: // 'W'	case 88: // 'X'	case 89: // 'Y'	case 90: // 'Z'	case 92: // '\\'	case 94: // '^'	case 95: // '_'	default:	    return false;	}    }    public static boolean esMudoDeponente(int i) {	switch (i) {	case 52: // '4'	case 54: // '6'	case 56: // '8'	case 58: // ':'	case 60: // '<'	case 62: // '>'	case 64: // '@'	case 66: // 'temaComido'	case 68: // 'D'	case 92: // '\\'	case 94: // '^'	case 97: // 'a'	    return true;	case 53: // '5'	case 55: // '7'	case 57: // '9'	case 59: // ';'	case 61: // '='	case 63: // '?'	case 65: // 'A'	case 67: // 'C'	case 69: // 'E'	case 70: // 'F'	case 71: // 'G'	case 72: // 'H'	case 73: // 'I'	case 74: // 'J'	case 75: // 'K'	case 76: // 'L'	case 77: // 'M'	case 78: // 'N'	case 79: // 'O'	case 80: // 'P'	case 81: // 'Q'	case 82: // 'R'	case 83: // 'S'	case 84: // 'T'	case 85: // 'U'	case 86: // 'V'	case 87: // 'W'	case 88: // 'X'	case 89: // 'Y'	case 90: // 'Z'	case 91: // '['	case 93: // ']'	case 95: // '_'	case 96: // '`'	default:	    return false;	}    }    public static boolean esMudo(int i) {	switch (i) {	case 51: // '3'	case 52: // '4'	case 53: // '5'	case 54: // '6'	case 55: // '7'	case 56: // '8'	case 57: // '9'	case 58: // ':'	case 59: // ';'	case 60: // '<'	case 61: // '='	case 62: // '>'	case 63: // '?'	case 64: // '@'	case 65: // 'A'	case 66: // 'temaComido'	case 67: // 'C'	case 68: // 'D'	case 91: // '['	case 92: // '\\'	case 93: // ']'	case 94: // '^'	case 96: // '`'	case 97: // 'a'	    return true;	case 69: // 'E'	case 70: // 'F'	case 71: // 'G'	case 72: // 'H'	case 73: // 'I'	case 74: // 'J'	case 75: // 'K'	case 76: // 'L'	case 77: // 'M'	case 78: // 'N'	case 79: // 'O'	case 80: // 'P'	case 81: // 'Q'	case 82: // 'R'	case 83: // 'S'	case 84: // 'T'	case 85: // 'U'	case 86: // 'V'	case 87: // 'W'	case 88: // 'X'	case 89: // 'Y'	case 90: // 'Z'	case 95: // '_'	default:	    return false;	}    }    public static boolean esDentalOEnDZeta(int i) {	switch (i) {	case 63: // '?'	case 64: // '@'	case 65: // 'A'	case 66: // 'temaComido'	case 67: // 'C'	case 68: // 'D'	case 79: // 'O'	case 80: // 'P'	    return true;	case 69: // 'E'	case 70: // 'F'	case 71: // 'G'	case 72: // 'H'	case 73: // 'I'	case 74: // 'J'	case 75: // 'K'	case 76: // 'L'	case 77: // 'M'	case 78: // 'N'	default:	    return false;	}    }    public static boolean esLiquidoNormal(int i) {	switch (i) {	case 69: // 'E'	case 71: // 'G'	case 73: // 'I'	case 75: // 'K'	    return true;	case 70: // 'F'	case 72: // 'H'	case 74: // 'J'	default:	    return false;	}    }    public static boolean esLiquidoDeponente(int i) {	switch (i) {	case 70: // 'F'	case 72: // 'H'	case 74: // 'J'	case 76: // 'L'	    return true;	case 71: // 'G'	case 73: // 'I'	case 75: // 'K'	default:	    return false;	}    }    public static boolean esLiquido(int i) {	switch (i) {	case 14: // '\016'	case 38: // '&'	case 39: // '\''	case 41: // ')'	case 69: // 'E'	case 70: // 'F'	case 71: // 'G'	case 72: // 'H'	case 73: // 'I'	case 74: // 'J'	case 75: // 'K'	case 76: // 'L'	    return true;	}	return false;    }    public static boolean esDobleNormal(int i) {	switch (i) {	case 77: // 'M'	case 79: // 'O'	case 81: // 'Q'	    return true;	case 78: // 'N'	case 80: // 'P'	default:	    return false;	}    }    public static boolean esDobleDeponente(int i) {	switch (i) {	case 78: // 'N'	case 80: // 'P'	case 82: // 'R'	    return true;	case 79: // 'O'	case 81: // 'Q'	default:	    return false;	}    }    public static boolean esDoble(int i) {	switch (i) {	case 77: // 'M'	case 78: // 'N'	case 79: // 'O'	case 80: // 'P'	case 81: // 'Q'	case 82: // 'R'	    return true;	}	return false;    }    public static boolean esVocalicoContractoNormal(int i) {	switch (i) {	case 45: // '-'	case 47: // '/'	case 49: // '1'	    return true;	case 46: // '.'	case 48: // '0'	default:	    return false;	}    }    public static boolean esVocalicoContractoDeponente(int i) {	switch (i) {	case 46: // '.'	case 48: // '0'	case 50: // '2'	    return true;	case 47: // '/'	case 49: // '1'	default:	    return false;	}    }    public static boolean esVocalicoContracto(int i) {	switch (i) {	case 45: // '-'	case 46: // '.'	case 47: // '/'	case 48: // '0'	case 49: // '1'	case 50: // '2'	    return true;	}	return false;    }    public static boolean esEnMiPropiamente(int i) {	switch (i) {	case 83: // 'S'	case 84: // 'T'	    return true;	}	return false;    }    public static boolean esEnNuMi(int i) {	switch (i) {	case 85: // 'U'	case 86: // 'V'	    return true;	}	return false;    }    public static boolean esDzeta(int i) {	switch (i) {	case 79: // 'O'	case 80: // 'P'	    return true;	}	return false;    }    public static boolean esPiTau(int i) {	switch (i) {	case 96: // '`'	case 97: // 'a'	    return true;	}	return false;    }    public static boolean esDeponente(int i) {	switch (i) {	case 24: // '\030'	case 26: // '\032'	case 46: // '.'	case 48: // '0'	case 50: // '2'	case 52: // '4'	case 54: // '6'	case 56: // '8'	case 58: // ':'	case 60: // '<'	case 62: // '>'	case 64: // '@'	case 66: // 'temaComido'	case 68: // 'D'	case 70: // 'F'	case 72: // 'H'	case 74: // 'J'	case 76: // 'L'	case 78: // 'N'	case 80: // 'P'	case 82: // 'R'	case 84: // 'T'	case 86: // 'V'	case 92: // '\\'	case 94: // '^'	case 97: // 'a'	    return true;	case 25: // '\031'	case 27: // '\033'	case 28: // '\034'	case 29: // '\035'	case 30: // '\036'	case 31: // '\037'	case 32: // ' '	case 33: // '!'	case 34: // '"'	case 35: // '#'	case 36: // '$'	case 37: // '%'	case 38: // '&'	case 39: // '\''	case 40: // '('	case 41: // ')'	case 42: // '*'	case 43: // '+'	case 44: // ','	case 45: // '-'	case 47: // '/'	case 49: // '1'	case 51: // '3'	case 53: // '5'	case 55: // '7'	case 57: // '9'	case 59: // ';'	case 61: // '='	case 63: // '?'	case 65: // 'A'	case 67: // 'C'	case 69: // 'E'	case 71: // 'G'	case 73: // 'I'	case 75: // 'K'	case 77: // 'M'	case 79: // 'O'	case 81: // 'Q'	case 83: // 'S'	case 85: // 'U'	case 87: // 'W'	case 88: // 'X'	case 89: // 'Y'	case 90: // 'Z'	case 91: // '['	case 93: // ']'	case 95: // '_'	case 96: // '`'	default:	    return false;	}    }    public static short tipoVerbo(String s) {	String s1 = OpPalabras.strCompletoABeta(s);	for (int i = 0; i < _fld0108.length; i++) {	    String s2 = (String) _fld0108[i][0];	    if (s1.endsWith(s2))		return ((Integer) _fld0108[i][1]).shortValue();	}	throw new RuntimeException((new StringBuilder()).append("ning\372n tipo encontrado para la forma can\363nica ")		.append(s1).toString());    }    private static Object _fld0108[][] = { { "U/W", Integer.valueOf(21) }, { "U_/W", Integer.valueOf(21) },	    { "U+/W", Integer.valueOf(21) }, { "I/W", Integer.valueOf(25) }, { "I_/W", Integer.valueOf(25) },	    { "I+/W", Integer.valueOf(25) }, { "U/OMAI", Integer.valueOf(24) }, { "U_/OMAI", Integer.valueOf(24) },	    { "U+/OMAI", Integer.valueOf(24) }, { "I/OMAI", Integer.valueOf(26) }, { "I_/OMAI", Integer.valueOf(26) },	    { "I+/OMAI", Integer.valueOf(26) }, { "A/W -W=", Integer.valueOf(45) },	    { "A_/W -W=", Integer.valueOf(45) }, { "A/OMAI -W=MAI", Integer.valueOf(46) },	    { "A_/OMAI -W=MAI", Integer.valueOf(46) }, { "E/W -W=", Integer.valueOf(47) },	    { "E/OMAI -OU=MAI", Integer.valueOf(48) }, { "O/W -W=", Integer.valueOf(49) },	    { "O/OMAI -OU=MAI", Integer.valueOf(50) }, { "ZW", Integer.valueOf(79) }, { "ZOMAI", Integer.valueOf(80) },	    { "LW", Integer.valueOf(71) }, { "LOMAI", Integer.valueOf(72) }, { "RW", Integer.valueOf(69) },	    { "ROMAI", Integer.valueOf(70) }, { "NW", Integer.valueOf(75) }, { "NOMAI", Integer.valueOf(76) },	    { "SSW", Integer.valueOf(93) }, { "SSOMAI", Integer.valueOf(94) }, { "TTW", Integer.valueOf(91) },	    { "TTOMAI", Integer.valueOf(92) }, { "PTW", Integer.valueOf(96) }, { "PTOMAI", Integer.valueOf(97) },	    { "TW", Integer.valueOf(67) }, { "TOMAI", Integer.valueOf(68) }, { "QW", Integer.valueOf(65) },	    { "QOMAI", Integer.valueOf(66) }, { "DW", Integer.valueOf(63) }, { "DOMAI", Integer.valueOf(64) },	    { "BW", Integer.valueOf(51) }, { "BOMAI", Integer.valueOf(52) }, { "FW", Integer.valueOf(55) },	    { "FOMAI", Integer.valueOf(56) }, { "PW", Integer.valueOf(53) }, { "POMAI", Integer.valueOf(54) },	    { "KW", Integer.valueOf(61) }, { "KOMAI", Integer.valueOf(62) }, { "GW", Integer.valueOf(57) },	    { "GOMAI", Integer.valueOf(58) }, { "CW", Integer.valueOf(59) }, { "COMAI", Integer.valueOf(60) },	    { "NU_MI", Integer.valueOf(85) }, { "NUMAI", Integer.valueOf(86) }, { "XW", Integer.valueOf(77) },	    { "XOMAI", Integer.valueOf(78) }, { "MW", Integer.valueOf(73) }, { "MOMAI", Integer.valueOf(74) },	    { "YW", Integer.valueOf(81) }, { "YOMAI", Integer.valueOf(82) }, { "MI", Integer.valueOf(83) },	    { "MAI", Integer.valueOf(84) } };}