package kalos.analisismorfologico.test;import java.io.File;import java.util.HashSet;import java.util.Iterator;import java.util.Set;import kalos.analisismorfologico.negocio.AMAdjetivos;import kalos.analisismorfologico.negocio.AMInfinitivos;import kalos.analisismorfologico.negocio.AMNominal;import kalos.analisismorfologico.negocio.AMParticipios;import kalos.analisismorfologico.negocio.AMSustantivos;import kalos.analisismorfologico.negocio.AMUtil;import kalos.analisismorfologico.negocio.AMVerbal;import kalos.analisismorfologico.negocio.AMVerbos;import kalos.analisismorfologico.negocio.ExtractorPrefijos;import kalos.beans.ResultadoUniversal;import kalos.beans.SustantivoBean;import kalos.datos.gerentes.GerenteSustantivos;import kalos.datos.gerentes.GerenteVerbalizadorParticipios;import kalos.datos.gerentes.GerenteVerbos;import kalos.datos.gerentes.GerenteVerbosCompuestos;import kalos.flexion.declinacion.Declina;import kalos.flexion.declinacion.Participios;import kalos.operaciones.AACacheable;import kalos.operaciones.OpPalabras;import kalos.recursos.Configuracion;import kalos.recursos.Recursos;import org.apache.log4j.xml.DOMConfigurator;import org.springframework.beans.factory.support.DefaultListableBeanFactory;import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;import org.springframework.context.ApplicationContext;import org.springframework.context.support.GenericApplicationContext;import org.springframework.core.io.FileSystemResource;public class TestsSimples {    public static void testAMVerbos() {	try {	    //String[] arrayOfString = { OpPalabras.strBetaACompleto("A)POBA/LLW") };	    String[] arrayOfString = { OpPalabras.strBetaACompleto("E)LU/QHN") };	    	    	    HashSet localHashSet = new HashSet();	    ApplicationContext localApplicationContext = creaContexto();	    AMVerbos localI = (AMVerbos) localApplicationContext.getBean("amVerbos");	    AMUtil localC = (AMUtil) localApplicationContext.getBean("amUtil");	    AACacheable localB = new AACacheable();	    localI.buscaCanonica(arrayOfString, localHashSet, localB, true, true);	    System.out.println("********* resultado ****************");	    Iterator<ResultadoUniversal> localIterator = localHashSet.iterator();	    while (localIterator.hasNext()) {		ResultadoUniversal localj = localIterator.next();		System.out.println("resultado id=" + localj.getId() + " compuesto=" + localj.getIdCompuesto());		System.out.println(localC.accidentesHablados(localj));	    }	} catch (Exception localException) {	    localException.printStackTrace();	}    }    public static void testAMInfinitivos() {	try {//	    String[] arrayOfString = { OpPalabras.strBetaACompleto("BALEI/N") };//	    String[] arrayOfString = { OpPalabras.strBetaACompleto("A)GAGEI=N") };	    String[] arrayOfString = { OpPalabras.strBetaACompleto("LUQH=NAI") };	    	    HashSet localHashSet = new HashSet();	    ApplicationContext localApplicationContext = creaContexto();	    AMInfinitivos localJ = (AMInfinitivos) localApplicationContext.getBean("amInfinitivos");	    AMUtil localC = (AMUtil) localApplicationContext.getBean("amUtil");	    AACacheable localB = new AACacheable();	    localJ.buscaCanonica(arrayOfString, localHashSet, localB, false, true);	    System.out.println("********* resultado ****************");	    localC.debugBeans(localHashSet, new String[] { "formaAccidentada" });	} catch (Exception localException) {	    localException.printStackTrace();	}    }    public static void testTipoSustantivoIndividual() {	ApplicationContext localApplicationContext = creaContexto();	Declina localE = (Declina) localApplicationContext.getBean("declina");	GerenteSustantivos localj = (GerenteSustantivos) localApplicationContext.getBean("gerenteSustantivos");	String str1 = "-10ae9356:10a61e88d52:-7fff-10ae";	SustantivoBean locali = localj.seleccionaUno(str1);	System.out.println("comprobando " + locali.getNominativo() + " - " + locali.getGenitivo() + " id="		+ locali.getId());	String str2 = OpPalabras.strBetaACompleto(locali.getNominativo());	String str3 = OpPalabras.strBetaACompleto(locali.getGenitivo());	int i = localE.sugiereDeclinacion(str2, str3, locali.getGenero());	int j = i == locali.getTipoNominal() ? 1 : 0;	if (j == 0) {	    System.out.println("tipo en BD=" + locali.getTipoNominal() + " sugerido=" + i);	}    }    public static void testAMSustantivos() {	try {	    //String[] arrayOfString = { OpPalabras.strBetaACompleto("*GABBAQA=") };	    String[] arrayOfString = { OpPalabras.strBetaACompleto("SU_KH=N") };	    	    Set<ResultadoUniversal> localHashSet = new HashSet<ResultadoUniversal>();	    Recursos.cambiaLocale("es");	    ApplicationContext localApplicationContext = creaContexto();	    AMSustantivos localF = (AMSustantivos) localApplicationContext.getBean("amSustantivos");	    localF.setApplicationContext(localApplicationContext);	    AMUtil localC = (AMUtil) localApplicationContext.getBean("amUtil");	    AACacheable localB = new AACacheable();	    localF.buscaCanonica(arrayOfString, localHashSet, localB, false, true);	    System.out.println("********* resultado ****************");	    localC.debugBeans(localHashSet, new String[0]);	} catch (Exception localException) {	    localException.printStackTrace();	}    }    public static void testAMParticipios() {	try {	    String[] arrayOfString = { OpPalabras.strBetaACompleto("E)SFRA_GISME/NOU") };	    Set localHashSet = new HashSet();	    ApplicationContext localApplicationContext = creaContexto();	    AMParticipios localD = (AMParticipios) localApplicationContext.getBean("amParticipios");	    localD.setParticipios((Participios) localApplicationContext.getBean("participios"));	    localD.setAmUtil((AMUtil) localApplicationContext.getBean("amUtil"));	    localD.setAmNominal((AMNominal) localApplicationContext.getBean("amNominal"));	    localD.setAmVerbal((AMVerbal) localApplicationContext.getBean("amVerbal"));	    localD.setExtractorPrefijos((ExtractorPrefijos) localApplicationContext.getBean("extractorPrefijos"));	    localD.setGerenteVerbos((GerenteVerbos) localApplicationContext.getBean("gerenteVerbos"));	    localD.setGerenteVerbosCompuestos((GerenteVerbosCompuestos) localApplicationContext		    .getBean("gerenteVerbosCompuestos"));	    localD.setGerenteVerbalizadorParticipios((GerenteVerbalizadorParticipios) localApplicationContext		    .getBean("gerenteVerbalizadorParticipios"));	    AMUtil localC = (AMUtil) localApplicationContext.getBean("amUtil");	    AACacheable localB = new AACacheable();	    localD.buscaCanonica(arrayOfString, localHashSet, localB, false, true);	    System.out.println("********* resultado ****************");	    localC.debugBeans(localHashSet, new String[] { "formaCanonica" });	} catch (Exception localException) {	    localException.printStackTrace();	}    }    public static void testAMAdjetivos() {	try {	    //String[] arrayOfString = { OpPalabras.strBetaACompleto("DWDEKA/FU_LON") };	    String[] arrayOfString = { OpPalabras.strBetaACompleto("A)XI/AI_J") };	    HashSet localHashSet = new HashSet();	    ApplicationContext localApplicationContext = creaContexto();	    AMAdjetivos localL = (AMAdjetivos) localApplicationContext.getBean("amAdjetivos");	    localL.setApplicationContext(localApplicationContext);	    AMUtil localC = (AMUtil) localApplicationContext.getBean("amUtil");	    AACacheable localB = new AACacheable();	    localL.buscaCanonica(arrayOfString, localHashSet, localB, true, true);	    System.out.println("********* resultado ****************");	    localC.debugBeans(localHashSet, new String[] { "formaAccidentada" });	} catch (Exception localException) {	    localException.printStackTrace();	}    }    public static ApplicationContext creaContexto() {	DefaultListableBeanFactory localDefaultListableBeanFactory = new DefaultListableBeanFactory();	XmlBeanDefinitionReader localXmlBeanDefinitionReader = new XmlBeanDefinitionReader(		localDefaultListableBeanFactory);	FileSystemResource localFileSystemResource = new FileSystemResource(System.getProperty("user.dir")		+ File.separator + "daos.xml");	localXmlBeanDefinitionReader.loadBeanDefinitions(localFileSystemResource);	localFileSystemResource = new FileSystemResource(System.getProperty("user.dir") + File.separator		+ "gerentes-datos.xml");	localXmlBeanDefinitionReader.loadBeanDefinitions(localFileSystemResource);	localFileSystemResource = new FileSystemResource(System.getProperty("user.dir") + File.separator		+ "flexion.xml");	localXmlBeanDefinitionReader.loadBeanDefinitions(localFileSystemResource);	localFileSystemResource = new FileSystemResource(System.getProperty("user.dir") + File.separator		+ "analisisMorfologico.xml");	localXmlBeanDefinitionReader.loadBeanDefinitions(localFileSystemResource);	GenericApplicationContext localGenericApplicationContext = new GenericApplicationContext(		localDefaultListableBeanFactory);	return localGenericApplicationContext;    }    public static void main(String[] paramArrayOfString) {	DOMConfigurator.configure("log4j.xml");	Recursos.cambiaLocale(Configuracion.getUltimoIdioma());	testAMSustantivos();    }}