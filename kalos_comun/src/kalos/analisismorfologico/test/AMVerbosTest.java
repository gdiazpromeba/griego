package kalos.analisismorfologico.test;import java.io.File;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import junit.framework.TestCase;import kalos.analisismorfologico.negocio.AMVerbos;import kalos.beans.ResultadoUniversal;import kalos.beans.TestVerboBean;import kalos.datos.gerentes.GerenteTestVerbos;import kalos.enumeraciones.CompLetras;import kalos.enumeraciones.Modo;import kalos.enumeraciones.Persona;import kalos.enumeraciones.Tiempo;import kalos.enumeraciones.Voz;import kalos.operaciones.AACacheable;import kalos.operaciones.OpBeans;import kalos.operaciones.OpPalabras;import org.springframework.beans.factory.support.DefaultListableBeanFactory;import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;import org.springframework.context.ApplicationContext;import org.springframework.context.support.GenericApplicationContext;import org.springframework.core.io.FileSystemResource;public class AMVerbosTest extends TestCase implements CompLetras {    private AMVerbos j;    private GerenteTestVerbos h;    private static long i = 0L;    public AMVerbosTest(String paramString) {	super(paramString);    }    public static void main(String[] paramArrayOfString) {	new AMVerbosTest("testRegulares");    }    public void testTabla() {	try {	    List<TestVerboBean> localList = this.h.seleccionaTodos();	    String str = "";	    AACacheable localB = null;	    Iterator<TestVerboBean> localIterator = localList.iterator();	    while (localIterator.hasNext()) {		TestVerboBean localJ = localIterator.next();		if (!str.equals(localJ.getIdVerbo())) {		    localB = new AACacheable();		}		boolean bool = testGenerico(localJ.getFormaConjugada(), localJ.getIdVerbo(), localJ.getVoz(),			localJ.getModo(), localJ.getTiempo(), localJ.getPersona(), localB, false);		assertTrue(bool);		if (!bool) {		    break;		}	    }	} catch (Exception localException) {	    localException.printStackTrace();	}    }    public boolean testGenerico(String paramString1, String paramString2, Voz paramZ, Modo paramp, Tiempo paramj,	    Persona param_, AACacheable paramB, boolean paramBoolean) {	System.out.print("conjugando ... " + paramString1);	String[] arrayOfString = { OpPalabras.strBetaACompleto(paramString1) };	Set<ResultadoUniversal> localHashSet = new HashSet<ResultadoUniversal>();	long l = this.j.buscaCanonica(arrayOfString, localHashSet, paramB, false, paramBoolean);	i += l;	System.out.print("  tardanza=" + l + " tiempo acumulado=" + i + "\n");	boolean bool = false;	Iterator<ResultadoUniversal> localIterator = localHashSet.iterator();	while (localIterator.hasNext()) {	    ResultadoUniversal localj = localIterator.next();	    try {		if ((localj.getIdSimpleOCompuesto().equals(paramString2)) && (localj.getVoz().equals(paramZ))			&& (localj.getModo().equals(paramp)) && (localj.getPersona().equals(param_))			&& (localj.getTiempo().equals(paramj))) {		    bool = true;		    break;		}	    } catch (Exception localException) {		System.out.println("el registro siguiente:");		OpBeans.debugBean(localj, new String[0]);		System.out.println("no coincide con los siguientes valores esperados:");		System.out.println("  idVerbo=" + paramString2);		System.out.println("  voz=" + paramZ);		System.out.println("  modo=" + paramp);		System.out.println("  tiempo=" + paramj);		System.out.println("  persona=" + param_);		bool = false;		break;	    }	}	return bool;    }    public static ApplicationContext creaContexto() {	DefaultListableBeanFactory localDefaultListableBeanFactory = new DefaultListableBeanFactory();	XmlBeanDefinitionReader localXmlBeanDefinitionReader = new XmlBeanDefinitionReader(		localDefaultListableBeanFactory);	FileSystemResource localFileSystemResource = new FileSystemResource(System.getProperty("user.dir")		+ File.separator + "daos.xml");	localXmlBeanDefinitionReader.loadBeanDefinitions(localFileSystemResource);	localFileSystemResource = new FileSystemResource(System.getProperty("user.dir") + File.separator		+ "gerentes-datos.xml");	localXmlBeanDefinitionReader.loadBeanDefinitions(localFileSystemResource);	localFileSystemResource = new FileSystemResource(System.getProperty("user.dir") + File.separator		+ "flexion.xml");	localXmlBeanDefinitionReader.loadBeanDefinitions(localFileSystemResource);	localFileSystemResource = new FileSystemResource(System.getProperty("user.dir") + File.separator		+ "analisisMorfologico.xml");	localXmlBeanDefinitionReader.loadBeanDefinitions(localFileSystemResource);	GenericApplicationContext localGenericApplicationContext = new GenericApplicationContext(		localDefaultListableBeanFactory);	return localGenericApplicationContext;    }    protected void setUp() throws Exception {	ApplicationContext localApplicationContext = creaContexto();	this.j = ((AMVerbos) localApplicationContext.getBean("amVerbos"));	this.h = ((GerenteTestVerbos) localApplicationContext.getBean("gerenteTestVerbos"));    }}