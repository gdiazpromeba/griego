package kalos.flexion.conjugacion.negocio;import java.io.PrintStream;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import kalos.B.P;import kalos.B.Z;import kalos.B._;import kalos.B.j;import kalos.B.k;import kalos.B.p;import kalos.E.E.O;import kalos.G.I;import kalos.K.d;import kalos.enumeraciones.Aspecto;import kalos.enumeraciones.FuerteDebil;import kalos.enumeraciones.Voz;public class ManejaDesinenciasInfinitivo{  private List<D>[][][][] B = new List[7][4][6][2];  _A[] A = { new _A(1, Z.D, p.C, j.M, _.H, 1), new _A(1, Z.D, p.C, j.M, _.H, 2), new _A(1, Z.D, p.C, j.M, _.B, 1), new _A(1, Z.D, p.C, j.M, _.B, 2), new _A(1, Z.D, p.C, j.M, _.A, 1), new _A(1, Z.D, p.C, j.M, _.A, 2), new _A(1, Z.D, p.C, j.M, _.C, 1), new _A(1, Z.D, p.C, j.M, _.C, 2), new _A(1, Z.D, p.C, j.M, _.F, 1), new _A(1, Z.D, p.C, j.M, _.F, 2), new _A(1, Z.D, p.A, j.O, _.B, 1), new _A(1, Z.D, p.A, j.O, _.B, 2), new _A(1, Z.D, p.A, j.O, _.D, 1), new _A(1, Z.D, p.A, j.O, _.D, 2), new _A(1, Z.D, p.A, j.O, _.F, 1), new _A(1, Z.D, p.A, j.O, _.F, 2), new _A(1, Z.D, p.E, j.Q, _.F, 1), new _A(1, Z.D, p.E, j.Q, _.F, 2), new _A(1, Z.D, p.E, j.O, _.F, 1), new _A(1, Z.D, p.E, j.O, _.F, 2), new _A(1, Z.D, p.E, j.L, _.F, 1), new _A(1, Z.D, p.E, j.L, _.F, 2), new _A(1, Z.A, p.E, j.Q, _.F, 1), new _A(1, Z.A, p.E, j.Q, _.F, 2), new _A(1, Z.A, p.E, j.O, _.F, 1), new _A(1, Z.A, p.E, j.O, _.F, 2), new _A(1, Z.A, p.E, j.L, _.H, 1), new _A(1, Z.A, p.E, j.L, _.H, 2), new _A(1, Z.C, p.E, j.O, _.H, 1), new _A(1, Z.C, p.E, j.O, _.H, 2) };    public Desinencia[] getDesinencias(int paramInt, Voz paramZ, Aspecto paramk, FuerteDebil paramP)  {    int i = Z.getInt(paramZ);    int j = k.getInt(paramk);    int k = P.getInt(paramP);    List localList = this.B[paramInt][i][j][k];    if (localList == null) {      return null;    }    try    {      return (D[])localList.toArray(new D[0]);    }    catch (Exception localException)    {      System.out.println("error al tratar de obtener la desinencia ***********");      System.out.println("juego=" + paramInt);      System.out.println("voz=" + paramZ);      System.out.println("aspecto=" + paramk);      System.out.println("fuetre=" + paramP);      System.out.println("***************************************************");      throw new RuntimeException("error en ManejaDesinenciasInfinitivo.getDesinencias()");    }  }    private void A(int paramInt1, Z paramZ, k paramk, P paramP, String paramString, int paramInt2, kalos.B.E paramE)  {    int i = Z.getInt(paramZ);    int j = k.getInt(paramk);    int k = P.getInt(paramP);    try    {      if (this.B[paramInt1][i][j][k] == null) {        this.temaComido[paramInt1][i][j][k] = new ArrayList();      }      this.temaComido[paramInt1][i][j][k].add(new D(paramString, paramInt2, paramE, paramInt1));    }    catch (Exception localException)    {      System.out.println("error al tratar de obtener la desinencia ***********");      System.out.println("juego=" + paramInt1);      System.out.println("voz=" + paramZ);      System.out.println("aspecto=" + paramk);      System.out.println("fuerte=" + paramP);      System.out.println("***************************************************");      throw new RuntimeException("error en ManejaDesinenciasInfinitivo.setDesinencias()");    }  }    public E(boolean paramBoolean, O paramO)  {    List localList;    if (!paramBoolean) {      localList = paramO.seleccionaRestringidas();    } else {      localList = paramO.seleccionaTodas();    }    Iterator localIterator = localList.iterator();    while (localIterator.hasNext())    {      d locald = (d)localIterator.next();      A(locald.getJuego(), locald.getVoz(), locald.getAspecto(), locald.getFuerte(), I.strBetaACompleto(locald.getDesinencia()), locald.getSilaba(), locald.getAcento());    }  }    class _A  {    public int E;    public int B;    public Z C;    public p G;    public j F;    public _ D;        public _A(int paramInt1, Z paramZ, p paramp, j paramj, _ param_, int paramInt2)    {      this.E = paramInt1;      this.C = paramZ;      this.G = paramp;      this.F = paramj;      this.D = param_;      this.B = paramInt2;    }  }}