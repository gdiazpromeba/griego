// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package kalos.flexion;import javax.swing.table.DefaultTableModel;import kalos.enumeraciones.Caso;import kalos.enumeraciones.Genero;import kalos.enumeraciones.Modo;import kalos.enumeraciones.Numero;import kalos.enumeraciones.Reportes;import kalos.enumeraciones.TipoPalabra;import kalos.enumeraciones.Voz;import kalos.recursos.Recursos;import org.apache.log4j.Logger;// Referenced classes of package kalos.H://            M, L, C, H, //            I, E, Dpublic class CreadorTableModelsBasicos {    public CreadorTableModelsBasicos() {	logger = Logger.getLogger(getClass().getName());    }    public DefaultTableModel getTMReporte(String s, Reportes m) {	switch (m) {	case VERBOS_POR_MODO:	    return getVerbosCompleto(s, false);	case VERBOS_POR_MODO_SIN_DUAL:	    return getVerbosCompleto(s, true);	case VERBOS_POR_VOZ:	    return getVerbosCompletoVozPrimero(s, false);	case VERBOS_POR_VOZ_SIN_DUAL:	    return getVerbosCompletoVozPrimero(s, true);	case VERBOS_POR_MODO_ABREVIADO:	    return getVerbosCompacto(s);	case PARTICIPIOS_POR_NUMERO:	    return getParticipiosCompleto(s, false);	case PARTICIPIOS_POR_VOZ:	    return getParticipiosCompletoVozPrimero(s, false, false);	case PARTICIPIOS_POR_NUMERO_SIN_DUAL:	    return getParticipiosCompletoSinDuales(s, false);	case PARTICIPIOS_POR_VOZ_SIN_DUAL:	    return getParticipiosCompletoVozPrimero(s, false, true);	case PARTICIPIOS_POR_NUMERO_SIN_VOCATIVO:	    return getParticipiosCompleto(s, true);	case PARTICIPIOS_POR_VOZ_SIN_VOCATIVO:	    return getParticipiosCompletoVozPrimero(s, true, false);	case PARTICIPIOS_POR_CASO_ABREVIADO:	    return getParticipiosCompacto(s);	case PARTICIPIOS_POR_VOZ_ABREVIADO:	    return getParticipiosCompactoVozPrimero(s);	case INFINITIVOS_POR_VOZ:	    return getInfinitivos(s);	case SUSTANTIVOS_POR_NUMERO_SIN_DUAL:	    return getSustantivosPorNumero(s, true);	case SUSTANTIVOS_POR_NUMERO:	    return getSustantivosPorNumero(s, false);	case ARTICULOS_POR_GENERO:	    return getParticulasPorTipo(TipoPalabra.Articulo);	case PRONOMBRES_PERSONALES_POR_CASO_SIN_DUAL:	    return getPronombresPersonalesPorCaso(true);	case PRONOMBRES_RELATIVOS_POR_GENERO_1:	    return getPronombresRelativos("2213895001115bd9d355912800022138");	case PRONOMBRES_RELATIVOS_POR_GENERO_2:	    return getPronombresRelativos("b695e4e1115bd9dcf76128000b695e4e");	case PRONOMBRES_RELATIVOS_POR_GENERO_3:	    return getPronombresRelativos("5b62bf91111a838b550d1280005b62bf");	case PRONOMBRES_INTERROGATIVOS_POR_GENERO:	    return getPronombresInterrogativos("154a3f921115ece6a2ac128000154a3f");	case PRONOMBRES_REFLEXIVOS_POR_GENERO:	    return getPronombresReflexivos("256406591115d5461a4a128000256406");	case PRONOMBRES_PERSONALES_POR_CASO:	    return getPronombresPersonalesPorCaso(false);	case CONJUNCIONES_POR_TIPO:	    return getConjuncionesPorTipo();	case CONJUNCIONES_ALFABETICO:	    return getConjuncionesAlfabeticamente();	case PREPOSICIONES_ALFABETICO:	    return getPreposicionesAlfabeticamente();	case PREPOSICIONES_POR_CASO:	    return getPreposicionesPorCaso();	case INTERJECCIONES_ALFABETICO:	    return getInterjeccionesAlfabeticamente();	case PRONOMBRES_INDEFINIDOS_POR_GENERO:	    return getPronombresRelativos("32ad7868111a781de0a112800032ad78");	default:	    throw new RuntimeException(		    "tipo de tableModel desconocido requerido en CreadorTableModelsGrilla.getTMReporte: " + m);	}    }    public DefaultTableModel getParticulasPorTipo(TipoPalabra l1) {	DefaultTableModel defaulttablemodel = E.getTMModeloParticulas(l1);	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "GENERO",		"SUBINDICE" }, new boolean[] { true, true, true, true, true });	H.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },		new String[] { "PARTICULARIDAD", "CASO", "SUBINDICE" }, "GENERO", new Object[] { Genero.Masculino,			Genero.Femenino, Genero.Neutro }, "FORMA", new String[] { "MASCULINO", "FEMENINO", "NEUTRO" });	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },		new boolean[] { true, true, true, true });	H.borraColumna(defaulttablemodel, "SUBINDICE");	return defaulttablemodel;    }    public DefaultTableModel getPronombresPersonalesPorCaso(boolean flag) {	DefaultTableModel defaulttablemodel = E.getTMPronombresPersonales(flag);	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "CASO", "SUBINDICE" },		new boolean[] { true, true, true, true });	H.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "SUBINDICE" }, new String[] {		"PARTICULARIDAD", "PERSONA", "SUBINDICE" }, "CASO", new Object[] { Caso.Nominativo, Caso.Acusativo,		Caso.Genitivo, Caso.Dativo }, "FORMA", new String[] { "NOMINATIVO", "ACUSATIVO", "GENITIVO", "DATIVO" });	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "SUBINDICE" },		new boolean[] { true, true, true });	H.borraColumna(defaulttablemodel, "SUBINDICE");	return defaulttablemodel;    }    public DefaultTableModel getPronombresRelativos(String s) {	DefaultTableModel defaulttablemodel = E.getTMPronombresRelativos(s);	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "GENERO",		"SUBINDICE" }, new boolean[] { true, true, true, true, true });	H.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },		new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" }, "GENERO", new Object[] {			Genero.Masculino, Genero.Femenino, Genero.Neutro }, "FORMA", new String[] { "MASCULINO",			"FEMENINO", "NEUTRO" });	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },		new boolean[] { true, true, true, true });	H.borraColumna(defaulttablemodel, "SUBINDICE");	return defaulttablemodel;    }    public DefaultTableModel getPronombresIndefinidos(String s) {	DefaultTableModel defaulttablemodel = E.getTMPronombresRelativos(s);	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "GENERO",		"SUBINDICE" }, new boolean[] { true, true, true, true, true });	H.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },		new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" }, "GENERO", new Object[] {			Genero.MasculinoOFemenino, Genero.Neutro }, "FORMA", new String[] { "MASC_FEM", "NEUTRO" });	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },		new boolean[] { true, true, true, true });	H.borraColumna(defaulttablemodel, "SUBINDICE");	return defaulttablemodel;    }    public DefaultTableModel getPronombresInterrogativos(String s) {	DefaultTableModel defaulttablemodel = E.getTMPronombresInterrogativos(s);	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "GENERO",		"SUBINDICE" }, new boolean[] { true, true, true, true, true });	H.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },		new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" }, "GENERO", new Object[] {			Genero.MasculinoOFemenino, Genero.Neutro }, "FORMA", new String[] { "MASC_FEM", "NEUTRO" });	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "NUMERO", "CASO", "SUBINDICE" },		new boolean[] { true, true, true, true });	H.borraColumna(defaulttablemodel, "SUBINDICE");	return defaulttablemodel;    }    public DefaultTableModel getPronombresReflexivos(String s) {	DefaultTableModel defaulttablemodel = E.getTMPronombresReflexivos(s);	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "CASO", "GENERO",		"SUBINDICE" }, new boolean[] { true, true, true, true, true });	H.horizontaliza(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "CASO", "SUBINDICE" },		new String[] { "PARTICULARIDAD", "PERSONA", "CASO", "SUBINDICE" }, "GENERO", new Object[] {			Genero.Masculino, Genero.Femenino, Genero.Neutro }, "FORMA", new String[] { "MASCULINO",			"FEMENINO", "NEUTRO" });	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "PERSONA", "CASO", "SUBINDICE" },		new boolean[] { true, true, true, true });	H.borraColumna(defaulttablemodel, "SUBINDICE");	return defaulttablemodel;    }    public DefaultTableModel getConjuncionesPorTipo() {	DefaultTableModel defaulttablemodel = D.getTMModeloConjunciones();	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTICULARIDAD", "TIPO", "SUBTIPO", "CODIGO", "FORMA",		"SIGNIFICADO" }, new boolean[] { true, true, true, true, true, true });	H.borraColumna(defaulttablemodel, "CODIGO");	return defaulttablemodel;    }    public DefaultTableModel getConjuncionesAlfabeticamente() {	DefaultTableModel defaulttablemodel = D.getTMModeloConjunciones();	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "CODIGO" }, new boolean[] { true });	H.borraColumna(defaulttablemodel, "CODIGO");	return defaulttablemodel;    }    public DefaultTableModel getPreposicionesAlfabeticamente() {	DefaultTableModel defaulttablemodel = A.getTMModeloPreposiciones();	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "ORDEN" }, new boolean[] { true });	H.borraColumna(defaulttablemodel, "ORDEN");	return defaulttablemodel;    }    public DefaultTableModel getPreposicionesPorCaso() {	DefaultTableModel defaulttablemodel = A.getTMModeloPreposiciones();	H.ordenaSegunColumnas(defaulttablemodel, new String[] { "CASOS", "ORDEN" }, new boolean[] { true, true });	H.borraColumna(defaulttablemodel, "ORDEN");	return defaulttablemodel;    }    public DefaultTableModel getInterjeccionesAlfabeticamente() {	DefaultTableModel defaulttablemodel = F.getTMModeloInterjecciones();	return defaulttablemodel;    }    public DefaultTableModel getVerbosCompleto(String s, boolean sinDual) {	DefaultTableModel defaulttablemodel = G.modeloVerbosPorModos(s, sinDual);	if (defaulttablemodel.getRowCount() == 0) {	    return null;	} else {	    H.horizontaliza(defaulttablemodel,		    new String[] { "PARTIC", "VOZ", "TIEMPO", "FUERTE", "PERSONA", "SUBPART" }, new String[] {			    "PARTIC", "VOZ", "TIEMPO", "FUERTE", "PERSONA", "SUBPART" }, "MODO", new Object[] {			    Modo.Indicativo, Modo.Subjuntivo, Modo.Optativo, Modo.Imperativo }, "FORMA", new String[] {			    "INDICATIVO", "SUBJUNTIVO", "OPTATIVO", "IMPERATIVO" });	    H.borraColumna(defaulttablemodel, "SUBPART");	    H.fusionaTiempos(defaulttablemodel);	    return defaulttablemodel;	}    }    public DefaultTableModel getVerbosCompletoVozPrimero(String s, boolean sinDual) {	DefaultTableModel defaulttablemodel = G.modeloVerbosPorModos(s, sinDual);	if (defaulttablemodel.getRowCount() == 0) {	    return null;	} else {	    H.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "MODO", "TIEMPO", "FUERTE", "PERSONA",		    "SUBPART" }, new String[] { "PARTIC", "MODO", "TIEMPO", "FUERTE", "PERSONA", "SUBPART" }, "VOZ",		    new Object[] { Voz.Activa, Voz.Media, Voz.Pasiva }, "FORMA", new String[] { "ACTIVA", "MEDIA",			    "PASIVA" });	    H.fusionaTiempos(defaulttablemodel);	    H.borraColumna(defaulttablemodel, "SUBPART");	    return defaulttablemodel;	}    }    public DefaultTableModel getInfinitivos(String paramString) {	DefaultTableModel localDefaultTableModel = this.G.modeloInfinitivos(paramString);	if (localDefaultTableModel.getRowCount() == 0) {	    return null;	}	this.H.horizontaliza(localDefaultTableModel, new String[] { "PARTIC", "SUBPART", "ASPECTO", "FUERTE" },		new String[] { "PARTIC", "ASPECTO", "FUERTE", "SUBPART" }, "VOZ", new Object[] { Voz.Activa, Voz.Media,			Voz.Pasiva }, "FORMA", new String[] { "ACTIVA", "MEDIA", "PASIVA" });	String[] arrayOfString1 = Recursos.getArray(new String[] { "futuro", "confectivo", "perfectivo" });	String[] arrayOfString2 = Recursos.getArray(new String[] { "futuro", "confectivo", "perfectivo" });	for (int i = 0; i < arrayOfString2.length; i++) {	    int tmp188_186 = i;	    String[] tmp188_184 = arrayOfString2;	    tmp188_184[tmp188_186] = (tmp188_184[tmp188_186] + " II");	}	this.H.fusionaColumnas(localDefaultTableModel, 2, 3, arrayOfString1,		new Object[] { Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(1) },		arrayOfString2);	this.H.borraColumna(localDefaultTableModel, "FUERTE");	return localDefaultTableModel;    }    public DefaultTableModel getSustantivosPorNumero(String s, boolean flag) {	DefaultTableModel defaulttablemodel = B.A(s, !flag);	if (defaulttablemodel.getRowCount() == 0)	    return null;	String as[];	Numero an[];	if (flag) {	    as = (new String[] { "SINGULAR", "PLURAL", "DUAL" });	    an = (new Numero[] { Numero.Singular, Numero.Plural, Numero.Dual });	} else {	    as = (new String[] { "SINGULAR", "PLURAL" });	    an = (new Numero[] { Numero.Singular, Numero.Plural });	}	H.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "CASO", "SUBINDICE" }, new String[] { "PARTIC",		"CASO", "SUBINDICE" }, "NUMERO", an, "FORMA", as);	H.borraColumna(defaulttablemodel, "SUBINDICE");	return defaulttablemodel;    }    public DefaultTableModel getAdjetivosPorGenero(String s) {	DefaultTableModel defaulttablemodel = B.B(s, false);	if (defaulttablemodel.getRowCount() == 0) {	    return null;	} else {	    H.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "GRADO", "NUMERO", "CASO", "SUBINDICE" },		    new String[] { "PARTIC", "GRADO", "NUMERO", "CASO", "SUBINDICE" }, "GENERO", new Object[] {			    Genero.MasculinoOFemenino, Genero.Masculino, Genero.Femenino, Genero.Neutro }, "FORMA",		    new String[] { "MASC_FEM", "MASCULINO", "FEMENINO", "NEUTRO" });	    H.borraColumna(defaulttablemodel, "SUBINDICE");	    H.borraColumnaNula(defaulttablemodel, "MASC_FEM");	    H.borraColumnaNula(defaulttablemodel, "MASCULINO");	    H.borraColumnaNula(defaulttablemodel, "FEMENINO");	    return defaulttablemodel;	}    }    public DefaultTableModel getAdjetivosPorNumero(String s, boolean flag) {	DefaultTableModel defaulttablemodel = B.B(s, !flag);	if (defaulttablemodel.getRowCount() == 0)	    return null;	String as[];	Numero an[];	if (flag) {	    as = (new String[] { "SINGULAR", "PLURAL", "DUAL" });	    an = (new Numero[] { Numero.Singular, Numero.Plural, Numero.Dual });	} else {	    as = (new String[] { "SINGULAR", "PLURAL" });	    an = (new Numero[] { Numero.Singular, Numero.Plural });	}	H.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "GRADO", "GENERO", "CASO", "SUBINDICE" },		new String[] { "PARTIC", "GRADO", "GENERO", "CASO", "SUBINDICE" }, "NUMERO", an, "FORMA", as);	H.borraColumna(defaulttablemodel, "SUBINDICE");	return defaulttablemodel;    }    public DefaultTableModel getVerbosCompacto(String s) {	DefaultTableModel defaulttablemodel = G.modeloVerbosPorModosCompacto(s);	if (defaulttablemodel.getRowCount() == 0) {	    return null;	} else {	    H.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "SUBPART", "TIEMPO", "FUERTE", "PERSONA" },		    new String[] { "PARTIC", "TIEMPO", "FUERTE", "PERSONA", "SUBPART" }, "VOZ", new Object[] {			    Voz.Activa, Voz.Media, Voz.Pasiva }, "FORMA", new String[] { "ACTIVA", "MEDIA", "PASIVA" });	    H.borraColumna(defaulttablemodel, "SUBPART");	    H.borraColumna(defaulttablemodel, "PERSONA");	    H.borraColumna(defaulttablemodel, "MODO");	    H.fusionaTiempos(defaulttablemodel);	    return defaulttablemodel;	}    }    public DefaultTableModel getParticipiosCompacto(String s) {	DefaultTableModel defaulttablemodel = B.A(s);	if (defaulttablemodel.getRowCount() == 0) {	    return null;	} else {	    H.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO",		    "SUBPART", "TIPO" }, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO", "SUBPART",		    "TIPO" }, "CASO", new Enum[] { Caso.Nominativo, Caso.Genitivo }, "FORMA", new String[] {		    "NOMINATIVO", "GENITIVO" });	    H.fusionaAspectos(defaulttablemodel);	    H.borraColumna(defaulttablemodel, "SUBPART");	    H.borraColumna(defaulttablemodel, "TIPO");	    return defaulttablemodel;	}    }    public DefaultTableModel getParticipiosCompactoVozPrimero(String s) {	DefaultTableModel defaulttablemodel = B.B(s);	if (defaulttablemodel.getRowCount() == 0) {	    return null;	} else {	    H.ordenaSegunColumnas(defaulttablemodel, new String[] { "PARTIC", "ASPECTO", "FUERTE", "CASO", "GENERO",		    "SUBPART" }, new boolean[] { true, true, true, true, true, true });	    H.borraColumna(defaulttablemodel, "TIPO");	    H.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "ASPECTO", "FUERTE", "CASO", "GENERO",		    "SUBPART" }, new String[] { "PARTIC", "ASPECTO", "FUERTE", "CASO", "GENERO", "SUBPART" }, "VOZ",		    new Voz[] { Voz.Activa, Voz.Media, Voz.Pasiva }, "FORMA", new String[] { "ACTIVA", "MEDIA",			    "PASIVA" });	    H.fusionaAspectos(defaulttablemodel);	    H.borraColumna(defaulttablemodel, "SUBPART");	    return defaulttablemodel;	}    }    public DefaultTableModel getParticipiosCompleto(String s, boolean flag) {	DefaultTableModel defaulttablemodel = B.A(s, flag, false);	if (defaulttablemodel.getRowCount() == 0)	    return null;	H.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO", "CASO",		"SUBPART" }, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO", "CASO", "SUBPART" },		"NUMERO", new Object[] { Numero.Singular, Numero.Plural, Numero.Dual }, "FORMA", new String[] {			"SINGULAR", "PLURAL", "DUAL" });	H.borraColumna(defaulttablemodel, "SUBPART");	H.fusionaAspectos(defaulttablemodel);	if (flag)	    H.cambiaValorColumna(defaulttablemodel, "CASO", Recursos.getCadena("nominativo"),		    Recursos.getCadena("nom_voc"));	return defaulttablemodel;    }    public DefaultTableModel getParticipiosCompletoSinDuales(String s, boolean flag) {	DefaultTableModel defaulttablemodel = B.A(s, flag, true);	if (defaulttablemodel.getRowCount() == 0)	    return null;	H.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO", "CASO",		"SUBPART" }, new String[] { "PARTIC", "ASPECTO", "FUERTE", "VOZ", "GENERO", "CASO", "SUBPART" },		"NUMERO", new Object[] { Numero.Singular, Numero.Plural }, "FORMA",		new String[] { "SINGULAR", "PLURAL" });	H.fusionaAspectos(defaulttablemodel);	H.borraColumna(defaulttablemodel, "SUBPART");	if (flag)	    H.cambiaValorColumna(defaulttablemodel, "CASO", Recursos.getCadena("nominativo"),		    Recursos.getCadena("nom_voc"));	return defaulttablemodel;    }    public DefaultTableModel getParticipiosCompletoVozPrimero(String s, boolean flag, boolean flag1) {	DefaultTableModel defaulttablemodel = B.A(s, flag, flag1);	if (defaulttablemodel.getRowCount() == 0)	    return null;	H.horizontaliza(defaulttablemodel, new String[] { "PARTIC", "ASPECTO", "FUERTE", "NUMERO", "GENERO", "CASO",		"SUBPART" }, new String[] { "PARTIC", "ASPECTO", "FUERTE", "NUMERO", "GENERO", "CASO", "SUBPART" },		"VOZ", new Object[] { Voz.Activa, Voz.Media, Voz.Pasiva }, "FORMA", new String[] { "ACTIVA", "MEDIA",			"PASIVA" });	H.borraColumna(defaulttablemodel, "SUBPART");	H.fusionaAspectos(defaulttablemodel);	if (flag)	    H.cambiaValorColumna(defaulttablemodel, "CASO", Recursos.getCadena("nominativo"),		    Recursos.getCadena("nom_voc"));	return defaulttablemodel;    }    public void setProveedorDMNominal(ProveedorDMNominal m) {	B = m;    }    public ProveedorDMVerbal getProveedorDMVerbal() {	return G;    }    public void setProveedorDMVerbal(ProveedorDMVerbal d) {	G = d;    }    public void setUtilidadesTM(UtilidadesTM c) {	H = c;    }    public void setProveedorDMParticulas(ProveedorDMParticulas l1) {	E = l1;    }    public void setProveedorDMConjunciones(ProveedorDMConjunciones h) {	D = h;    }    public void setProveedorDMPreposiciones(ProveedorDMPreposiciones i) {	A = i;    }    public void setProveedorDMInterjecciones(ProveedorDMInterjecciones e) {	F = e;    }    Logger logger;    private UtilidadesTM H;    private ProveedorDMNominal B;    private ProveedorDMParticulas E;    private ProveedorDMVerbal G;    private ProveedorDMConjunciones D;    private ProveedorDMPreposiciones A;    private ProveedorDMInterjecciones F;}