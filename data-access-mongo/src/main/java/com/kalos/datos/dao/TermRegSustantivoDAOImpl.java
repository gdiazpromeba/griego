// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package com.kalos.datos.dao;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Types;import java.util.List;import javax.sql.DataSource;import org.springframework.jdbc.core.SqlParameter;import org.springframework.jdbc.core.support.JdbcDaoSupport;import org.springframework.jdbc.object.MappingSqlQuery;import org.springframework.jdbc.object.SqlUpdate;// Referenced classes of package kalos.E.C://            Simport com.kalos.beans.TermRegSustantivo;import com.kalos.enumeraciones.Acento;import com.kalos.enumeraciones.Caso;import com.kalos.enumeraciones.Numero;import com.kalos.enumeraciones.OrigenTema;import com.kalos.enumeraciones.Silaba;public class TermRegSustantivoDAOImpl extends JdbcDaoSupport implements TermRegSustantivoDAO{    private class Insercion extends SqlUpdate {                public Insercion(DataSource datasource) {            super(datasource, INSERT_SQL);            declareParameter(new SqlParameter(Types.INTEGER));  //TIPO_SUSTANTIVO            declareParameter(new SqlParameter(Types.INTEGER));  //CASO            declareParameter(new SqlParameter(Types.INTEGER));  //NUMERO            declareParameter(new SqlParameter(Types.CHAR));  //ORIGEN_TEMA            declareParameter(new SqlParameter(Types.INTEGER)); //SUB√çNDICE            declareParameter(new SqlParameter(Types.VARCHAR));  //TERMINACION            declareParameter(new SqlParameter(Types.INTEGER));  //EX-CONTRACCION            declareParameter(new SqlParameter(Types.VARCHAR)); //TIPOS_SUST_HOJA            declareParameter(new SqlParameter(Types.INTEGER));  //ACENTO              declareParameter(new SqlParameter(Types.INTEGER));  //SILABA            declareParameter(new SqlParameter(Types.INTEGER));  //ACENTO_CONCUERDA            declareParameter(new SqlParameter(Types.INTEGER));  //POSICION_CONCUERDA            declareParameter(new SqlParameter(Types.VARCHAR));  //REGEX_DESINENCIA        }    }    private class SeleccionMaxSub extends MappingSqlQuery {        protected Object mapRow(ResultSet resultset, int i) throws SQLException {            Integer integer = Integer.valueOf(resultset.getInt(1));            return integer;        }        public SeleccionMaxSub(DataSource datasource) {            super(datasource, TermRegSustantivoDAOImpl.B());            declareParameter(new SqlParameter(4));            declareParameter(new SqlParameter(4));            declareParameter(new SqlParameter(4));        }    }    class SeleccionPosSubstring extends SeleccionAbstracta {        public SeleccionPosSubstring(DataSource datasource) {            super(datasource, TermRegSustantivoDAOImpl.SELECT_POR_SUBSTRING_SQL);            declareParameter(new SqlParameter(Types.VARCHAR));            declareParameter(new SqlParameter(Types.VARCHAR));            declareParameter(new SqlParameter(Types.VARCHAR));        }    }    abstract class SeleccionAbstracta extends MappingSqlQuery {        protected Object mapRow(ResultSet resultset, int i) throws SQLException {            TermRegSustantivo bean = new TermRegSustantivo();            bean.setTipoSustantivo(resultset.getInt("TIPO_SUSTANTIVO"));            bean.setCaso(Caso.getEnum(resultset.getInt("CASO")));            bean.setNumero(Numero.getEnum(resultset.getInt("NUMERO")));            bean.setOrigenTema(OrigenTema.getEnum(resultset.getString("ORIGEN_TEMA")));            bean.setSubindice(resultset.getInt("SUBINDICE"));            bean.setTerminacion(resultset.getString("TERMINACION"));            bean.setTiposHoja(resultset.getString("TIPOS_SUST_HOJA"));            bean.setExContraccion(resultset.getInt("EX_CONTRACCION") == 1);            bean.setAcentoConcuerda(resultset.getInt("ACENTO_CONCUERDA"));            bean.setPosicionConcuerda(resultset.getInt("POSICION_CONCUERDA"));            bean.setAcento(Acento.getEnum(resultset.getInt("ACENTO")));            bean.setSilaba(Silaba.getEnum(resultset.getInt("SILABA")));            bean.setRegExDesinencia(resultset.getString("REGEX_DESINENCIA"));            return bean;        }        public SeleccionAbstracta(DataSource datasource, String s) {            super(datasource, s);        }    }    void puebla() {        StringBuffer stringbuffer = new StringBuffer(200);        stringbuffer.append("SELECT \n");        stringbuffer.append("   TIPO_SUSTANTIVO, \n");        stringbuffer.append("   CASO, \n");        stringbuffer.append("   NUMERO, \n");        stringbuffer.append("   ORIGEN_TEMA, \n");        stringbuffer.append("   SUBINDICE, \n");        stringbuffer.append("   TERMINACION, \n");        stringbuffer.append("   TIPOS_SUST_HOJA, \n");        stringbuffer.append("   EX_CONTRACCION, \n");        stringbuffer.append("   ACENTO_CONCUERDA, \n");        stringbuffer.append("   POSICION_CONCUERDA, \n");        stringbuffer.append("   ACENTO, \n");        stringbuffer.append("   SILABA, \n");        stringbuffer.append("   REGEX_DESINENCIA \n");        stringbuffer.append("FROM \n");        stringbuffer.append("   TERM_REG_SUST \n");        stringbuffer.append("WHERE \n");        stringbuffer.append(" SUBSTRING(?, LENGTH(?)-LENGTH(TERMINACION)+1, LENGTH(?))=TERMINACION \n");        SELECT_POR_SUBSTRING_SQL = stringbuffer.toString();        stringbuffer = new StringBuffer(200);        stringbuffer.append("SELECT \n");        stringbuffer.append("   COALESCE(MAX (SUBINDICE), -1) \n");        stringbuffer.append("FROM \n");        stringbuffer.append("   TERM_REG_SUST \n");        stringbuffer.append("WHERE \n");        stringbuffer.append(" TIPO_SUSTANTIVO=?  \n");        stringbuffer.append(" AND CASO=? \n");        stringbuffer.append(" AND NUMERO=? \n");        SELECT_MAX_SUB_SQL = stringbuffer.toString();        StringBuffer stringbuffer1 = new StringBuffer("INSERT INTO TERM_REG_SUST  ( \n");        stringbuffer1.append("  TIPO_SUSTANTIVO, \n");        stringbuffer1.append("  CASO, \n");        stringbuffer1.append("  NUMERO, \n");        stringbuffer1.append("  ORIGEN_TEMA, \n");        stringbuffer1.append("  SUBINDICE, \n");        stringbuffer1.append("  TERMINACION, \n");        stringbuffer1.append("  EX_CONTRACCION, \n");        stringbuffer1.append("  TIPOS_SUST_HOJA, \n");        stringbuffer1.append("  ACENTO, \n");        stringbuffer1.append("  SILABA, \n");        stringbuffer1.append("  ACENTO_CONCUERDA, \n");        stringbuffer1.append("  POSICION_CONCUERDA,  \n");        stringbuffer1.append("  REGEX_DESINENCIA)  \n");        stringbuffer1.append("VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)  \n");        INSERT_SQL = stringbuffer1.toString();    }    public List seleccionaPorTerminacion(String terminacion) {        List list = selPorTerminacion.execute(new Object[] { terminacion, terminacion, terminacion });        return list;    }    public int seleccionaMaxSubindice(int i, Caso caso, Numero numero) {        List list = A.execute(new Object[] { Integer.valueOf(i), caso.valorEntero(),                numero.valorEntero() });        if (list.size() == 0) {            return 0;        } else {            Integer integer = (Integer) list.get(0);            return integer.intValue();        }    }    public void inserta(TermRegSustantivo bean) {        C.update(new Object[] { Integer.valueOf(bean.getTipoSustantivo()), bean.getCaso().valorEntero(),                bean.getNumero().valorEntero(), bean.getOrigenTema().abreviatura(),                Integer.valueOf(bean.getSubindice()), bean.getTerminacion(), Integer.valueOf(bean.isExContraccion() ? 1 : 0),                bean.getTiposHoja(), bean.getAcento().valorEntero(), bean.getSilaba().valorEntero(),                Integer.valueOf(bean.getAcentoConcuerda()), Integer.valueOf(bean.getPosicionConcuerda()),                bean.getRegExDesinencia() });    }    public void initDao() throws Exception {        super.initDao();        puebla();        C = new Insercion(getDataSource());        selPorTerminacion = new SeleccionPosSubstring(getDataSource());        A = new SeleccionMaxSub(getDataSource());    }    static String B() {        return SELECT_MAX_SUB_SQL;    }    static String A() {        return INSERT_SQL;    }    private static String SELECT_POR_SUBSTRING_SQL;    private static String SELECT_MAX_SUB_SQL;    private static String INSERT_SQL;    private SeleccionPosSubstring selPorTerminacion;    private SeleccionMaxSub A;    private Insercion C;}