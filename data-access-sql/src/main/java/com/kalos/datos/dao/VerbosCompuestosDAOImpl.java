// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package com.kalos.datos.dao;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import javax.sql.DataSource;import com.kalos.beans.VerboSimpleCompuesto;import org.springframework.jdbc.core.SqlParameter;import org.springframework.jdbc.core.support.JdbcDaoSupport;import org.springframework.jdbc.object.MappingSqlQuery;import org.springframework.jdbc.object.SqlUpdate;// Referenced classes of package kalos.E.C://            ipublic class VerbosCompuestosDAOImpl extends JdbcDaoSupport implements VerbosCompuestosDAO {	class BorradoPorVerboCompuesto extends SqlUpdate {		public BorradoPorVerboCompuesto(DataSource datasource) {			super(datasource, DELETE_POR_VC_SQL);			declareParameter(new SqlParameter(1));		}	}	class BorradoPorVsVc extends SqlUpdate {		public BorradoPorVsVc(DataSource datasource) {			super(datasource, DELETE_POR_VS_VC_SQL);			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(1));		}	}	class Insertion extends SqlUpdate {		public Insertion(DataSource datasource) {			super(datasource, INSERT_SQL);			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(1));		}	}	class SeleccionPorVerboCompuesto extends SeleccionAbstracta {		public SeleccionPorVerboCompuesto(DataSource datasource) {			super(datasource, SELECT_POR_VC_SQL);			declareParameter(new SqlParameter(1));		}	}	class SeleccionPorVerboSimple extends SeleccionAbstracta {		public SeleccionPorVerboSimple(DataSource datasource) {			super(datasource, SELECT_POR_VERBO_SIMPLE_SQL);			declareParameter(new SqlParameter(1));		}	}    class SeleccionTodo extends SeleccionAbstracta {        public SeleccionTodo(DataSource datasource) {            super(datasource, SELECT_TODO_SQL);        }    }	class SeleccionIndividual extends SeleccionAbstracta {		public SeleccionIndividual(DataSource datasource) {			super(datasource, SEL_INDIVIDUAL_SQL);			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(1));		}	}	abstract class SeleccionAbstracta extends MappingSqlQuery {		protected Object mapRow(ResultSet resultset, int j) throws SQLException {			VerboSimpleCompuesto h = new VerboSimpleCompuesto();			h.setIdVerboCompuesto(resultset.getString("VERBO_COMPUESTO_ID"));			h.setIdVerboSimple(resultset.getString("VERBO_SIMPLE_ID"));			return h;		}		public SeleccionAbstracta(DataSource datasource, String s) {			super(datasource, s);		}	}	private void puebla() {		StringBuffer sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  VEC.VERBO_SIMPLE_ID,   \n");		sql.append("  VEC.VERBO_COMPUESTO_ID   \n");		sql.append("FROM        \n");		sql.append("  VERBOS_COMPUESTOS VEC       \n");		sql.append("WHERE  \n");		sql.append("  VEC.VERBO_COMPUESTO_ID=?  ");		SELECT_POR_VC_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  VEC.VERBO_SIMPLE_ID,   \n");		sql.append("  VEC.VERBO_COMPUESTO_ID   \n");		sql.append("FROM        \n");		sql.append("  VERBOS_COMPUESTOS VEC       \n");		sql.append("WHERE  \n");		sql.append("  VEC.VERBO_SIMPLE_ID=?  ");		SELECT_POR_VERBO_SIMPLE_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  VEC.VERBO_SIMPLE_ID,   \n");		sql.append("  VEC.VERBO_COMPUESTO_ID   \n");		sql.append("FROM        \n");		sql.append("  VERBOS_COMPUESTOS VEC       \n");		SELECT_TODO_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  VEC.VERBO_SIMPLE_ID,   \n");		sql.append("  VEC.VERBO_COMPUESTO_ID   \n");		sql.append("FROM        \n");		sql.append("  VERBOS_COMPUESTOS VEC       \n");		sql.append("WHERE  \n");		sql.append("  VEC.VERBO_SIMPLE_ID=?  ");		sql.append("  AND VEC.VERBO_COMPUESTO_ID=?  ");		SEL_INDIVIDUAL_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("INSERT INTO VERBOS_COMPUESTOS (   \n");		sql.append("  VERBO_SIMPLE_ID,   \n");		sql.append("  VERBO_COMPUESTO_ID   \n");		sql.append(" ) VALUES (    \n");		sql.append("  ?,?     \n");		sql.append(")     \n");		INSERT_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("DELETE FROM VERBOS_COMPUESTOS WHERE   \n");		sql.append("  VERBO_SIMPLE_ID=?  \n");		sql.append("  AND VERBO_COMPUESTO_ID=?  \n");		DELETE_POR_VS_VC_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("DELETE FROM VERBOS_COMPUESTOS WHERE   \n");		sql.append("  VERBO_COMPUESTO_ID=?  \n");		DELETE_POR_VC_SQL = sql.toString();	}	@SuppressWarnings("unchecked")	public VerboSimpleCompuesto seleccionaInidvidual(String s, String s1) {		List<VerboSimpleCompuesto> list = seleccionIndividual.execute(new Object[] { s, s1 });		if (list.size() == 0)			return null;		else			return (VerboSimpleCompuesto) list.get(0);	}	@SuppressWarnings("unchecked")	public List<VerboSimpleCompuesto> seleccionaPorVerboSimple(String s) {		List<VerboSimpleCompuesto> list = seleccionPorVerboSimple.execute(new Object[] { s });		return list;	}    @SuppressWarnings("unchecked")    public List<VerboSimpleCompuesto> seleccionaTodo() {        List<VerboSimpleCompuesto> list = seleccionTodo.execute(new Object[] { });        return list;    }	@SuppressWarnings("unchecked")	public VerboSimpleCompuesto seleccionaPorVerboCompuesto(String s) {		List<VerboSimpleCompuesto> list = seleccionPorVerboCompuesto.execute(new Object[] { s });		if (list.size() > 0)			return (VerboSimpleCompuesto) list.get(0);		else			return null;	}	public void inserta(VerboSimpleCompuesto h) {		insercion.update(new Object[] { h.getIdVerboSimple(), h.getIdVerboCompuesto() });	}	public void borraIndividual(String s, String s1) {		borradoIndividual.update(new Object[] { s, s1 });	}	public void borraPorVerboCompuesto(String s) {		borradoPorCompuesto.update(new Object[] { s });	}	public void initDao() throws Exception {		super.initDao();		puebla();		seleccionIndividual = new SeleccionIndividual(getDataSource());		seleccionPorVerboSimple = new SeleccionPorVerboSimple(getDataSource());		seleccionPorVerboCompuesto = new SeleccionPorVerboCompuesto(getDataSource());        seleccionTodo = new SeleccionTodo(getDataSource());		insercion = new Insertion(getDataSource());		borradoIndividual = new BorradoPorVsVc(getDataSource());		borradoPorCompuesto = new BorradoPorVerboCompuesto(getDataSource());	}	private static String SELECT_POR_VC_SQL;	private static String SELECT_POR_VERBO_SIMPLE_SQL;	private static String SEL_INDIVIDUAL_SQL;	private static String SELECT_TODO_SQL;	private static String INSERT_SQL;	private static String DELETE_POR_VS_VC_SQL;	private static String DELETE_POR_VC_SQL;	private SeleccionIndividual seleccionIndividual;	private SeleccionPorVerboSimple seleccionPorVerboSimple;	private SeleccionPorVerboCompuesto seleccionPorVerboCompuesto;    private SeleccionTodo seleccionTodo;	private Insertion insercion;	private BorradoPorVsVc borradoIndividual;	private BorradoPorVerboCompuesto borradoPorCompuesto;}