// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package com.kalos.datos.dao;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.sql.DataSource;import org.springframework.jdbc.core.SqlParameter;import org.springframework.jdbc.core.support.JdbcDaoSupport;import org.springframework.jdbc.object.MappingSqlQuery;import org.springframework.jdbc.object.SqlUpdate;// Referenced classes of package kalos.E.C://            $Aimport com.kalos.beans.Significado;import com.kalos.beans.SustantivoBean;import com.kalos.datos.dao.comunes.SeleccionIds;import com.kalos.datos.util.DBUtil;import com.kalos.datos.util.Listas;import com.kalos.enumeraciones.Genero;import com.kalos.enumeraciones.Idioma;import com.kalos.enumeraciones.LugarSubcadena;import com.kalos.enumeraciones.Particularidad;import com.kalos.recursos.Configuracion;public class SustantivosDAOImpl extends JdbcDaoSupport implements		SustantivosDAO {	class Borrado extends SqlUpdate {		public Borrado(DataSource datasource) {			super(datasource, DELETE_SQL);			declareParameter(new SqlParameter(1));		}	}	class ModifCodigoIndividual extends SqlUpdate {		public ModifCodigoIndividual(DataSource datasource) {			super(datasource, UPDATE_CODIGO_INDIV_SQL);			declareParameter(new SqlParameter(4));			declareParameter(new SqlParameter(1));		}	}	class ModificacionCodigoMult extends SqlUpdate {		public ModificacionCodigoMult(DataSource datasource) {			super(datasource, UPDATE_CODIGO_MULT_SQL);			declareParameter(new SqlParameter(1));		}	}	class Modificacion extends SqlUpdate {		public Modificacion(DataSource datasource) {			super(datasource, UPDATE_SQL);			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(4));			declareParameter(new SqlParameter(12));			declareParameter(new SqlParameter(12));			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(4));			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(4));			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(4));			declareParameter(new SqlParameter(4));			declareParameter(new SqlParameter(1));		}	}	class Insercion extends SqlUpdate {		public Insercion(DataSource datasource) {			super(datasource, INSERT_SQL);			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(4));			declareParameter(new SqlParameter(12));			declareParameter(new SqlParameter(12));			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(4));			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(4));			declareParameter(new SqlParameter(1));			declareParameter(new SqlParameter(4));			declareParameter(new SqlParameter(4));		}	}	class SeleccionPorGenitivo extends SeleccionAbstractaSinSig {		public SeleccionPorGenitivo(DataSource datasource) {			super(datasource, SEL_POR_GENITIVO_SQL);			declareParameter(new SqlParameter(12));			declareParameter(new SqlParameter(12));		}	}	class ObtencionPorId extends SeleccionAbstractaSinSig {		public ObtencionPorId(DataSource datasource) {			super(datasource, GET_POR_ID_SQL);			declareParameter(new SqlParameter(1));		}	}	class SeleccionPorNominativoParaAM extends SeleccionAbstractaSinSig {		public SeleccionPorNominativoParaAM(DataSource datasource) {			super(datasource, SEL_POR_NOMINATIVO_SQL);			declareParameter(new SqlParameter(12));			declareParameter(new SqlParameter(12));		}	}	class SeleccionIdsPorNom extends SeleccionIds {		public SeleccionIdsPorNom(DataSource datasource, String s) {			super(datasource, s, "SUSTANTIVO_ID");		}	}	class ObtencionConSignificado extends SeleccionAbstracta {		public ObtencionConSignificado(DataSource datasource) {			super(datasource, GET_CON_SIGNIFICADO_SQL);			declareParameter(new SqlParameter(1));		}	}	class SeleccionIdsPorLetra extends SeleccionIds {		public SeleccionIdsPorLetra(DataSource datasource) {			super(datasource, SEL_IDS_POR_LETRA_SQL, "SUSTANTIVO_ID");			declareParameter(new SqlParameter(1));		}	}    class SeleccionTodo extends SeleccionAbstractaSinSig {        public SeleccionTodo(DataSource datasource) {            super(datasource, SEL_TODO_SQL);        }    }	class SelPorIds extends SeleccionAbstracta {		public SelPorIds(DataSource datasource, String s) {			super(datasource, s);		}	}	class SeleccionIdsPorTipos extends SeleccionIds {		public SeleccionIdsPorTipos(DataSource datasource, String s) {			super(datasource, s, "SUSTANTIVO_ID");		}	}	abstract class SeleccionAbstractaSinSig extends MappingSqlQuery<SustantivoBean> {		protected SustantivoBean mapRow(ResultSet resultset, int j) throws SQLException {			SustantivoBean bean = new SustantivoBean();			bean.setId(resultset.getString("SUSTANTIVO_ID"));			bean.setLetra(resultset.getString("LETRA"));			bean.setCodigo(resultset.getInt("CODIGO"));			bean.setNominativo(resultset.getString("NOMINATIVO"));			bean.setGenitivo(resultset.getString("GENITIVO"));			bean.setGenero(Genero.getEnum(resultset.getString("GENERO")));			bean.setDibujado(resultset.getInt("DIBUJADO") != 0);			bean.setPartic(Particularidad.getEnum(resultset.getString("PARTIC")));			bean.setTipoNominal(resultset.getInt("TIPO_SUSTANTIVO"));			bean.setIdTipo(resultset.getString("TIPO_SUSTANTIVO_ID"));			bean.setSoloSingular(resultset.getInt("SOLO_SINGULAR") != 0);			bean.setPluralizado(resultset.getInt("PLURALIZADO") != 0);			return bean;		}		public SeleccionAbstractaSinSig(DataSource datasource, String s) {			super(datasource, s);		}	}	private class SeleccionPorNominativo extends SeleccionAbstractaSinSig {		public SeleccionPorNominativo(DataSource datasource) {			super(datasource, SEL_POR_NOMINATIVO_SQL);			declareParameter(new SqlParameter(12));			declareParameter(new SqlParameter(12));		}	}	abstract class SeleccionAbstracta extends MappingSqlQuery<SustantivoBean> {		protected SustantivoBean mapRow(ResultSet resultset, int j) throws SQLException {			SustantivoBean bean = new SustantivoBean();			bean.setId(resultset.getString("SUSTANTIVO_ID"));			bean.setLetra(resultset.getString("LETRA"));			bean.setCodigo(resultset.getInt("CODIGO"));			bean.setNominativo(resultset.getString("NOMINATIVO"));			bean.setGenitivo(resultset.getString("GENITIVO"));			bean.setGenero(Genero.getEnum(resultset.getString("GENERO")));			bean.setDibujado(resultset.getInt("DIBUJADO") != 0);			bean.setPartic(Particularidad.getEnum(resultset.getString("PARTIC")));			bean.setTipoNominal(resultset.getInt("TIPO_SUSTANTIVO"));			bean.setIdTipo(resultset.getString("TIPO_SUSTANTIVO_ID"));			bean.setSoloSingular(resultset.getInt("SOLO_SINGULAR") != 0);			bean.setPluralizado(resultset.getInt("PLURALIZADO") != 0);			Significado q1 = new Significado();			q1.setIdioma(Configuracion.getIdiomaSignificados());			q1.setReferenteId(bean.getId());			q1.setId(resultset.getString("SIGNIFICADO_ID"));			q1.setValor(resultset.getString("VALOR"));			Map<Idioma, Significado> hashmap = new HashMap<>();			hashmap.put(Idioma.getEnum(Configuracion.getIdiomaSignificados()), q1);			bean.setSignificados(hashmap);			return bean;		}		public SeleccionAbstracta(DataSource datasource, String s) {			super(datasource, s);		}	}	private void puebla() {		StringBuffer sql = new StringBuffer(200);		sql.append("SELECT \n");		sql.append(" SUS.SUSTANTIVO_ID \n");		sql.append("FROM \n");		sql.append(" SUSTANTIVOS SUS \n");		sql.append("WHERE \n");		sql.append(" SUS.LETRA=? \n");		sql.append("ORDER BY \n");		sql.append(" SUS.CODIGO \n");		SEL_IDS_POR_LETRA_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT  \n");		sql.append("  SUS.SUSTANTIVO_ID   \n");		sql.append("FROM  \n");		sql.append("    SUSTANTIVOS SUS  \n");		sql.append("WHERE  \n");		sql.append("    SUS.NOMINATIVO LIKE ?   \n");		sql.append("    OR SUS.NOMINATIVO LIKE CONCAT('*', ?)   \n");		sql.append("ORDER BY  \n");		sql.append("    SUS.CODIGO   \n");		SEL_IDS_POR_NOMINATIVO_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT  \n");		sql.append("  SUS.SUSTANTIVO_ID,   \n");		sql.append("  SUS.LETRA,   \n");		sql.append("  SUS.CODIGO,   \n");		sql.append("  SUS.GENERO,   \n");		sql.append("  SUS.NOMINATIVO,   \n");		sql.append("  SUS.GENITIVO,   \n");		sql.append("  SUS.DIBUJADO,   \n");		sql.append("  SUS.PARTIC,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO_ID,   \n");		sql.append("  SUS.SOLO_SINGULAR,   \n");		sql.append("  SUS.PLURALIZADO   \n");		sql.append("FROM  \n");		sql.append("    SUSTANTIVOS SUS  \n");		sql.append("WHERE  \n");		sql.append("    SUS.NOMINATIVO =?   \n");		sql.append("    OR SUS.NOMINATIVO = CONCAT('*', ?)   \n");		sql.append("ORDER BY  \n");		sql.append("    SUS.CODIGO   \n");		SEL_POR_NOMINATIVO_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT  \n");		sql.append("  SUS.SUSTANTIVO_ID,   \n");		sql.append("  SUS.LETRA,   \n");		sql.append("  SUS.CODIGO,   \n");		sql.append("  SUS.GENERO,   \n");		sql.append("  SUS.NOMINATIVO,   \n");		sql.append("  SUS.GENITIVO,   \n");		sql.append("  SUS.DIBUJADO,   \n");		sql.append("  SUS.PARTIC,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO_ID,   \n");		sql.append("  SUS.SOLO_SINGULAR,   \n");		sql.append("  SUS.PLURALIZADO   \n");		sql.append("FROM  \n");		sql.append("    SUSTANTIVOS SUS  \n");		sql.append("WHERE  \n");		sql.append("    SUS.SUSTANTIVO_ID =?   \n");		GET_POR_ID_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT  \n");		sql.append("  SUS.SUSTANTIVO_ID,   \n");		sql.append("  SUS.LETRA,   \n");		sql.append("  SUS.CODIGO,   \n");		sql.append("  SUS.GENERO,   \n");		sql.append("  SUS.NOMINATIVO,   \n");		sql.append("  SUS.GENITIVO,   \n");		sql.append("  SUS.DIBUJADO,   \n");		sql.append("  SUS.PARTIC,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO_ID,   \n");		sql.append("  SUS.SOLO_SINGULAR,   \n");		sql.append("  SUS.PLURALIZADO   \n");		sql.append("FROM  \n");		sql.append("    SUSTANTIVOS SUS  \n");		sql.append("WHERE  \n");		sql.append("    SUS.GENITIVO =?   \n");		sql.append("    OR SUS.GENITIVO = CONCAT('*', ?)   \n");		sql.append("ORDER BY  \n");		sql.append("    SUS.CODIGO   \n");		SEL_POR_GENITIVO_SQL = sql.toString();        sql = new StringBuffer(200);        sql.append("SELECT  \n");        sql.append("  SUS.SUSTANTIVO_ID,   \n");        sql.append("  SUS.LETRA,   \n");        sql.append("  SUS.CODIGO,   \n");        sql.append("  SUS.GENERO,   \n");        sql.append("  SUS.NOMINATIVO,   \n");        sql.append("  SUS.GENITIVO,   \n");        sql.append("  SUS.DIBUJADO,   \n");        sql.append("  SUS.PARTIC,   \n");        sql.append("  SUS.TIPO_SUSTANTIVO,   \n");        sql.append("  SUS.TIPO_SUSTANTIVO_ID,   \n");        sql.append("  SUS.SOLO_SINGULAR,   \n");        sql.append("  SUS.PLURALIZADO   \n");        sql.append("FROM  \n");        sql.append("    SUSTANTIVOS SUS  \n");        sql.append("ORDER BY  \n");        sql.append("    SUS.CODIGO   \n");        SEL_TODO_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  SUS.SUSTANTIVO_ID   \n");		sql.append("FROM        \n");		sql.append("  SUSTANTIVOS SUS       \n");		sql.append("    INNER JOIN TIPOS_SUSTANTIVO TIS                 \n");		sql.append("      ON SUS.TIPO_SUSTANTIVO_ID=TIS.TIPO_SUSTANTIVO_ID       \n");		sql.append("WHERE  \n");		sql.append("  TIS.TIPO_SUSTANTIVO IN (?) \n");		sql.append("ORDER BY  \n");		sql.append("  SUS.LETRA,   \n");		sql.append("  SUS.CODIGO   \n");		SEL_ID_POR_TIPO_SUSTANTIVO_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  SUS.SUSTANTIVO_ID,   \n");		sql.append("  SUS.LETRA,   \n");		sql.append("  SUS.CODIGO,   \n");		sql.append("  SUS.GENERO,   \n");		sql.append("  SUS.NOMINATIVO,   \n");		sql.append("  SUS.GENITIVO,   \n");		sql.append("  SUS.DIBUJADO,   \n");		sql.append("  SUS.PARTIC,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO_ID,   \n");		sql.append("  SUS.SOLO_SINGULAR,   \n");		sql.append("  SUS.PLURALIZADO,   \n");		sql.append("  SIG.SIGNIFICADO_ID,   \n");		sql.append("  SIG.VALOR   \n");		sql.append("FROM        \n");		sql.append("  SUSTANTIVOS SUS       \n");		sql.append("    LEFT JOIN SIGNIFICADOS SIG                 \n");		sql.append("      ON SUS.SUSTANTIVO_ID=SIG.REFERENTE_ID       \n");		sql.append("WHERE  \n");		sql.append("  SUS.SUSTANTIVO_ID=?    \n");		sql.append("  AND (SIG.IDIOMA IS NULL OR SIG.IDIOMA='").append(Configuracion.getIdiomaSignificados()).append("')   \n");		GET_CON_SIGNIFICADO_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  SUS.SUSTANTIVO_ID,   \n");		sql.append("  SUS.LETRA,   \n");		sql.append("  SUS.CODIGO,   \n");		sql.append("  SUS.GENERO,   \n");		sql.append("  SUS.NOMINATIVO,   \n");		sql.append("  SUS.GENITIVO,   \n");		sql.append("  SUS.DIBUJADO,   \n");		sql.append("  SUS.PARTIC,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO_ID,   \n");		sql.append("  SUS.SOLO_SINGULAR,   \n");		sql.append("  SUS.PLURALIZADO   \n");		sql.append("FROM        \n");		sql.append("  SUSTANTIVOS SUS       \n");		sql.append("WHERE  \n");		sql.append("  SUS.TIPO_SUSTANTIVO=0    \n");		sql.append("  AND SUS.NOMINATIVO=?    \n");		SEL_POR_NOMINATIVO_TIPO0_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  SUS.SUSTANTIVO_ID,   \n");		sql.append("  SUS.LETRA,   \n");		sql.append("  SUS.CODIGO,   \n");		sql.append("  SUS.GENERO,   \n");		sql.append("  SUS.NOMINATIVO,   \n");		sql.append("  SUS.GENITIVO,   \n");		sql.append("  SUS.DIBUJADO,   \n");		sql.append("  SUS.PARTIC,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO,   \n");		sql.append("  SUS.TIPO_SUSTANTIVO_ID,   \n");		sql.append("  SUS.SOLO_SINGULAR,   \n");		sql.append("  SUS.PLURALIZADO,   \n");		sql.append("  SIG.SIGNIFICADO_ID,   \n");		sql.append("  SIG.VALOR   \n");		sql.append("FROM        \n");		sql.append("  SUSTANTIVOS SUS       \n");		sql.append("    LEFT JOIN SIGNIFICADOS SIG                 \n");		sql.append("      ON SUS.SUSTANTIVO_ID=SIG.REFERENTE_ID       \n");		sql.append("WHERE  \n");		sql.append("  SUS.SUSTANTIVO_ID IN (?)    \n");		sql.append("  AND (SIG.IDIOMA IS NULL OR SIG.IDIOMA='").append(Configuracion.getIdiomaSignificados()).append("')   \n");		sql.append("ORDER BY  \n");		sql.append("  SUS.LETRA,   \n");		sql.append("  SUS.CODIGO   \n");		SEL_POR_IDS_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("INSERT INTO SUSTANTIVOS(   \n");		sql.append("  SUSTANTIVO_ID,   \n");		sql.append("  LETRA,   \n");		sql.append("  CODIGO,   \n");		sql.append("  NOMINATIVO,   \n");		sql.append("  GENITIVO,   \n");		sql.append("  GENERO,   \n");		sql.append("  DIBUJADO,   \n");		sql.append("  PARTIC,   \n");		sql.append("  TIPO_SUSTANTIVO,   \n");		sql.append("  TIPO_SUSTANTIVO_ID,   \n");		sql.append("  SOLO_SINGULAR,   \n");		sql.append("  PLURALIZADO   \n");		sql.append(" ) VALUES (    \n");		sql.append("  ?,?,?,?,?,?,?,?,?,?,?,?  \n");		sql.append(")     \n");		INSERT_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("UPDATE SUSTANTIVOS SET   \n");		sql.append("  LETRA=?,   \n");		sql.append("  CODIGO=?,   \n");		sql.append("  NOMINATIVO=?,   \n");		sql.append("  GENITIVO=?,   \n");		sql.append("  GENERO=?,   \n");		sql.append("  DIBUJADO=?,   \n");		sql.append("  PARTIC=?,   \n");		sql.append("  TIPO_SUSTANTIVO=?,   \n");		sql.append("  TIPO_SUSTANTIVO_ID=?,   \n");		sql.append("  SOLO_SINGULAR=?,   \n");		sql.append("  PLURALIZADO=?   \n");		sql.append("WHERE    \n");		sql.append("  SUSTANTIVO_ID=?   \n");		UPDATE_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("UPDATE SUSTANTIVOS SET   \n");		sql.append("  CODIGO=CODIGO * 100   \n");		sql.append("WHERE    \n");		sql.append("  LETRA=?   \n");		UPDATE_CODIGO_MULT_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("UPDATE SUSTANTIVOS SET   \n");		sql.append("  CODIGO=?   \n");		sql.append("WHERE    \n");		sql.append("  SUSTANTIVO_ID=?   \n");		UPDATE_CODIGO_INDIV_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("DELETE FROM SUSTANTIVOS WHERE   \n");		sql.append("  SUSTANTIVO_ID=?  \n");		DELETE_SQL = sql.toString();	}	public List<SustantivoBean> seleccionaInvariables(String nominativo) {		List<SustantivoBean> list = seleccionPorNominativo.execute(nominativo, nominativo);		return list;	}	public List<String> getPorTipos(Integer ainteger[]) {		StringBuffer stringbuffer = new StringBuffer();		Integer ainteger1[] = ainteger;		int j = ainteger1.length;		for (int k = 0; k < j; k++) {			int l = ainteger1[k].intValue();			stringbuffer.append(l);			stringbuffer.append(",");		}		stringbuffer.deleteCharAt(stringbuffer.length() - 1);		String s = SEL_ID_POR_TIPO_SUSTANTIVO_SQL.replaceFirst("\\?",				stringbuffer.toString());		SeleccionIdsPorTipos selIdsPorTipos = new SeleccionIdsPorTipos(getDataSource(), s);		List<String> list = selIdsPorTipos.execute();		return list;	}	public List<SustantivoBean> getRegistros(List<String> ids) {		List<List<String>> listaDeListas = Listas.segmentos(ids, 500);		List<SustantivoBean> beans = new ArrayList<SustantivoBean>();		for (List<String> listaDeIds : listaDeListas) {			StringBuffer sb = new StringBuffer(500);			for (String id : listaDeIds) {				sb.append("'").append(id).append("',");			}			sb.deleteCharAt(sb.length() - 1);			String sql = SEL_POR_IDS_SQL.replaceFirst("\\?", sb.toString());			SelPorIds sel = new SelPorIds(getDataSource(), sql);			List<SustantivoBean> segmBeans = sel.execute();			beans.addAll(segmBeans);		}		return beans;	}	public List<String> getPorLetra(String letra) {		return seleccionIdsPorLetra.execute( letra );	}	public SustantivoBean getInidvidual(String s) {		SustantivoBean bean = (SustantivoBean) obtencionConSignificado.findObject(s);		return bean;	}	public List<String> seleccionaPorNominativo(String s, LugarSubcadena h1) {		String s1 = null;		switch (h1) {		case Principio: // '\001'			s1 = (new StringBuilder()).append("'").append(s).append("%'").toString();			break;		case Medio: // '\002'			s1 = (new StringBuilder()).append("'%").append(s).append("%'").toString();			break;		case Fin: // '\003'			s1 = (new StringBuilder()).append("'%").append(s).append("'").toString();			break;		case Exacto: // '\004'			s1 = (new StringBuilder()).append("'").append(s).append("'").toString();			break;		}		String s2 = SEL_IDS_POR_NOMINATIVO_SQL.replaceAll("\\?", s1);		SeleccionIdsPorNom selIdsPorNom = new SeleccionIdsPorNom(getDataSource(), s2);		List<String> list = selIdsPorNom.execute();		return list;	}	public List<SustantivoBean> seleccionaPorNominativoParaAM(String nominativo) {		List<SustantivoBean> list = seleccionPorNominativoParaAM.execute(nominativo, nominativo );		return list;	}    public List<SustantivoBean> seleccionaTodo() {        List<SustantivoBean> list = seleccionTodo.execute();        return list;    }	public SustantivoBean seleccionaIndividualParaAM(String s) {		SustantivoBean bean = (SustantivoBean) obtencionPorId.findObject(s);		return bean;	}	public List<SustantivoBean> seleccionaPorGenitivoParaAM(String genitivo) {		List<SustantivoBean> list = seleccionPorGenitivo.execute( genitivo, genitivo );		return list;	}	public void inserta(SustantivoBean bean) {		String s = DBUtil.getHashableId();		insercion.update(s,                bean.getLetra(),				bean.getCodigo(),				bean.getNominativo(),				bean.getGenitivo(),				bean.getGenero().valorLetra(),				bean.isDibujado() ? 1 : 0,				bean.getPartic().abreviatura(),				bean.getTipoNominal(),				bean.getIdTipo(),				bean.isSoloSingular() ? 1 : 0,				bean.isPluralizado() ? 1 : 0);		bean.setId(s);	}	public void modifica(SustantivoBean j) {		modificacion.update(new Object[] { j.getLetra(),				Integer.valueOf(j.getCodigo()), j.getNominativo(),				j.getGenitivo(), j.getGenero().valorLetra(),				Integer.valueOf(j.isDibujado() ? 1 : 0),				j.getPartic().abreviatura(),				Integer.valueOf(j.getTipoNominal()), j.getIdTipo(),				Integer.valueOf(j.isSoloSingular() ? 1 : 0),				Integer.valueOf(j.isPluralizado() ? 1 : 0), j.getId() });	}	public void modificaCodigosTodos(String s) {		modificaCodigoMult.update(new Object[] { s });	}	public void modificaCodigoIndividual(int j, String s) {		modifCodigoIndividual.update(new Object[] { Integer.valueOf(j), s });	}	public void borra(String s) {		borrado.update(new Object[] { s });	}	public void initDao() throws Exception {		super.initDao();		puebla();		seleccionIdsPorLetra = new SeleccionIdsPorLetra(getDataSource());		obtencionConSignificado = new ObtencionConSignificado(getDataSource());		obtencionPorId = new ObtencionPorId(getDataSource());		seleccionPorNominativoParaAM = new SeleccionPorNominativoParaAM(getDataSource());		seleccionPorGenitivo = new SeleccionPorGenitivo(getDataSource());		seleccionPorNominativo = new SeleccionPorNominativo(getDataSource());        seleccionTodo = new SeleccionTodo(getDataSource());		insercion = new Insercion(getDataSource());		borrado = new Borrado(getDataSource());		modificacion = new Modificacion(getDataSource());		modificaCodigoMult = new ModificacionCodigoMult(getDataSource());		modifCodigoIndividual = new ModifCodigoIndividual(getDataSource());	}	private static String SEL_IDS_POR_LETRA_SQL;	private static String SEL_ID_POR_TIPO_SUSTANTIVO_SQL;	private static String GET_CON_SIGNIFICADO_SQL;	private static String SEL_POR_NOMINATIVO_SQL;	private static String SEL_IDS_POR_NOMINATIVO_SQL;	private static String GET_POR_ID_SQL;	private static String SEL_POR_GENITIVO_SQL;	private static String SEL_POR_NOMINATIVO_TIPO0_SQL;	private static String SEL_POR_IDS_SQL;    private static String SEL_TODO_SQL;	private static String INSERT_SQL;	private static String UPDATE_SQL;	private static String UPDATE_CODIGO_MULT_SQL;	private static String UPDATE_CODIGO_INDIV_SQL;	private static String DELETE_SQL;	private SeleccionPorNominativo seleccionPorNominativo;	private SeleccionIdsPorLetra seleccionIdsPorLetra;	private ObtencionConSignificado obtencionConSignificado;	private SeleccionPorNominativoParaAM seleccionPorNominativoParaAM;	private ObtencionPorId obtencionPorId;	private SeleccionPorGenitivo seleccionPorGenitivo;    private SeleccionTodo seleccionTodo;	private Insercion insercion;	private Modificacion modificacion;	private ModificacionCodigoMult modificaCodigoMult;	private ModifCodigoIndividual modifCodigoIndividual;	private Borrado borrado;}