// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) package com.kalos.datos.dao;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Types;import java.util.List;import javax.sql.DataSource;import com.kalos.beans.TipoSustantivo;import com.kalos.enumeraciones.Genero;import org.springframework.jdbc.core.SqlParameter;import org.springframework.jdbc.core.support.JdbcDaoSupport;import org.springframework.jdbc.object.MappingSqlQuery;import org.springframework.jdbc.object.SqlUpdate;// Referenced classes of package kalos.E.C://            Opublic class TiposSustantivoDAOImpl extends JdbcDaoSupport implements TiposSustantivoDAO {	class SeleccionTodos extends SeleccionAbstracta {		public SeleccionTodos(DataSource datasource) {			super(datasource, SEL_TODOS_SQL);			//declareParameter(new SqlParameter(4));		}	}	class ObtencionPorId extends SeleccionAbstracta {		public ObtencionPorId(DataSource datasource) {			super(datasource, OBTIENE_POR_ID_SQL);			declareParameter(new SqlParameter(Types.CHAR));		}	}	class ObtencionPorNumero extends SeleccionAbstracta {		public ObtencionPorNumero(DataSource datasource) {			super(datasource, OBTIENE_POR_NRO_SQL);			declareParameter(new SqlParameter(Types.INTEGER));		}	}	abstract class SeleccionAbstracta extends MappingSqlQuery {		protected Object mapRow(ResultSet resultset, int i) throws SQLException {			TipoSustantivo o1 = new TipoSustantivo();			o1.setId(resultset.getString("TIPO_SUSTANTIVO_ID"));			o1.setPadreId(resultset.getString("PADRE_ID"));			o1.setCodigo(resultset.getInt("TIPO_SUSTANTIVO"));			o1.setDesClave(resultset.getString("TIPO_SUST_DES_CLAVE"));			Object obj = resultset.getObject("GENERO_SUGERIDO");			o1.setGeneroSugerido(obj != null ? Genero.getEnum((String) obj) : null);			o1.setPluralizado(resultset.getInt("PLURALIZADO") == 1);			o1.setSoloSingular(resultset.getInt("SOLO_SINGULAR") == 1);			//TODO:  el tipoPalabra es entero en la bas de datos, pero			//acá pide una enumeración TipoPalabra. No sé bien por qué, ni para qué sirve esto//	    Integer obj1 = o1.setTipoPalabra(TipoPalabra.get resultset.getInt("TIPO_PALABRA"));//	    o1.setTipoPalabra(obj1 == null ? null : TipoPalabra.getEnum((Integer) obj1));			return o1;		}		public SeleccionAbstracta(DataSource datasource, String s) {			super(datasource, s);		}	}	private void puebla() {		StringBuffer sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  TIS.TIPO_SUSTANTIVO_ID,   \n");		sql.append("  TIS.TIPO_SUSTANTIVO,   \n");		sql.append("  TIS.PADRE_ID,           \n");		sql.append("  TIS.GENERO_SUGERIDO,           \n");		sql.append("  TIS.PLURALIZADO,           \n");		sql.append("  TIS.SOLO_SINGULAR,           \n");		sql.append("  TIS.TIPO_PALABRA,           \n");		sql.append("  TIS.TIPO_SUST_DES_CLAVE    \n");		sql.append("FROM        \n");		sql.append("  TIPOS_SUSTANTIVO TIS       \n");		SEL_TODOS_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  TIS.TIPO_SUSTANTIVO_ID,   \n");		sql.append("  TIS.TIPO_SUSTANTIVO,   \n");		sql.append("  TIS.PADRE_ID,           \n");		sql.append("  TIS.GENERO_SUGERIDO,           \n");		sql.append("  TIS.PLURALIZADO,           \n");		sql.append("  TIS.SOLO_SINGULAR,           \n");		sql.append("  TIS.TIPO_PALABRA,           \n");		sql.append("  TIS.TIPO_SUST_DES_CLAVE    \n");		sql.append("FROM        \n");		sql.append("  TIPOS_SUSTANTIVO TIS       \n");		sql.append("WHERE        \n");		sql.append("  TIS.TIPO_SUSTANTIVO_ID=?       \n");		OBTIENE_POR_ID_SQL = sql.toString();		sql = new StringBuffer(200);		sql.append("SELECT   \n");		sql.append("  TIS.TIPO_SUSTANTIVO_ID,   \n");		sql.append("  TIS.TIPO_SUSTANTIVO,   \n");		sql.append("  TIS.PADRE_ID,           \n");		sql.append("  TIS.GENERO_SUGERIDO,           \n");		sql.append("  TIS.PLURALIZADO,           \n");		sql.append("  TIS.SOLO_SINGULAR,           \n");		sql.append("  TIS.TIPO_PALABRA,           \n");		sql.append("  TIS.TIPO_SUST_DES_CLAVE    \n");		sql.append("FROM        \n");		sql.append("  TIPOS_SUSTANTIVO TIS       \n");		sql.append("WHERE        \n");		sql.append("  TIS.TIPO_SUSTANTIVO=?       \n");		OBTIENE_POR_NRO_SQL = sql.toString();        sql = new StringBuffer(200);        sql.append("INSERT INTO TIPOS_SUSTANTIVO (   \n");        sql.append("  TIPO_SUSTANTIVO_ID,   \n");        sql.append("  TIPO_SUSTANTIVO,   \n");        sql.append("  PADRE,   \n");        sql.append("  PADRE_ID,   \n");        sql.append("  GENERO_SUGERIDO,   \n");        sql.append("  PLURALIZADO,   \n");        sql.append("  SOLO_SINGULAR,   \n");        sql.append("  TIPO_PALABRA,   \n");        sql.append("  TIPO_SUSTANTIVO_DES_CLAVE   \n");        sql.append(")VALUES (        \n");        sql.append("  ?,?,?,?,?,?,?,?,?       \n");        sql.append(")       \n");        INSERCION_SQL = sql.toString();	}    //inserción    class Insercion extends SqlUpdate {        public Insercion(DataSource dataSource) {            super(dataSource, INSERCION_SQL);            declareParameter(new SqlParameter(Types.CHAR));  //tipo sust id            declareParameter(new SqlParameter(Types.INTEGER));  //tipo sust            declareParameter(new SqlParameter(Types.INTEGER));  //padre            declareParameter(new SqlParameter(Types.CHAR)); //padre id            declareParameter(new SqlParameter(Types.CHAR)); //genero sugerido            declareParameter(new SqlParameter(Types.INTEGER)); //pluralizado            declareParameter(new SqlParameter(Types.INTEGER)); //solo singular            declareParameter(new SqlParameter(Types.INTEGER)); //tipo_palabra            declareParameter(new SqlParameter(Types.VARCHAR)); //desc clave        }    }    private Insercion insercion;    @Override    public void inserta(TipoSustantivo bean) {        String pk = com.kalos.datos.util.DBUtil.getHashableId();        insercion.update(                bean.getId(),                bean.getCodigo(),                bean.getPadreCodigo(),                bean.getPadreId(),                bean.getGeneroSugerido()!=null?bean.getGeneroSugerido().valorLetra():null,                bean.isPluralizado()?1:0,                bean.isSoloSingular()?1:0,                bean.getTipoPalabra()!=null?bean.getTipoPalabra():null,                bean.getDesClave()        );    }	@SuppressWarnings("unchecked")	public List<TipoSustantivo> seleccionaTodo() {		return selTodos.execute();	}	public TipoSustantivo seleccionaIndividual(int i) {		TipoSustantivo o1 = (TipoSustantivo) obtencionPorNro.findObject(i);		return o1;	}	public TipoSustantivo seleccionaIndividual(String i) {		TipoSustantivo o1 = (TipoSustantivo) obtencionPorId.findObject(i);		return o1;	}	public void initDao() throws Exception {		super.initDao();		puebla();		selTodos = new SeleccionTodos(getDataSource());		obtencionPorId = new ObtencionPorId(getDataSource());		obtencionPorNro = new ObtencionPorNumero(getDataSource());        insercion = new Insercion(getDataSource());	}	private static String SEL_TODOS_SQL;	private static String OBTIENE_POR_ID_SQL;	private static String OBTIENE_POR_NRO_SQL;    private static String INSERCION_SQL;	private SeleccionTodos selTodos;	private ObtencionPorId obtencionPorId;	private ObtencionPorNumero obtencionPorNro;}