package com.kalos.recursos;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.util.ArrayList;import java.util.Iterator;import java.util.Map;import java.util.Set;import java.util.TreeMap;public class UtilidadRecursos{  public static void main(String[] paramArrayOfString)    throws Exception  {    A("Mensajes_en.properties", "Mensajes_ord_en.properties");    A("Mensajes_es.properties", "Mensajes_ord_es.properties");    A("Mensajes_fr.properties", "Mensajes_ord_fr.properties");  }    private static void ordenaMapas(Map<String, String> paramMap1, Map<String, String> paramMap2)  {    Set localSet1 = paramMap2.keySet();    Set localSet2 = paramMap1.keySet();    Iterator localIterator = localSet1.iterator();    while (localIterator.hasNext())    {      String str = (String)localIterator.next();      if (!localSet2.contains(str)) {        paramMap1.put(str, paramMap2.get(str));      }    }  }    private static void A(String paramString1, String paramString2)    throws Exception  {    Map localMap = A(paramString1);    A(localMap, paramString2);  }    private static Map<String, String> A(String paramString)    throws Exception  {    BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(paramString)));    String str1 = localBufferedReader.readLine();    TreeMap localTreeMap = new TreeMap();    while (str1 != null)    {      String[] arrayOfString = str1.split("=");      String str2 = "";      if (arrayOfString.length == 2) {        str2 = arrayOfString[1].trim();      }      localTreeMap.put(arrayOfString[0], str2);      str1 = localBufferedReader.readLine();    }    localBufferedReader.close();    return localTreeMap;  }    private static void B(Map<String, String> paramMap1, Map<String, String> paramMap2)  {    ArrayList localArrayList = new ArrayList();    Set localSet = paramMap2.keySet();    Iterator localIterator = paramMap1.entrySet().iterator();    Object localObject;    while (localIterator.hasNext())    {      localObject = (Map.Entry)localIterator.next();      String str = (String)((Map.Entry)localObject).getKey();      if (localSet.contains(str))      {        System.out.println("quito " + str);        localArrayList.add(str);      }    }    localIterator = localArrayList.iterator();    while (localIterator.hasNext())    {      localObject = (String)localIterator.next();      paramMap1.remove(localObject);    }  }    private static void A(Map<String, String> paramMap, String paramString)    throws Exception  {    BufferedWriter localBufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(paramString)));    Iterator localIterator = paramMap.entrySet().iterator();    while (localIterator.hasNext())    {      Map.Entry localEntry = (Map.Entry)localIterator.next();      String str = (String)localEntry.getKey() + "=" + (String)localEntry.getValue();      localBufferedWriter.write(str + "\n");    }    localBufferedWriter.close();  }}